{"config": {"lang": ["en"], "separator": "[\\s\\u200b\\-]", "pipeline": ["stemmer"]}, "docs": [{"location": "aigc/", "title": "\u6982\u89c8", "text": ""}, {"location": "aigc/#todo", "title": "TODO", "text": "<ul> <li> Diffusion Model</li> </ul>"}, {"location": "asr/transducer/", "title": "Transducer", "text": ""}, {"location": "asr/transducer/#transducer", "title": "\u4ec0\u4e48\u662f Transducer? <sup>1</sup>", "text": "CTC vs RNNT \\[ P({\\bf y}|{\\bf x})=\\sum_{\\bf\\hat{y}\\in{\\cal A}_\\mathrm{CTC}({\\bf x},{\\bf y})}\\prod_{t=1}^{T} P(\\hat{y}_{t}|{\\bf x}_{1},\\cdot\\cdot\\cdot\\cdot,{\\bf x}_{t}) \\] <ul> <li>CTC \u5047\u8bbe\u6807\u7b7e\u95f4\u76f8\u4e92\u72ec\u7acb\uff0c\u800c\u5b9e\u9645\u4e0a\u8bed\u8a00\u7cfb\u7edf\u662f\u5b58\u5728\u4e0a\u4e0b\u6587\u5173\u7cfb\u7684\uff1b</li> <li>CTC \u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u53ea\u4f9d\u8d56\u5386\u53f2\u7684\u8f93\u5165\u4fe1\u606f\uff1bTransducer \u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u4e0d\u4ec5\u4f9d\u8d56\u5386\u53f2\u7684\u8f93\u5165\u4fe1\u606f\uff0c\u8fd8\u4f9d\u8d56\u5386\u53f2\u7684\u8f93\u51fa\u4fe1\u606f\u3002</li> </ul> <p>Transducer \u5305\u542b\u4e86\u4e09\u4e2a\u90e8\u5206\uff1aEncoder\u3001Decoder\u3001Joint Network.</p> <ul> <li>Encoder: \u58f0\u5b66\u6a21\u578b\uff0c\u5bf9\u8f93\u5165\u7684\u97f3\u9891\u8fdb\u884c\u7f16\u7801\uff1b</li> <li>Decoder: \u5373 Pred-Network\uff0c\u5bf9\u6807\u7b7e\u8fdb\u884c\u7f16\u7801\uff1b    </li> <li>Joint Network: \u5c06 Encoder \u548c Decoder \u7684\u8f93\u51fa\u8fdb\u884c\u878d\u5408\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u8f93\u51fa\u3002</li> </ul>"}, {"location": "asr/transducer/#transducer_1", "title": "Transducer \u7684\u4f18\u7f3a\u70b9", "text": "<ul> <li>\u4f18\u70b9: \u5305\u542b\u4e86\u8bed\u8a00\u6a21\u578b\uff0c\u7aef\u5230\u7aef\uff0c\u5929\u7136\u6d41\u5f0f\u89e3\u7801</li> <li>\u7f3a\u70b9: \u8bad\u7ec3\u4e0d\u7a33\u5b9a\uff0c\u8bad\u7ec3\u6d41\u7a0b\u590d\u6742\uff0c\u5bf9\u6570\u636e\u91cf\u548c\u8ba1\u7b97\u91cf\u8981\u6c42\u9ad8</li> </ul> <ol> <li> <p>Yanzhang He, Tara N Sainath, Rohit Prabhavalkar, Ian McGraw, Raziel Alvarez, Ding Zhao, David Rybach, Anjuli Kannan, Yonghui Wu, Ruoming Pang, and others. Streaming end-to-end speech recognition for mobile devices. In ICASSP 2019-2019 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), 6381\u20136385. IEEE, 2019.\u00a0\u21a9</p> </li> </ol>"}, {"location": "foundation/concepts/", "title": "\u57fa\u672c\u6982\u5ff5", "text": ""}, {"location": "foundation/concepts/#_1", "title": "\u4fe1\u606f\u8bba", "text": ""}, {"location": "foundation/concepts/#_2", "title": "\u71b5", "text": "<p>\u7528\u6765\u5ea6\u91cf\u4fe1\u606f\u7684\u4e0d\u786e\u5b9a\u7a0b\u5ea6\u3002</p> \\[ \\mathbf{H}(\\mathbf{X}) = - \\sum_{i=1}^N \\log p(x_i) \\]"}, {"location": "foundation/concepts/#_3", "title": "\u6761\u4ef6\u71b5", "text": ""}, {"location": "foundation/concepts/#_4", "title": "\u4ea4\u53c9\u71b5", "text": ""}, {"location": "foundation/concepts/#_5", "title": "\u4e92\u4fe1\u606f", "text": ""}, {"location": "foundation/concepts/#kl", "title": "\u76f8\u5bf9\u71b5 (KL \u6563\u5ea6)", "text": ""}, {"location": "foundation/concepts/#js", "title": "JS \u6563\u5ea6", "text": ""}, {"location": "foundation/distributed/", "title": "\u5206\u5e03\u5f0f", "text": ""}, {"location": "foundation/distributed/#_1", "title": "\u57fa\u672c\u6982\u5ff5", "text": "<p>\u6570\u636e\u5e76\u884c</p> <p>\u628a\u6a21\u578b\u653e\u5728\u591a\u4e2aGPU\u4e0a\uff0cbatch\u5e73\u5747\u5206\u5e03\u5230\u5404\u4e2a GPU \u4e0a\uff0c\u5e76\u884c\u8ba1\u7b97\u3002\u6839\u636e\u4e0d\u540c\u7684\u62d3\u6251\u4e0a\u7684\u7ed3\u6784\uff0c\u65b9\u6848\u6709 Parameter server \u548c Allreduce \u7b49\u3002</p> <p>\u6a21\u578b\u5e76\u884c</p> <p>\u6a21\u578b\u592a\u5927, \u65e0\u6cd5\u5728\u4e00\u4e2a device \u4e0a\u52a0\u8f7d\u3002\u6a21\u578b\u5e76\u884c\u662f\u4e00\u4e2a\u6bd4\u8f83\u5bbd\u6cdb\u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u5927\u81f4\u5206\u4e3a\u7eb5\u5411\u548c\u6a2a\u5411\u4e24\u79cd\u3002\u4e5f\u6709\u4e00\u4e9b\u4eba\u5c06\u6c34\u5e73\u5207\u5206\u79f0\u4e3a\u6a21\u578b\u5e76\u884c\uff0c\u5782\u76f4\u5207\u5206\uff08\u5c42\u95f4\u5207\u5206\uff09\u5219\u4e3a PipeLine Parallel\u3002</p> <ul> <li>\u7eb5\u5411: \u5229\u7528\u6a21\u578b\u5177\u6709\u65f6\u5e8f\u4f9d\u8d56\u6027\u7279\u70b9, \u8ba1\u7b97\u4e32\u884c, \u6216\u79f0\u4e3a Workload Partitioning;</li> <li>\u6a2a\u5411: \u8ba1\u7b97\u5b66\u4e60\u90fd\u662f\u77e9\u9635\u8fd0\u7b97\uff0c\u77e9\u9635\u53ef\u4ee5\u6a2a\u5411\u62c6\u5206\uff0c\u5206\u522b\u8ba1\u7b97\u518d\u6c9f\u901a\u628a\u7ed3\u679c\u77e9\u9635\u62fc\u51d1\u8d77\u6765\uff0c\u5982DeepSpeed, MegatronLM\u90fd\u652f\u6301\u3002</li> </ul>"}, {"location": "foundation/distributed/#_2", "title": "\u6570\u636e\u5e76\u884c", "text": ""}, {"location": "foundation/distributed/#_3", "title": "\u539f\u7406", "text": "<p>DP \u6a21\u5f0f: \u5c5e\u4e8e\u5355\u673a\u591a\u5361, \u53c2\u6570\u670d\u52a1\u5668 (Parameter Server) \u67b6\u6784\u3002\u8be5\u6a21\u5f0f\u4e0b\u603b\u5171\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b, master \u8282\u70b9\u76f8\u5f53\u4e8e\u53c2\u6570\u670d\u52a1\u5668, \u5bf9\u641c\u96c6\u5230\u7684\u53c2\u6570\u8fdb\u884c\u5e73\u5747\u540e\u518d\u5206\u53d1\u3002\u5f0a\u7aef\u662f master \u8282\u70b9\u8ba1\u7b97\u4efb\u52a1\u91cd, \u901a\u8baf\u91cf\u90fd\u5f88\u5927, \u5bfc\u81f4\u7f51\u7edc\u963b\u585e, \u964d\u4f4e\u8bad\u7ec3\u901f\u5ea6\u3002</p> <p>DDP \u7279\u70b9:</p> <ul> <li>DDP \u5c5e\u4e8e \u6570\u636e\u5e76\u884c;</li> <li>\u901a\u8fc7 Ring-Reduce \u7684\u6570\u636e\u4ea4\u6362\u65b9\u6cd5\u63d0\u9ad8\u4e86\u901a\u8baf\u6548\u7387;</li> <li>\u901a\u8fc7\u542f\u52a8\u591a\u4e2a\u8fdb\u7a0b\u7684\u65b9\u5f0f\u51cf\u8f7b Python GIL \u7684\u9650\u5236\uff0c\u4ece\u800c\u63d0\u9ad8\u8bad\u7ec3\u901f\u5ea6.</li> </ul>"}, {"location": "foundation/distributed/#_4", "title": "\u76f8\u5173\u6982\u5ff5", "text": "<p>\u4ee5\u4e0b\u63cf\u8ff0\u90fd\u662f\u57fa\u4e8e DDP \u6a21\u5f0f, 1 \u5f20\u663e\u5361\u5bf9\u5e94 1 \u4e2a\u8fdb\u7a0b\u3002\u4f8b\u5982\u4e24\u53f0\u673a\u5668, \u6bcf\u53f0 8 \u5f20\u663e\u5361, \u5219\u5171 16 \u5f20\u663e\u5361, \u4f1a\u542f\u52a8 16 \u4e2a\u8fdb\u7a0b\u3002</p> <ul> <li>group: \u8fdb\u7a0b\u7ec4, \u9ed8\u8ba4\u60c5\u51b5\u53ea\u6709 1 \u4e2a\u7ec4\uff1b</li> <li>world_size: \u5168\u5c40\u5e76\u884c\u6570, \u5373 2 * 8 = 16;</li> <li>rank: \u5f53\u524d\u8fdb\u7a0b\u7684\u5e8f\u53f7, \u7528\u4e8e\u8fdb\u7a0b\u95f4\u7684\u901a\u8baf; \u5bf9\u4e8e 16 \u7684\u5e76\u884c\u6570\u8bf4, \u8fdb\u7a0b\u53f7\u4e3a \\(0, 1, \\cdots 15\\),  \u5176\u4e2d rank=0 \u7684\u8fdb\u7a0b\u662f master \u8fdb\u7a0b;</li> <li>local_rank: \u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u8fdb\u7a0b\u5e8f\u53f7, \u4e24\u53f0\u673a\u5668\u4e0a\u7684 local_rank \u90fd\u5206\u522b\u4e3a \\(0, 1, 2, 3, 4, 5, 6, 7\\).</li> </ul>"}, {"location": "foundation/distributed/#ring-reduce", "title": "Ring-Reduce", "text": "<ul> <li>reduce \u6307\u628a\u4e0d\u540c\u8282\u70b9\u5404\u6709\u7684\u4e00\u4efd\u6570\u636e\u6c47\u603b\u5230\u4e00\u8d77 (\u5982\u52a0\u5230\u4e00\u8d77);</li> <li>all_reduce \u6307\u5728 reduce \u7684\u57fa\u7840\u4e0a\u628a\u6700\u7ec8\u7ed3\u679c\u53d1\u56de\u5230\u5404\u4e2a\u8282\u70b9\u3002 all_reduce \u7684\u5b9e\u73b0\u9700\u8981\u770b\u5177\u4f53\u7684 backend, \u5982 NCCL \u7684 all_reduce \u5b9e\u73b0\u4f7f\u7528\u4e86 ring \u7684\u601d\u60f3;</li> </ul> <p>Ring-Reduce\u662f\u4e00\u79cd\u5206\u5e03\u5f0f\u7a0b\u5e8f\u7684\u901a\u8baf\u65b9\u6cd5\u3002</p> <p></p> <p>\u7279\u70b9:</p> <ul> <li>\u5404\u8fdb\u7a0b\u72ec\u7acb\u8ba1\u7b97\u68af\u5ea6;</li> <li>\u6bcf\u4e2a\u8fdb\u7a0b\u5c06\u68af\u5ea6\u4f9d\u6b21\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u4e4b\u540e\u518d\u628a\u4ece\u4e0a\u4e00\u4e2a\u8fdb\u7a0b\u62ff\u5230\u7684\u68af\u5ea6\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u3002\u4f20\u9012 N \u6b21\uff08\u8fdb\u7a0b\u6570\u91cf\uff09\u4e4b\u540e\uff0c\u6240\u6709\u8fdb\u7a0b\u5c31\u53ef\u5f97\u5230\u5168\u90e8\u7684\u68af\u5ea6\u4e86.</li> </ul> <p>\u6bcf\u4e2a\u8fdb\u7a0b\u53ea\u8ddf\u81ea\u5df1\u4e0a\u4e0b\u6e38\u4e24\u4e2a\u8fdb\u7a0b\u8fdb\u884c\u901a\u8baf\uff0c\u6781\u5927\u5730\u7f13\u89e3\u4e86\u53c2\u6570\u670d\u52a1\u5668\u7684\u901a\u8baf\u963b\u585e\u73b0\u8c61\uff01</p>"}, {"location": "foundation/distributed/#ddp", "title": "DDP \u6d41\u7a0b", "text": ""}, {"location": "foundation/distributed/#_5", "title": "\u51c6\u5907\u9636\u6bb5", "text": "<ol> <li>\u73af\u5883\u51c6\u5907: (init_process_group), \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u4f1a\u8fdb\u884c\u8fd9\u4e00\u6b65, \u4e0e master \u8282\u70b9\u63e1\u624b\u5efa\u7acb\u8fde\u63a5; \u6ce8\u610f\u5982\u679c\u8fde\u63a5\u7684\u8fdb\u7a0b\u6570\u4e0d\u8db3\u7ea6\u5b9a\u7684 world_size, \u8fdb\u7a0b\u4f1a\u4e00\u76f4\u7b49\u5f85;</li> <li>DDP \u521d\u59cb\u5316: \u5c06 parameter\uff0c buffer \u4ece master \u8282\u70b9\u4f20\u5230\u5176\u4ed6\u8282\u70b9, \u4f7f\u6240\u6709\u8fdb\u7a0b\u72b6\u6001\u4e00\u81f4;</li> <li>\u53c2\u6570\u5206\u7ec4: \u628a parameter \u8fdb\u884c\u5206\u7ec4, \u6bcf\u7ec4\u79f0\u4e3a bucket;</li> <li>\u521b\u5efa\u7ba1\u7406\u5668: \u7ed9\u6bcf\u4e2aparameter\u6ce8\u518c\u68af\u5ea6\u5e73\u5747\u7684 hook;</li> <li>(\u53ef\u9009) \u4e3a\u53ef\u80fd\u7684SyncBN\u5c42\u505a\u51c6\u5907.</li> </ol>"}, {"location": "foundation/distributed/#_6", "title": "\u6b63\u5f0f\u8bad\u7ec3", "text": "<p>\u6bcf\u4e2a step, DDP \u5b8c\u6210\u5982\u4e0b\u5de5\u4f5c:</p> <ol> <li>\u91c7\u6837\u6570\u636e: \u4ece dataloader \u4e2d\u83b7\u53d6\u4e00\u4e2a batch \u7684\u6570\u636e\uff1b</li> <li>\u524d\u5411\u4f20\u64ad: (1) \u540c\u6b65\u5404\u8fdb\u7a0b\u72b6\u6001; (2) \u524d\u5411\u8ba1\u7b97; (3) \u53ef\u9009, \u5f53 DDP \u53c2\u6570find_unused_parameter=true \u65f6\uff0c\u5176\u4f1a\u5728 forward \u7ed3\u675f\u65f6\u542f\u52a8\u56de\u6eaf\uff0c\u6807\u8bb0\u51fa\u6240\u6709\u6ca1\u88ab\u7528\u5230\u7684parameter\uff0c\u63d0\u524d\u628a\u8fd9\u4e9b\u8bbe\u5b9a\u4e3a ready;</li> <li>\u53cd\u5411\u4f20\u64ad:<ol> <li>\u5404\u8fdb\u7a0b\u5404\u81ea\u53cd\u5411\u8ba1\u7b97\u68af\u5ea6, \u5f53\u67d0 parameter \u5b8c\u6210\u4e86\u68af\u5ea6\u8ba1\u7b97\u5219\u89e6\u53d1 grad hook, \u5728 reducer \u4e2d\u5c06\u8be5\u53c2\u6570\u6807\u8bb0\u4e3a ready;</li> <li>\u5f53\u67d0\u4e2a bucket \u7684\u6240\u6709 parameter \u90fd\u662f ready \u72b6\u6001\u65f6\uff0creducer \u4f1a\u5f00\u59cb\u5bf9\u8fd9\u4e2a bucket \u7684\u6240\u6709parameter \u90fd\u5f00\u59cb\u4e00\u4e2a\u5f02\u6b65\u7684 all-reduce \u68af\u5ea6\u5e73\u5747\u64cd\u4f5c;</li> <li>\u5f53\u6240\u6709bucket\u7684\u68af\u5ea6\u5e73\u5747\u90fd\u7ed3\u675f\u540e\uff0creducer\u624d\u4f1a\u628a\u5f97\u5230\u7684\u5e73\u5747grad\u7ed3\u679c\u6b63\u5f0f\u5199\u5165\u5230parameter.grad\u91cc\u9762\u3002</li> </ol> </li> <li>\u4f18\u5316\u5668\u6b65\u9aa4: \u4ece\u4f18\u5316\u5668\u7684\u89d2\u5ea6\u8bb2, \u4f18\u5316\u7684\u662f\u5c40\u90e8\u6a21\u578b\uff0c\u8ddf DDP \u6ca1\u6709\u5173\u7cfb\u3002</li> </ol> <p>DDP \u662f\u5982\u4f55\u4fdd\u8bc1\u5404\u8fdb\u7a0b\u95f4\u7684\u53c2\u6570\u4e00\u81f4\u6027\u7684\uff1f (1) \u53c2\u6570\u521d\u59cb\u503c\u76f8\u540c; (2) \u53c2\u6570\u66f4\u65b0\u503c\u76f8\u540c: \u66f4\u65b0\u503c\u76f8\u540c\u53c8\u662f\u7531\u4ee5\u4e0b\u56e0\u7d20\u4fdd\u8bc1\u7684: optimizer\u521d\u59cb\u72b6\u6001\u76f8\u540c, \u6bcf\u6b21opimizer.step()\u65f6\u7684\u68af\u5ea6\u76f8\u540c\u3002</p>"}, {"location": "foundation/distributed/#_7", "title": "\u7ec6\u8282", "text": ""}, {"location": "foundation/distributed/#_8", "title": "\u4fdd\u5b58\u6a21\u578b\u53c2\u6570", "text": "<ul> <li>\u4fdd\u5b58\u7684\u662f model.module, \u4e0d\u662f model;</li> <li>\u53ea\u7528\u4fdd\u5b58\u8fdb\u7a0b 0 \u4e0a\u7684\u6a21\u578b, b\u907f\u514d\u591a\u6b21\u91cd\u590d\u4fdd\u5b58;</li> </ul> <pre><code>if dist.get_rank() == 0:\n    torch.save(model.module, \"saved_model.ckpt\")\n</code></pre>"}, {"location": "foundation/distributed/#_9", "title": "\u6a21\u578b\u5e76\u884c", "text": "<p>\u53c2\u8003: \u5f20\u91cf\u6a21\u578b\u5e76\u884c\u8be6\u89e3|\u6df1\u5ea6\u5b66\u4e60\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e13\u9898</p> <p>\u5f20\u91cf\u6a21\u578b\u5e76\u884c\u9700\u8981\u89e3\u51b3\u4e24\u4e2a\u95ee\u9898: - \u5207\u5206\u65b9\u5f0f: \u5982\u4f55\u5207\u5206\u5230\u4e0d\u540c\u8bbe\u5907; - \u6570\u5b66\u7b49\u4ef7: \u5982\u4f55\u4fdd\u8bc1\u6570\u636e\u4e00\u81f4\u6027.</p>"}, {"location": "foundation/distributed/#_10", "title": "\u4ea4\u53c9\u71b5\u635f\u5931\u5206\u5e03\u5f0f\u8ba1\u7b97", "text": "<p>\u5206\u7c7b\u7f51\u7edc\u6700\u540e\u4e00\u5c42\u901a\u5e38\u91c7\u7528 softmax \u548c cross entropy \u8ba1\u7b97\u635f\u5931\u3002\u5904\u7406\u8be5\u7c7b\u95ee\u9898\u91c7\u7528 \u6309\u7c7b\u522b\u6570\u7ef4\u5ea6 \u5207\u5206, \u901a\u8fc7\u4e2d\u95f4\u7ed3\u679c\u901a\u4fe1, \u5f97\u5230\u6700\u7ec8\u7684\u5168\u5c40\u4ea4\u53c9\u71b5\u635f\u5931\u3002</p>"}, {"location": "foundation/distributed/#softmax", "title": "\u8ba1\u7b97 softmax", "text": "\\[ x_{max} = \\max_{N} \\left(\\max_k(x_k)\\right) \\] \\[ softmax(x_i) = \\frac{e^{x_i}}{\\sum_j(e^{x_j})} =\\frac{e^{x_i - x_{max}}}{\\sum_j(e^{x_j - x_{max}})} =\\frac{e^{x_i} - x_{max}}{\\sum_N\\sum_k(e^{x_k - x_{max}})} \\] <p>\u5176\u4e2d \\(N\\) \u8868\u793a\u5f20\u91cf\u6a21\u578b\u5e76\u884c\u7684\u8bbe\u5907\u53f7.</p>"}, {"location": "foundation/distributed/#loss", "title": "Loss \u8ba1\u7b97", "text": "<p>\u6c42\u5f97 softmax \u540e, \u5bf9 target \u6309\u5bf9\u5e94\u7684\u7c7b\u522b\u5207\u5206, \u6bcf\u4e2a\u8bbe\u5907\u5f97\u5230\u90e8\u5206 loss, \u6700\u540e\u4e00\u6b21\u901a\u4fe1\u5f97\u5230\u5168\u90e8 loss, \u6574\u4e2a\u8fc7\u7a0b\u9700\u8981\u4e09\u6b21\u5c0f\u91cf\u901a\u4fe1\u3002</p> <p></p> <p>\u94fe\u63a5</p> <ul> <li>DISTRIBUTED DATA PARALLEL</li> <li>DDP\u7cfb\u5217\u7b2c\u4e00\u7bc7\uff1a\u5165\u95e8\u6559\u7a0b</li> <li>DDP\u7cfb\u5217\u7b2c\u4e8c\u7bc7\uff1a\u5b9e\u73b0\u539f\u7406\u4e0e\u6e90\u4ee3\u7801\u89e3\u6790</li> <li>DDP\u7cfb\u5217\u7b2c\u4e09\u7bc7\uff1a\u5b9e\u6218\u4e0e\u6280\u5de7</li> <li>Pytorch\u5206\u5e03\u5f0f\u8bad\u7ec3\u539f\u7406\u548c\u5b9e\u6218 -\u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565</li> </ul>"}, {"location": "foundation/language/", "title": "Language", "text": ""}, {"location": "foundation/language/#c", "title": "C", "text": "<p>memcpy</p>"}, {"location": "foundation/language/#c_1", "title": "C++", "text": "<p>\u667a\u80fd\u6307\u9488</p>"}, {"location": "foundation/language/#_1", "title": "\u534f\u7a0b", "text": ""}, {"location": "foundation/networks/", "title": "\u7f51\u7edc\u67b6\u6784", "text": ""}, {"location": "foundation/networks/#layers", "title": "Layers", "text": ""}, {"location": "foundation/networks/#convlution-layer", "title": "Convlution Layer", "text": ""}, {"location": "foundation/networks/#fully-connected-layer", "title": "Fully Connected Layer", "text": ""}, {"location": "foundation/networks/#batch-norm", "title": "Batch Norm", "text": "<p>!!! \u5177\u4f53\u662f\u600e\u4e48\u64cd\u4f5c\u7684\uff1f\u8981\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\uff1f</p>"}, {"location": "foundation/networks/#softmax-layer", "title": "Softmax Layer", "text": ""}, {"location": "foundation/networks/#softmax", "title": "softmax \u51fd\u6570", "text": "<p>\u8bb0 softmax \u5c42\u7684\u8f93\u5165\u4e3a \\(\\textbf{x} = [x_1, x_2, \\cdots, x_n]\\), \u8f93\u51fa\u4e3a \\(\\textbf{y} = [y_1, y_2, \\cdots, y_n]\\), \u6839\u636e\u516c\u5f0f\u6709</p> \\[ y_i = \\frac{e^{x_i}}{\\sum\\limits_{j=1}^{n} e^{x_j}} \\]"}, {"location": "foundation/networks/#softmax_1", "title": "softmax \u51fd\u6570\u6c42\u5bfc", "text": "\\[ \\begin{aligned} \\frac{\\partial y_i}{\\partial x_j} = \\frac{\\partial}{\\partial x_j} \\left(\\frac{e^{x_i}}{\\sum_k e^{x_k}} \\right)  = \\frac{(e^{x_i}){'} (\\sum_k e^{x_k}) - e^{x_i} (\\sum_k e^{x_k}) {'}}{(\\sum_k e^{x_k}) ^ 2} \\end{aligned} \\] <p>(1) \u5f53 \\(i=j\\) \u65f6,</p> \\[ \\begin{aligned} \\frac{\\partial y_i}{\\partial x_j} = \\frac{\\partial y_i}{\\partial x_i} &amp;= \\frac{e^{x_i} \\cdot (\\sum_k e^{x_k}) - e^{x_i} \\cdot e^{x_i} } {(\\sum_k e^{x_k}) ^ 2} \\\\ &amp;= \\frac{e^{x_i}}{\\sum_k e^{x_k}} - \\left(\\frac{e^{x_i}}{\\sum_k e^{x_k}} \\right)^2 \\\\ &amp;= y_i (1-y_i) \\end{aligned} \\] <p>(2) \u5f53 \\(i\\neq j\\) \u65f6,</p> \\[ \\frac{\\partial y_i}{\\partial x_j} = \\frac{0 \\cdot (\\sum_k e^{x_k}) - e^{x_i} \\cdot e^{x_j} } {(\\sum_k e^{x_k}) ^ 2} = - y_i \\cdot y_j \\] <p>\u7efc\u4e0a\uff0c\u6709</p> \\[ \\frac{\\partial y_i}{\\partial x_j} = \\left\\{     \\begin{array}{lr}         y_i - y_i \\cdot y_j, &amp;i = j \\\\         0 - y_i \\cdot y_j, &amp;i \\neq j     \\end{array} \\right. \\] <p>\u5bf9\u5e94\u7684\u77e9\u9635\u5f62\u5f0f\u4e3a</p> \\[ \\frac{\\partial \\bf{y}}{\\partial \\bf{x}} = diag(\\bf{y}) - \\bf{y}^T \\cdot \\bf{y} \\] <pre><code>class Softmax:\n    def forward(self, x):\n        self.out -= np.max(self.out)\n        self.out = np.exp(self.out)\n        self.out = self.out / np.sum(self.out)\n        return self.out\n\n    def backward(self, eta):\n        dout = np.diag(self.out) - np.outer(self.out, self.out)\n        return np.dot(dout, eta)\n</code></pre>"}, {"location": "foundation/networks/#cross-entropy-loss-with-softmax", "title": "Cross Entropy Loss with Softmax", "text": "<p>\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570</p> \\[ L=-\\sum_i y_i \\log (p_i) \\] <p>\u5176\u68af\u5ea6\u4e3a</p> \\[ \\begin{aligned} \\frac{\\partial L}{\\partial l_n} &amp;= - \\sum_i y_i \\frac{\\partial \\log(p_i)}{\\partial l_n} \\\\ &amp;= - \\sum_i y_i \\frac{\\partial \\log(p_i)}{\\partial p_i} \\cdot \\frac{\\partial p_i}{\\partial l_n} \\\\ &amp;= - \\sum_i \\frac{y_i}{p_i} \\cdot \\frac{\\partial p_i}{\\partial l_n} \\end{aligned} \\] <p>\u5176\u4e2d\uff0c\\(\\frac{\\partial p_i}{\\partial l_n}\\) \u5c31\u662f softmax \u51fd\u6570\u7684\u68af\u5ea6, \u5c06 \\(\\frac{\\partial p_i}{\\partial l_n} = p_n(1 - p_n) - p_i p_n\\) \u5e26\u5165\u6709</p> \\[ \\begin{aligned} \\frac{\\partial L}{\\partial l_n} &amp;= - \\sum_i \\frac{y_i}{p_i} \\cdot \\frac{\\partial p_i}{\\partial l_n} \\\\ &amp;= - \\sum_i \\frac{y_i}{p_i} \\cdot [\\underbrace{p_n(1 - p_n)}_{i=n} - \\underbrace{p_i p_n}_{i \\neq n} ] \\\\ &amp;\\overset{\u5206\u79bb i=n \u4e0e i \\neq n}{=} - \\sum_{i=n} \\frac{y_i}{p_i} \\cdot p_n(1 - p_n) + \\sum_{i\\neq n} \\frac{y_i}{p_i} \\cdot p_i p_n \\\\ &amp;= - y_n + y_n p_n + \\sum_{i\\neq n} y_i p_n \\\\ &amp;= -y_n + \\sum_i y_i p_n \\\\ &amp;= -y_n + 1*p_n \\\\ &amp;= p_n - y_n  \\end{aligned} \\]"}, {"location": "foundation/networks/#self-attention", "title": "Self-Attention", "text": ""}, {"location": "foundation/networks/#_1", "title": "\u7f51\u7edc\u67b6\u6784", "text": ""}, {"location": "foundation/networks/#resnet", "title": "ResNet", "text": "<ol> <li>\u4f18\u70b9\u662f\u4ec0\u4e48? \u4e3a\u4ec0\u4e48\u6709\u6548?</li> </ol>"}, {"location": "machine_learning/abnormal/", "title": "\u5f02\u5e38\u68c0\u6d4b", "text": ""}, {"location": "machine_learning/abnormal/#simplenet", "title": "SimpleNet", "text": "<p>m</p>"}, {"location": "machine_learning/continual_learning/", "title": "\u6301\u7eed\u5b66\u4e60", "text": ""}, {"location": "machine_learning/continual_learning/#_1", "title": "\u57fa\u672c\u6982\u5ff5", "text": "<p>\u5b9a\u4e49: \u6301\u7eed\u5b66\u4e60 (Continual Learning) \u4e5f\u79f0\u589e\u91cf\u5b66\u4e60 (Incremental Learning) \u6216\u8005\u7ec8\u8eab\u5b66\u4e60 (Lifelong Learning), \u65e8\u5728\u6839\u636e\u5386\u53f2\u4efb\u52a1\u4e2d\u5b66\u5230\u7684\u7ecf\u9a8c\u548c\u77e5\u8bc6\u6765\u5e2e\u52a9\u5b66\u4e60\u4e0d\u65ad\u51fa\u73b0\u7684\u65b0\u4efb\u52a1\uff0c\u5e76\u4e14\u8fd9\u4e9b\u7ecf\u9a8c\u548c\u77e5\u8bc6\u662f\u6301\u7eed\u7d2f\u79ef\u7684\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u65b0\u7684\u4efb\u52a1\u800c\u5fd8\u8bb0\u65e7\u7684\u77e5\u8bc6\u3002\u5206\u522b\u5bf9\u5e94\u5b66\u4e60\u53ef\u5851\u6027 (learning plasticity) \u548c\u8bb0\u5fc6\u7a33\u5b9a\u6027 (memory stability)\u3002</p> <p>\u76ee\u7684: \u907f\u514d\u5728\u6574\u4e2a (\u65e7+\u65b0) \u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u91cd\u65b0\u8bad\u7ec3\uff0c\u540c\u65f6\u907f\u514d\u707e\u96be\u6027\u9057\u5fd8\u3002</p> <p>*\u707e\u96be\u6027\u9057\u5fd8*\u7684\u6570\u5b66\u89e3\u91ca: \u5f53\u6a21\u578b\u9002\u5e94\u4e86\u4e00\u4e2a\u65b0\u7684\u5206\u5e03\u4f1a\u5bfc\u81f4\u5bf9\u65e7\u5206\u5e03\u7684\u9002\u5e94\u80fd\u529b\u5927\u5927\u4e0b\u964d\u3002</p>"}, {"location": "machine_learning/continual_learning/#_2", "title": "\u9002\u7528\u573a\u666f", "text": "<ul> <li>\u8bad\u7ec3\u8d44\u6e90\u53d7\u9650: \u7531\u4e8e\u65f6\u95f4\u9650\u5236\u6216\u8005\u6d77\u91cf\u6570\u636e\uff0c\u65e0\u6cd5\u8bad\u7ec3\u6574\u4e2a\u6570\u636e\uff1b</li> <li>\u8bad\u7ec3\u6570\u636e\u53d7\u9650: \u65e0\u6cd5\u83b7\u53d6\u6216\u8005\u53ea\u80fd\u5c11\u91cf\u83b7\u53d6\u65e7\u6570\u636e\uff1b</li> </ul>"}, {"location": "machine_learning/continual_learning/#_3", "title": "\u8bc4\u4ef7\u6307\u6807", "text": "<ul> <li>\u589e\u91cf\u51c6\u786e\u7387\u66f2\u7ebf(incremental accuracy curve)</li> <li>\u9057\u5fd8\u7387\u66f2\u7ebf(incremental forgetting curve)</li> </ul>"}, {"location": "machine_learning/continual_learning/#_4", "title": "\u5e38\u7528\u65b9\u6cd5", "text": "<ul> <li>\u77e5\u8bc6\u84b8\u998f: \u53ef\u6539\u5584\u53ef\u6269\u5c55\u6027\u95ee\u9898;</li> <li>\u7ecf\u9a8c\u56de\u653e: \u5c06\u5148\u524d\u7684\u6570\u636e\u9002\u91cf\u7684\u52a0\u5165\u5f53\u524d\u7684\u589e\u91cf\u4efb\u52a1\u6765\u7f13\u89e3\u6a21\u578b\u7684\u201c\u5065\u5fd8\u201d\u7a0b\u5ea6;</li> <li>\u6b63\u5219\u5316: \u9650\u5236\u795e\u7ecf\u7f51\u7edc\u6743\u91cd\u5728\u5b66\u4e60\u4efb\u52a1\u91cd\u7a81\u7136\u6f02\u79fb;</li> </ul>"}, {"location": "machine_learning/continual_learning/#nvfnet-rdc", "title": "nVFNet-RDC", "text": "<p>\u6838\u5fc3\u6280\u672f: Non-local \u84b8\u998f, \u7ecf\u9a8c\u56de\u653e</p>"}, {"location": "machine_learning/continual_learning/#non-local", "title": "Non-local \u6a21\u5757", "text": "<ul> <li>\u66f4\u76f4\u63a5\u5730\u6355\u6349\u957f\u8ddd\u79bb\u4f9d\u8d56</li> <li>\u900f\u8fc7\u66f4\u5c11\u5c42\u6570\u53d6\u5f97\u6700\u4f73\u6210\u679c</li> <li>\u5bf9\u8f93\u5165\u5c3a\u5bf8\u8f83\u4e0d\u654f\u611f</li> <li>\u53ef\u8f7b\u6613\u5730\u4e0e\u5176\u4ed6\u79cd\u64cd\u4f5c\u8fdb\u884c\u6574\u5408</li> </ul>"}, {"location": "machine_learning/few_shot/", "title": "\u5c0f\u6837\u672c\u5b66\u4e60", "text": ""}, {"location": "machine_learning/few_shot/#_1", "title": "\u6570\u636e\u96c6", "text": ""}, {"location": "machine_learning/few_shot/#miniimagenet", "title": "miniImageNet", "text": "subset # cats # images train 64 38400 val 16 9600 test 20 12000 total 100 60000"}, {"location": "machine_learning/few_shot/#tieredimagenet", "title": "tieredImageNet", "text": "subset # cats # images train 351 448695 val 97 124261 test 160 206209 total 608 779165"}, {"location": "machine_learning/few_shot/#spatialformer", "title": "SpatialFormer", "text": "<p>metric-based few-shot learning method.</p>"}, {"location": "machine_learning/few_shot/#_2", "title": "\u52a8\u673a", "text": "<ul> <li>\u57fa\u4e8e CNN \u7684\u65b9\u6cd5\u5efa\u6a21\u5c40\u90e8\u7279\u5f81\u7684\u76f8\u5173\u6027, \u5176 attention map \u4e0d\u7cbe\u786e\uff1b</li> <li>support image \u548c query image \u7684\u80cc\u666f\u4e92\u76f8\u4f3c\u6027\u4f1a\u5e26\u6765\u5e72\u6270\u3002</li> </ul>"}, {"location": "machine_learning/few_shot/#_3", "title": "\u521b\u65b0\u70b9", "text": "<p>\u76ee\u7684: \u6316\u6398\u8f93\u5165 pairs \u95f4\u7684\u8bed\u4e49\u7ea7\u76f8\u4f3c\u6027, \u800c\u6392\u9664 Transformer \u56fa\u6709\u7684\u5b9e\u4f8b\u7ea7\u76f8\u4f3c\u6027\u3002\u6839\u672c\u76ee\u7684\u662f\u4f7f\u6a21\u578b\u5177\u6709\u66f4\u5f3a\u7684\u7279\u5f81\u9274\u522b\u80fd\u529b\u3002</p> <ul> <li>Semantic Attention (SFSA): \u5bfb\u627e support images \u4e0e query image \u4e92\u76f8\u4f3c\u7684\u76ee\u6807\uff1b</li> <li>Target Attention (SFTA): \u5c06\u7c7b\u522b\u6743\u91cd\u5206\u914d\u7ed9\u53c2\u7167\u76ee\u6807\uff0c\u7a81\u663e\u6f5c\u5728\u7684\u524d\u666f\u76ee\u6807\u533a\u57df\uff1b</li> <li>Novel-task Attention (NTA): \u5728 novel task \u4e2d\u5f15\u5165\u4efb\u52a1\u611f\u77e5\u7684\u7c7b\u522b\u4fe1\u606f\uff0c\u589e\u52a0\u7c7b\u95f4\u7279\u5f81\u8ddd\u79bb ( finetune \u4f7f\u7528)\u3002</li> </ul>"}, {"location": "machine_learning/few_shot/#_4", "title": "\u7ec6\u8282", "text": "<p>SpatialFormer Semantic Attention</p> \\[ \\begin{aligned} \\widetilde P^{k^{\\prime}} &amp;= \\text{SpatialFormer}(\\widetilde P ^k, \\widetilde{Q}) \\\\ \\widetilde Q^{k^{\\prime}} &amp;= \\text{SpatialFormer}(\\widetilde{Q}, \\widetilde P ^k) \\end{aligned} \\] <p>SpatialFormer Target Attention</p> \\[ \\begin{aligned} \\widetilde P^{k^{\\prime}} &amp;= \\text{SpatialFormer}(\\widetilde P ^k, W_G) \\\\ \\widetilde Q^{k^{\\prime}} &amp;= \\text{SpatialFormer}(\\widetilde Q, W_G) \\end{aligned} \\] <p>\u5b9e\u9a8c: ResNet12</p> 1-shot 5-shot minImageNet 69.8  (+2.5) 84.8 (+0.5) tieredImageNet 73.8  (+0.7) 86.8 (-0.5)"}, {"location": "machine_learning/few_shot/#_5", "title": "\u5e94\u7528", "text": "<p>!!! Important \u5de5\u4e1a AI \u8d28\u68c0\u4e2d\u5982\u4f55\u4f7f\u7528\uff1f</p> <ol> <li>\u9879\u76ee\u4e2d\u6ca1\u6709\u76f4\u63a5\u50cf\u8bba\u6587\u90a3\u6837\u91c7\u7528 Suppert \u548c Query \u96c6\u4e4b\u95f4\u7684\u5bf9\u6bd4\u5b66\u4e60, \u800c\u662f\u4f7f\u7528\u4e86*\u8bed\u4e49\u6ce8\u610f\u529b* (SFSA) \u548c*\u76ee\u6807\u6ce8\u610f\u529b* (SFTA) \u4e2d\u7684 \u76ee\u6807\u6ce8\u610f\u529b\u673a\u5236;</li> <li>\u4e0e\u8bba\u6587\u7684\u53e6\u4e00\u4e2a\u4e0d\u540c\u70b9, \u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\u9884\u6d4b\u7684\u5206\u7c7b\u6743\u91cd\u4f5c\u4e3a query \u4e0e\u7279\u5f81\u56fe\u8ba1\u7b97\u4ea4\u53c9\u6ce8\u610f\u529b, \u800c\u662f\u5c06 Query \u7279\u5f81\u4f5c\u4e3a\u53ef\u5b66\u4e60\u7684\u53c2\u6570 (\u7c7b\u4f3c\u4e8e DETR \u4e2d\u7684 Object Queries) \u4e0e\u7279\u5f81\u56fe\u8ba1\u7b97\u4ea4\u53c9\u6ce8\u610f\u529b, \u53ea\u662f\u8fd9\u4e2a query \u7684\u6570\u91cf\u662f\u7c7b\u522b\u6570\u3002</li> </ol> <p>\u6548\u679c: \u6bd4\u5982 5 \u4e2a\u9488\u773c\u7f3a\u9677\uff0c\u80fd\u591f\u5c06\u53ec\u56de\u7387\u4ece 3 \u4e2a\u63d0\u5347\u5230 4 \u4e2a\u3002</p>"}, {"location": "machine_learning/few_shot/#_6", "title": "\u6a21\u578b\u5927\u5c0f", "text": "<ul> <li>FLOPS (floating point operations per second): \u6bcf\u79d2\u6d6e\u70b9\u8fd0\u7b97\u6b21\u6570\uff0c\u7406\u89e3\u4e3a\u8ba1\u7b97\u901f\u5ea6\u3002\u662f\u4e00\u4e2a\u8861\u91cf\u786c\u4ef6\u6027\u80fd\u7684\u6307\u6807</li> <li>FLOPs (floating point operations): \u6d6e\u70b9\u8fd0\u7b97\u6570</li> </ul>"}, {"location": "machine_learning/few_shot/#_7", "title": "\u76f8\u5173\u95ee\u9898", "text": "<ul> <li>\u4e2a\u4eba\u5177\u4f53\u8d21\u732e</li> <li>\u53c2\u4e0e\u8bba\u6587\u8ba8\u8bba;</li> <li>\u4fee\u6539\u8bba\u6587;</li> <li> <p>\u5de5\u4e1a\u6027\u80fd\u9a8c\u8bc1\u3002</p> </li> <li> <p>\u5c40\u9650\u6027</p> </li> <li>\u5c0f\u6837\u672c\u65b9\u6848\u5b8c\u5168\u5e94\u7528\u5230\u5de5\u4e1a\u4e2d\u4efb\u91cd\u9053\u8fdc, \u4ece 40% \u63d0\u5347\u5230 70% \u5bf9\u4e8e\u5c0f\u6837\u672c\u5b66\u4e60\u662f\u5f88\u5927\u8fdb\u6b65, \u4f46\u662f\u5bf9\u4e8e\u5de5\u4e1a\u8d28\u68c0 0 \u6f0f\u68c0, \u4e2a\u4f4d\u6570\u7684\u8bef\u68c0\u8fd8\u6709\u5f88\u957f\u7684\u8def\u8981\u8d70;</li> <li>\u5c31\u7b97\u6cd5\u672c\u8eab\uff0cmetric-based \u65b9\u6cd5\u4f1a\u589e\u52a0\u7b97\u6cd5\u590d\u6742\u6027, \u901a\u5e38\u9700\u8981\u4e8c\u7ea7\u5206\u7c7b\u6b65\u9aa4, \u5728\u65b0\u9879\u76ee\u4e2d\u6709\u5f85\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u3002</li> </ul>"}, {"location": "machine_learning/few_shot/#_8", "title": "\u9644\u5f55: \u4ee3\u7801\u89e3\u6790", "text": ""}, {"location": "machine_learning/long_tailed/", "title": "\u957f\u5c3e\u5206\u5e03\u5b66\u4e60", "text": "<p>\u603b\u7ed3\u4e3b\u8981\u53c2\u8003\u81ea Deep Long-Tailed Learning: A Survey\u3002</p> <p></p>"}, {"location": "machine_learning/long_tailed/#_1", "title": "\u4e24\u5927\u6311\u6218", "text": "<ul> <li>\u5934\u90e8\u7c7b\u522b\u4e3b\u5bfc: \u6df1\u5ea6\u6a21\u578b\u7684\u9884\u6d4b\u504f\u5411\u5934\u90e8\u7c7b\u522b, \u800c\u5728\u5c3e\u90e8\u7c7b\u522b\u4e0a\u7684\u6027\u80fd\u5f88\u5dee\uff1b</li> <li>\u5c3e\u90e8\u6837\u672c\u532e\u4e4f: \u5c3e\u90e8\u7c7b\u522b\u6837\u672c\u91cf\u7684\u532e\u4e4f\u8fdb\u4e00\u6b65\u9000\u5316\u4e86\u6a21\u578b\u5728\u5c3e\u90e8\u7c7b\u522b\u4e0a\u7684\u6027\u80fd.</li> </ul>"}, {"location": "machine_learning/long_tailed/#_2", "title": "\u65b9\u6cd5", "text": ""}, {"location": "machine_learning/long_tailed/#_3", "title": "\u7c7b\u522b\u91cd\u5e73\u8861", "text": ""}, {"location": "machine_learning/long_tailed/#_4", "title": "\u6570\u636e\u91c7\u6837", "text": "<ul> <li>\u5b9e\u4f8b\u5e73\u8861\u91c7\u6837 (instance-balanced sampling): \u6bcf\u4e2a\u6837\u672c\u5177\u6709\u76f8\u7b49\u6982\u7387\u7684\u88ab\u91c7\u6837\u5230\uff1b</li> <li>\u7c7b\u522b\u5e73\u8861\u91c7\u6837 (class-balanced sampling): \u6bcf\u4e2a\u7c7b\u522b\u5177\u6709\u76f8\u540c\u7684\u91c7\u6837\u6982\u7387\uff1b</li> <li>\u5747\u65b9\u6839\u91c7\u6837 (square-root sampling): \u5b9e\u4f8b\u5e73\u8861\u91c7\u6837 \u53d8\u79cd, \u6bcf\u4e2a\u7c7b\u522b\u7684\u91c7\u6837\u6982\u7387\u4e0e\u8be5\u7c7b\u6837\u672c\u6570\u7684\u5747\u65b9\u6839\u76f8\u5173\uff1b</li> <li>\u6e10\u8fdb\u5f0f\u91c7\u6837 (progressively-balanced samping): \u5728\u5b9e\u4f8b\u5e73\u8861\u91c7\u6837\u548c\u7c7b\u522b\u5e73\u8861\u91c7\u6837\u95f4\u6e10\u8fdb\u5f0f\u8fc7\u6e21\u3002</li> </ul>"}, {"location": "machine_learning/long_tailed/#_5", "title": "\u7c7b\u522b\u611f\u77e5\u5b66\u4e60", "text": "<p>\u6838\u5fc3\u5c31\u662f\u6839\u636e\u8f93\u5165\u6807\u7b7e\u6216\u8005\u8f93\u51fa\u4fe1\u606f\u8c03\u6574\u4e0d\u540c\u7c7b\u522b Loss \u7684\u6743\u91cd\u3002</p> <p>Re-Weighting</p> <p>\u6839\u636e label frequencies, effecitive number, prediction hardness, output confidence \u7b49\u4fe1\u606f\u5bf9\u635f\u5931\u51fd\u6570\u8fdb\u884c\u52a0\u6743\u3002</p> <p>Re-Margining</p> <p>\u8c03\u6574\u5b66\u4e60\u7684\u7279\u5f81\u548c\u5206\u7c7b\u5668\u4e4b\u95f4\u7684\u6700\u5c0f\u8fb9\u9645\u3002</p> <p>\u4e00\u4e9b\u89c2\u70b9: (1) \u7c7b\u522b\u9884\u6d4b\u7684\u4e0d\u786e\u5b9a\u5ea6\u4e0e\u8bad\u7ec3\u6807\u7b7e\u7684\u9891\u7387\u6210\u53cd\u6bd4; (2) \u5c3e\u90e8\u7c7b\u522b\u65bd\u52a0\u5927\u7684 margin \u5bb9\u6613\u5bfc\u81f4\u5934\u90e8\u7c7b\u522b\u7279\u5f81\u5b66\u4e60\u9000\u5316\u3002</p>"}, {"location": "machine_learning/long_tailed/#logit-adjustment", "title": "Logit Adjustment", "text": "<p>\u6a21\u578b\u8bad\u7ec3\u597d\u4e4b\u540e\uff0c\u6839\u636e\u7c7b\u522b\u6807\u7b7e\u7684\u9891\u7387\u8c03\u6574\u6a21\u578b\u7684 logits. \u7406\u8bba\u4e0a, logit adjustment \u6700\u5c0f\u5316\u6bcf\u7c7b\u7684\u5e73\u5747\u8bef\u5dee\u65f6\u5177\u6709 <code>Fisher\u4e00\u81f4\u6027</code>\u3002</p> <p>\u4f18\u7f3a\u70b9</p> <ul> <li>\u4f18\u70b9: (1) \u76f8\u5bf9\u7b80\u5355, \u6613\u5e94\u7528; (2) \u6709\u4e00\u5b9a\u7406\u8bba\u4fdd\u8bc1; </li> <li>\u7f3a\u70b9: (1) \u727a\u7272\u5934\u90e8\u7c7b\u522b\u6027\u80fd; (2) \u65e0\u6cd5\u6539\u5584\u5c3e\u90e8\u7c7b\u522b\u6837\u672c\u4e0d\u8db3\u5bfc\u81f4\u4fe1\u606f\u7f3a\u5931\u7684\u95ee\u9898.</li> </ul>"}, {"location": "machine_learning/long_tailed/#_6", "title": "\u4fe1\u606f\u589e\u5f3a", "text": ""}, {"location": "machine_learning/long_tailed/#_7", "title": "\u8fc1\u79fb\u5b66\u4e60", "text": "<p>\u63d0\u5347\u5c3e\u90e8\u7c7b\u522b\u6027\u80fd\uff0c\u4e14\u4e0d\u727a\u7272\u5934\u90e8\u7c7b\u522b\u6027\u80fd.</p>"}, {"location": "machine_learning/long_tailed/#_8", "title": "\u6570\u636e\u589e\u5f3a", "text": "<p>\u5b9e\u7528\u6027\u5f3a, \u4f46\u9700\u8981\u4f7f\u7528\u7c7b\u522b\u76f8\u5173\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u3002</p>"}, {"location": "machine_learning/long_tailed/#_9", "title": "\u6a21\u5757\u6539\u8fdb", "text": ""}, {"location": "machine_learning/semi_supervised/", "title": "\u534a\u76d1\u7763\u5b66\u4e60", "text": ""}, {"location": "machine_learning/semi_supervised/#pu-learning", "title": "PU Learning", "text": "<p>PU Learning (Positive-Unlabeled Learning) \u662f\u4e00\u79cd\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\uff0c\u7528\u4e8e\u5904\u7406\u53ea\u6709 \u6b63\u6837\u672c \u548c **\u672a\u6807\u8bb0\u6837\u672c**\u7684\u60c5\u51b5\u3002\u5728\u8bb8\u591a\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6807\u8bb0\u8d1f\u6837\u672c\uff08\u5373\u4e0d\u5c5e\u4e8e\u76ee\u6807\u7c7b\u522b\u7684\u6837\u672c\uff09\u5f80\u5f80\u662f\u56f0\u96be\u6216\u6602\u8d35\u7684\uff0c\u800cPU\u5b66\u4e60\u5219\u63d0\u4f9b\u4e86\u4e00\u79cd\u6709\u6548\u7684\u65b9\u6cd5\u6765\u5229\u7528\u53ef\u7528\u7684\u6b63\u6837\u672c\u548c\u672a\u6807\u8bb0\u6837\u672c\u8fdb\u884c\u5206\u7c7b\u3002</p> <p>PU Learning \u662f\u534a\u76d1\u7763\u5b66\u4e60\u7684\u4e00\u79cd\u7279\u4f8b\u3002</p>"}, {"location": "machine_learning/semi_supervised/#_1", "title": "\u4e3b\u8981\u65b9\u6cd5", "text": "<p>PU Learning \u4e3b\u8981\u5305\u542b\u4e24\u79cd\u65b9\u6cd5\uff1a PU Bagging, Two-step Approach</p>"}, {"location": "machine_learning/semi_supervised/#pu-bagging", "title": "PU Bagging", "text": "<p>PU Bagging \u662f\u4e00\u79cd\u96c6\u6210\u65b9\u6cd5\uff0c\u5c06\u672a\u77e5\u6837\u672c\u8fdb\u884c\u968f\u673a\u5b50\u91c7\u6837\uff0c\u5e76\u521b\u5efa\u591a\u4e2a\u5f31\u5206\u7c7b\u5668\u96c6\u5408\u6765\u8f93\u51fa\u6bcf\u4e2a\u6837\u672c\u7684\u5206\u6570.</p>"}, {"location": "machine_learning/semi_supervised/#two-step-approach", "title": "Two-step Approach", "text": "<p>\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u6280\u672f\u5728\u8bad\u7ec3\u65f6\u91cd\u65b0\u6807\u8bb0\u6570\u636e\u3002</p> <p>\u7b2c\u4e00\u6b65: \u8bad\u7ec3\u4e00\u4e2a\u6b63\u6837\u672c\u548cunknown\u6837\u672c\u7684\u6807\u51c6\u5206\u7c7b\u5668, \u5f97\u5230\u4e00\u4e2a\u786e\u5b9a\u7684\u6b63\u6837\u672c\u7684\u5206\u6570\u8303\u56f4\u6765\u6807\u8bb0\u786e\u5b9a\u7684\u8d1f\u6837\u672c\u3002</p> <p>\u7b2c\u4e8c\u6b65: \u5728\u65b0\u6807\u8bb0\u7684\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u7b2c\u4e8c\u4e2a\u5206\u7c7b\u5668\uff0c\u53cd\u590d\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u6ee1\u8db3\u4e00\u4e2a\u65e2\u5b9a\u7684\u6807\u51c6\u3002</p>"}, {"location": "object_detection/", "title": "\u6982\u89c8", "text": "# \u76ee\u6807\u68c0\u6d4b  ## \u5206\u7c7b  ### \u5355\u9636\u6bb5  #### SSD \u7cfb\u5217  #### YOLO \u7cfb\u5217 ##### YOLOv1: 2015\u5e74 ##### YOLOv5: 2020\u5e74 ##### YOLOv8: 2023\u5e74 ##### YOLOv11: 2024\u5e74  #### DETR \u7cfb\u5217 ##### Deformable-DETR ##### Conditional-DETR ##### Dynamic-DETR ##### Sparse-DETR   ### \u4e24\u9636\u6bb5  #### RNN \u7cfb\u5217  ##### Faster RCNN ##### Mask RCNN ##### Cascade RCNN ##### HTC (Hybird Task Cascade)  ## \u6280\u672f\u6311\u6218  ###  #### \u591a\u5c3a\u5ea6\u8868\u793a #### \u4e0a\u4e0b\u6587\u4fe1\u606f ####"}, {"location": "object_detection/#_1", "title": "\u53c2\u8003\u6587\u732e", "text": "<ul> <li>Object Detection with Transformers: A Review</li> </ul>"}, {"location": "object_detection/basics/", "title": "\u57fa\u7840\u77e5\u8bc6", "text": ""}, {"location": "object_detection/basics/#roipooling-vs-roialign", "title": "ROIPooling v.s. ROIAlign", "text": "<p>ROI Pooling \u4e0e\u666e\u901a Pooling \u7684\u533a\u522b\uff1f ROI Align \u4e0e ROI Pooling \u7684\u5b9e\u73b0\u4e0a\u6709\u4ec0\u4e48\u533a\u522b\uff1f</p> <p>\u539f\u6587\u6765\u6e90: Part I Part II</p>"}, {"location": "object_detection/basics/#roi-pooling", "title": "ROI Pooling", "text": "<p>\u4e00\u53e5\u8bdd\u603b\u7ed3: \u4e24\u6b21\u91cf\u5316\u64cd\u4f5c\u5bfc\u81f4\u76ee\u6807\u4f4d\u7f6e\u504f\u79fb\u3002</p> <p> </p> \u56fe\u50cf\u5750\u6807\u6620\u5c04\u5230\u7279\u5f81\u56fe\u5750\u6807"}, {"location": "object_detection/basics/#_1", "title": "\u4e00\u6b21\u91cf\u5316", "text": "ROI \u91cf\u5316\u91cf\u5316\u635f\u5931 <p>\u5982\u4e0a\u56fe, ROI \u6620\u5c04\u540e\u7684\u7cbe\u786e\u5750\u6807\u5e94\u8be5\u662f\u7ea2\u6846\u6240\u793a\u7684\u6d6e\u70b9\u578b\u5750\u6807\u4f4d\u7f6e, \u4f46\u662f\u7ecf\u8fc7\u91cf\u5316\u540e\u53ea\u80fd\u5bf9\u9f50\u5230\u6574\u6570\u7f51\u683c\u4e0a, \u4e22\u5931\u4e86\u84dd\u8272\u533a\u57df\u4fe1\u606f, \u589e\u52a0\u4e86\u7eff\u8272\u533a\u57df\u4fe1\u606f, \u8fd9\u6837\u4f1a\u5bfc\u81f4\u504f\u5dee\u9519\u4f4d\u3002</p>"}, {"location": "object_detection/basics/#_2", "title": "\u4e8c\u6b21\u91cf\u5316", "text": "<p>\u7531\u4e8e ROI Pooling \u4e4b\u540e\u63a5\u5168\u8fde\u63a5\u5c42, \u56e0\u6b64\u9700\u8981\u5c06\u4e0d\u540c\u5c3a\u5bf8\u7684 ROI \u533a\u57df Pooling \u6210\u76f8\u540c\u5927\u5c0f, \u5982\u4e0b\u56fe\u91cf\u5316\u4f1a\u5bfc\u81f4\u6700\u4e0b\u65b9\u6574\u884c\u4fe1\u606f\u4e22\u5931\u3002</p> <p></p>"}, {"location": "object_detection/basics/#roi-align", "title": "ROI Align", "text": "<p>ROI Align \u4e0d\u518d\u4f7f\u7528\u91cf\u5316\u8fdb\u884c\u6570\u636e\u6c60\u5316, \u800c\u662f\u5c06\u539f\u59cb\u7684\u6d6e\u70b9\u5750\u6807\u5212\u5206\u6210\u6700\u7ec8\u7b49\u957f\u548c\u7b49\u5bbd\u7684\u683c\u5b50, \u7136\u540e\u5728\u6bcf\u4e2a\u683c\u5b50\u5185\u8fdb\u884c \u53cc\u7ebf\u6027\u63d2\u503c\u3002</p> <p>\u5047\u5982\u4f7f\u7528 \\(3 \\times 3\\) Pooling Layer, \u5219\u9700\u8981\u5c06\u76ee\u6807\u533a\u57df\u5206\u5272\u4e3a \\(1.51 \\times 2.08\\) \u5927\u5c0f\u7684\u683c\u5b50, \u5982\u56fe</p> <p></p> <ul> <li>\u6bcf\u4e00\u4e2a\u683c\u5b50\u90fd\u6a2a\u8de8 6 \u4e2a\u4e0d\u540c\u7684\u7f51\u683c\u5355\u5143, \u901a\u8fc7\u7b49\u95f4\u9694\u5c06\u8be5\u683c\u5b50\u5212\u5206\u6210 \\(3\\times3\\) \u533a\u57df, \u83b7\u53d6\u56db\u4e2a\u91c7\u6837\u70b9\u4f4d\u7f6e;</li> <li>\u91c7\u7528\u53cc\u7ebf\u6027\u63d2\u503c\u5206\u522b\u8ba1\u7b97\u683c\u5b50\u5185\u91c7\u6837\u70b9\u7684\u7279\u5f81\u503c;</li> <li>\u4f7f\u7528 Max Pooling \u6216\u8005 Avg Pooling \u6c60\u5316\u5bf9\u5e94\u7684\u683c\u5b50\u3002</li> </ul>"}, {"location": "object_detection/basics/#prroi-pooling", "title": "PrROI Pooling", "text": "<p>2018 ECCV Acquisition of Localization Confidence for Accurate Object Detection</p> <p>PrRoI Pooling (Precision ROI Pooling) \u89e3\u51b3\u4e86 RoI Align \u4e2d N \u7684\u53d6\u503c\u96be\u4ee5\u81ea\u9002\u5e94\u7684\u95ee\u9898\u3002\u5177\u4f53\u800c\u8a00\uff0c\u901a\u8fc7\u53cc\u7ebf\u6027\u63d2\u503c\u5c06\u79bb\u6563\u7279\u5f81\u56fe\u8f6c\u6362\u4e3a\u8fde\u7eed\uff0c\u7136\u540e\u5229\u7528\u4e8c\u91cd\u79ef\u5206\u8fdb\u884c\u6c60\u5316\uff0c\u63d0\u9ad8\u4e86\u76ee\u6807\u68c0\u6d4b\u7684\u5b9a\u4f4d\u7cbe\u5ea6\u3002\u76f8\u6bd4\u4e8eRoI Align\uff0cPrRoI Pooling\u6ca1\u6709\u5212\u5206\u5b50\u533a\u57df\uff0c\u800c\u662f\u76f4\u63a5\u8ba1\u7b97\u5e73\u5747\u503c\uff0c\u89e3\u51b3\u4e86N\u7684\u53d6\u503c\u9002\u5e94\u6027\u95ee\u9898\uff0c\u5e76\u4e14\u8be5\u6c60\u5316\u64cd\u4f5c\u53ef\u6c42\u504f\u5bfc\u6570\u3002</p> <p></p>"}, {"location": "object_detection/basics/#iou", "title": "IoU \u7cfb\u5217", "text": ""}, {"location": "object_detection/basics/#iou_1", "title": "IoU \u76f8\u5173\u8ba1\u7b97", "text": "\\[ \\begin{aligned} IoU &amp;= \\frac{|A \\cap B|}{ |A\\cup B| } \\\\ GIoU &amp;= IoU - \\frac{|A_c - U|}{|A_c|} \\\\ DIoU &amp;= \\frac{\\rho^2 (A, B)}{c^2} \\\\ CIoU &amp;= DIoU + \\alpha v \\end{aligned} \\]"}, {"location": "object_detection/basics/#iou-loss", "title": "IoU \u76f8\u5173 Loss \u5bf9\u6bd4", "text": "Loss \u4f18\u70b9 \u7f3a\u70b9 IoU \u5177\u6709\u5c3a\u5ea6\u4e0d\u53d8\u6027\uff0c\u6ee1\u8db3\u975e\u8d1f\u6027\u3001\u540c\u4e00\u6027\u3001\u5bf9\u79f0\u6027\u3001\u4e09\u89d2\u4e0d\u7b49\u6027\u7b49\u7279\u70b9 - \u5982\u679c\u4e24\u4e2a\u6846\u4e0d\u76f8\u4ea4\uff0c\u65e0\u6cd5\u53cd\u6620\u4e24\u4e2a\u6846\u8ddd\u79bb\u8fdc\u8fd1; - \u65e0\u6cd5\u7cbe\u786e\u7684\u53cd\u6620\u4e24\u4e2a\u6846\u7684\u91cd\u5408\u5ea6\u5927\u5c0f GIoU \u57fa\u4e8eIOU\u5f15\u5165\u6700\u5c0f\u5916\u63a5\u6846\u89e3\u51b3\u68c0\u6d4b\u6846\u548c\u771f\u5b9e\u6846\u65e0\u91cd\u53e0\u65f6loss=0\u7684\u95ee\u9898 1.\u5f53\u68c0\u6d4b\u6846\u548c\u771f\u5b9e\u6846\u51fa\u73b0\u5305\u542b\u73b0\u8c61\u7684\u65f6\u5019GIOU\u9000\u5316\u6210IOU; 2.\u4e24\u4e2a\u6846\u76f8\u4ea4\u65f6\uff0c\u5728\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u4e0a\u6536\u655b\u6162 DIoU \u8003\u8651\u4e86 GIOU \u7279\u70b9\uff0c\u76f4\u63a5\u56de\u5f52\u4e24\u4e2a\u6846\u4e2d\u5fc3\u70b9\u7684\u6b27\u5f0f\u8ddd\u79bb\uff0c\u52a0\u901f\u6536\u655b \u56de\u5f52\u8fc7\u7a0b\u4e2d\u672a\u8003\u8651 bbox \u7684\u957f\u5bbd\u6bd4\uff0c\u7cbe\u786e\u5ea6\u5f85\u63d0\u5347 CIoU DIOU \u57fa\u7840\u4e0a\u589e\u52a0\u4e86 bbox \u5c3a\u5ea6\u548c\u957f\u5bbd loss 1. \u957f\u5bbd\u6bd4\u63cf\u8ff0\u7684\u662f\u76f8\u5bf9\u503c\uff0c\u5177\u6709\u6a21\u7cca\u6027\uff1b 2. \u672a\u8003\u8651\u96be\u6613\u6837\u672c\u5e73\u8861\u95ee\u9898 EIoU CIOU\u57fa\u7840\u4e0a\u5206\u522b\u8ba1\u7b97\u5bbd\u9ad8\u7684\u5dee\u5f02\u503c\u53d6\u4ee3\u4e86\u957f\u5bbd\u6bd4\uff0c\u5f15\u5165Focal Loss\u89e3\u51b3\u96be\u6613\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898 <p><code>\u76f8\u5173\u4ee3\u7801\u7247\u6bb5\u6765\u6e90\u4e8e torchvision.</code></p> IOUGIOU <pre><code>def box_area(boxes: Tensor) -&gt; Tensor:\n    \"\"\"\n    Computes the area of a set of bounding boxes, which are specified by their\n    (x1, y1, x2, y2) coordinates.\n\n    Args:\n        boxes (Tensor[N, 4]): boxes for which the area will be computed. They\n            are expected to be in (x1, y1, x2, y2) format with\n            ``0 &lt;= x1 &lt; x2`` and ``0 &lt;= y1 &lt; y2``.\n\n    Returns:\n        Tensor[N]: the area for each box\n    \"\"\"\n    boxes = _upcast(boxes)\n    return (boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1])\n\ndef _box_inter_union(boxes1: Tensor, boxes2: Tensor) -&gt; Tuple[Tensor, Tensor]:\n    area1 = box_area(boxes1)\n    area2 = box_area(boxes2)\n\n    lt = torch.max(boxes1[:, None, :2], boxes2[:, :2])  # [N,M,2]\n    rb = torch.min(boxes1[:, None, 2:], boxes2[:, 2:])  # [N,M,2]\n\n    wh = _upcast(rb - lt).clamp(min=0)  # [N,M,2]\n    inter = wh[:, :, 0] * wh[:, :, 1]  # [N,M]\n\n    union = area1[:, None] + area2 - inter\n\n    return inter, union\n\ndef box_iou(boxes1: Tensor, boxes2: Tensor) -&gt; Tensor:\n    \"\"\"\n    Return intersection-over-union (Jaccard index) between two sets of boxes.\n\n    Both sets of boxes are expected to be in ``(x1, y1, x2, y2)`` format with\n    ``0 &lt;= x1 &lt; x2`` and ``0 &lt;= y1 &lt; y2``.\n\n    Args:\n        boxes1 (Tensor[N, 4]): first set of boxes\n        boxes2 (Tensor[M, 4]): second set of boxes\n\n    Returns:\n        Tensor[N, M]: the NxM matrix containing the pairwise IoU values for every element in boxes1 and boxes2\n    \"\"\"\n    inter, union = _box_inter_union(boxes1, boxes2)\n    iou = inter / union\n    return iou\n</code></pre> <pre><code>def generalized_box_iou(boxes1: Tensor, boxes2: Tensor) -&gt; Tensor:\n    \"\"\"\n    Return generalized intersection-over-union (Jaccard index) between two sets of boxes.\n\n    Both sets of boxes are expected to be in ``(x1, y1, x2, y2)`` format with\n    ``0 &lt;= x1 &lt; x2`` and ``0 &lt;= y1 &lt; y2``.\n\n    Args:\n        boxes1 (Tensor[N, 4]): first set of boxes\n        boxes2 (Tensor[M, 4]): second set of boxes\n\n    Returns:\n        Tensor[N, M]: the NxM matrix containing the pairwise generalized IoU values\n        for every element in boxes1 and boxes2\n    \"\"\"\n\n    # degenerate boxes gives inf / nan results\n    # so do an early check\n    assert (boxes1[:, 2:] &gt;= boxes1[:, :2]).all()\n    assert (boxes2[:, 2:] &gt;= boxes2[:, :2]).all()\n\n    inter, union = _box_inter_union(boxes1, boxes2)\n    iou = inter / union\n\n    lti = torch.min(boxes1[:, None, :2], boxes2[:, :2])\n    rbi = torch.max(boxes1[:, None, 2:], boxes2[:, 2:])\n\n    whi = _upcast(rbi - lti).clamp(min=0)  # [N,M,2]\n    areai = whi[:, :, 0] * whi[:, :, 1]\n\n    return iou - (areai - union) / areai\n</code></pre>"}, {"location": "object_detection/basics/#iou-based-loss", "title": "IoU-based Loss", "text": ""}, {"location": "object_detection/basics/#iou-loss_1", "title": "IoU Loss", "text": "<p>\u4f18\u70b9: \u5177\u6709\u5c3a\u5ea6\u4e0d\u53d8\u6027.</p> <p>\u7f3a\u70b9: (1) \u82e5\u4e24\u4e2a\u6846\u65e0\u4ea4\u96c6, \\(IoU = 0\\), \u6b64\u65f6 \\(loss = 0\\), \u65e0\u68af\u5ea6\u56de\u4f20, \u4e0d\u80fd\u8fdb\u884c\u5b66\u4e60; (2) IoU \u65e0\u6cd5\u51c6\u786e\u53cd\u5e94 GT \u4e0e\u9884\u6d4b\u6846\u7684\u91cd\u5408\u5ea6\u3002</p>"}, {"location": "object_detection/basics/#giou-loss", "title": "GIoU Loss", "text": "<p>\u52a8\u673a: \u5982\u56fe, \u76f8\u540c\u7684\u56de\u5f52\u635f\u5931 (L2 Loss) \u60c5\u51b5\u4e0b, IoU \u503c\u662f\u4e0d\u4e00\u6837\u7684\u3002</p> <p></p> L2 Loss \u4e0e\u5bf9\u5e94 IoU, GIoU \u7684\u53d8\u5316\u5173\u7cfb GIoU \u8ba1\u7b97\u793a\u610f <p></p> <p>\u5bf9\u4e8e\u4efb\u610f\u7684\u6846 A, B, \u9996\u5148\u627e\u5230\u80fd\u591f\u5305\u56f4\u4f4f\u4ed6\u4eec\u7684\u6700\u5c0f\u6846 C, \u7136\u540e\u8ba1\u7b97 \\(C \\(A \\cup B)\\) \u7684\u9762\u79ef\u4e0e C \u9762\u79ef\u7684\u6bd4\u503c\u3002</p> <p>\u6027\u8d28:</p> <ul> <li>GIoU \u662f IoU \u7684\u4e0b\u9650, \u5373 \\(\\text{GIoU}(A, B) \\leq \\text{IoU}(A, B)\\), \u4e14 \\(\\lim _{A\\rightarrow B} \\text{GIoU}(A, B) = \\text{IoU}(A, B)\\);</li> <li>\\(-1 \\leq \\text{GIoU}(A, B) \\leq 1\\), <ul> <li>\\(A\\), \\(B\\) \u5b8c\u5168\u91cd\u5408\u65f6, \\(\\text{GIoU}(A, B) = \\text{IoU}(A, B)=1\\);</li> <li>\\(\\frac{A \\cup B}{C} \\rightarrow 0\\), \\(\\text{GIoU} \\rightarrow -1\\).</li> </ul> </li> </ul>"}, {"location": "object_detection/basics/#nms", "title": "NMS \u7cfb\u5217", "text": "<p>NMS \u5bf9 IOU \u5927\u4e8e\u9608\u503c\u7684\u68c0\u6d4b\u6846\u8fdb\u884c\u5220\u9664, Soft-NMS \u5219\u662f\u964d\u6743\u539f\u6709\u68c0\u6d4b\u6846\u7684\u7f6e\u4fe1\u5ea6, \u5bf9\u4e8e\u6709\u91cd\u53e0\u7684\u6846\uff0c\u91cd\u53e0\u533a\u57df\u8d8a\u5927\u5219\u7f6e\u4fe1\u5ea6\u8870\u51cf\u8d8a\u4e25\u91cd\u3002</p> NMSSoftNMS <pre><code>\"\"\"https://github.com/rbgirshick/fast-rcnn/blob/master/lib/utils/nms.py\"\"\"\n\nimport numpy as np\n\ndef nms(dets, thresh):\n    x1 = dets[:, 0]\n    y1 = dets[:, 1]\n    x2 = dets[:, 2]\n    y2 = dets[:, 3]\n    scores = dets[:, 4]\n\n    areas = (x2 - x1 + 1) * (y2 - y1 + 1)\n    order = scores.argsort()[::-1]\n\n    keep = []\n    while order.size &gt; 0:\n        i = order[0]\n        keep.append(i)\n\n        # compute intersection between the highest score bbox with the rest bboxes\n        x1_max = np.maximum(x1[i], x1[order[1:]])\n        y1_max = np.maximum(y1[i], y1[order[1:]])\n        x2_min = np.minimum(x2[i], x2[order[1:]])\n        y2_min = np.minimum(y2[i], y2[order[1:]])\n        w = np.maximum(0.0, x2_min - x1_max + 1)\n        h = np.maximum(0.0, y2_min - y1_max + 1)\n        inter = w * h\n\n        # compute ious\n        overlap = inter / (areas[i] + areas[order[1:]] - inter)\n\n        inds = np.where(overlap &lt;= thresh)[0]\n        order = order[inds + 1]\n\n    return keep\n</code></pre> <pre><code>def soft_nms(dets, sigma=0.5, threshold1=0.7, threshold2=0.1, method=1):\n    n = dets.shape[0]\n\n    x1 = dets[:, 0]\n    y1 = dets[:, 1]\n    x2 = dets[:, 2]\n    y2 = dets[:, 3]\n    scores = dets[:, 4]\n    areas = (y2 - y1 + 1) * (x2 - x1 + 1)\n\n    new_scores = scores.copy()\n    index = [i for i in range(n)]\n    keep = []\n\n    while len(index) &gt; 0:\n        # get max box position of current based new scores\n        max_score = 0\n        max_pos = -1\n\n        for i in index:\n            if new_scores[i] &gt;= max_score:\n                max_pos = i\n                max_score = new_scores[i]\n\n        if max_pos == -1:\n            break\n\n        keep.append(max_pos)\n        index.remove(max_pos)\n\n        # calculate ious between current max box and others\n        x11 = np.maximum(x1[max_pos], x1[index])\n        y11 = np.maximum(y1[max_pos], y1[index])\n        x22 = np.minimum(x2[max_pos], x2[index])\n        y22 = np.minimum(y2[max_pos], y2[index])\n\n        w = np.maximum(0, x22 - x11 + 1)\n        h = np.maximum(0, y22 - y11 + 1)\n\n        overlaps = w * h\n        ious = overlaps / (areas[max_pos] + areas[index] - overlaps)\n\n        # adjust score of others\n        new_index = []\n        for i, ids in enumerate(index):\n            iou = ious[i]\n            weight = 1\n\n            if method == 1:\n                # linear\n                if iou &gt;= threshold1:\n                    weight = 1 - iou\n            elif method == 2:\n                # gaussian\n                weight = np.exp(-(iou * iou) / sigma)\n            else:\n                # normal nms\n                if iou &gt;= threshold1:\n                    weight = 0\n\n            new_scores[ids] = new_scores[ids] * weight\n\n            if new_scores[ids] &gt; threshold2:\n                new_index.append(ids)\n        index = new_index\n\n    return keep\n</code></pre>"}, {"location": "object_detection/detr_series/", "title": "DETR \u7cfb\u5217", "text": ""}, {"location": "object_detection/detr_series/#_1", "title": "\u6982\u5ff5", "text": ""}, {"location": "object_detection/detr_series/#object-query", "title": "Object Query", "text": "<ul> <li>DETR \u9996\u6b21\u63d0\u51fa\uff0c\u5728\u76ee\u6807\u68c0\u6d4b\u4e2d\u626e\u6f14 dynamic anchor \u7684\u89d2\u8272\uff0c\u5728\u5b9e\u73b0\u662f\u4e00\u4e2a\u53ef\u5b66\u4e60\u7684 Embedding  \\( Q_{obj} \\in \\mathbb{R} ^ {N_{ins} \\times d } \\).</li> <li>\u8bad\u7ec3\u9636\u6bb5\uff0c\u6bcf\u4e2a GT \u76ee\u6807\u90fd\u4f1a\u5206\u914d\u4e00\u4e2a\u5bf9\u5e94\u7684 query \u8fdb\u884c\u5b66\u4e60.</li> <li>\u63a8\u7406\u9636\u6bb5\uff0c\u6839\u636e\u6700\u9ad8\u7684\u5206\u6570\u9009\u62e9 queris \u4f5c\u4e3a\u8f93\u51fa.</li> </ul>"}, {"location": "object_detection/detr_series/#_2", "title": "\u8bba\u6587", "text": "\u53d1\u8868 \u7b97\u6cd5 \u521b\u65b0\u70b9 2020 ECCV DETR \u7aef\u5230\u7aef\uff0c\u96c6\u5408\u9884\u6d4b 2021 ICLR Deformable-DETR \u591a\u5c3a\u5ea6 deforable \u6ce8\u610f\u529b\u6a21\u5757 2021 CVPR UP-DETR \u81ea\u76d1\u7763\u9884\u8bad\u7ec3"}, {"location": "object_detection/detr_series/#detr", "title": "DETR", "text": "<p>DETR: End-to-End Object Detection with Transformers (ECCV2020)</p> <p>\u76ee\u7684\uff1a \u6446\u8131\u9884\u5904\u7406\u548c\u540e\u5904\u7406\u6b65\u9aa4\u7684\u9650\u5236\uff0c\u5c06\u7269\u4f53\u68c0\u6d4b\u89c6\u4f5c\u96c6\u5408\u9884\u6d4b\u95ee\u9898\uff08set prediction problem\uff09\u3002</p> <p>\u601d\u8def\uff1a\u5c06\u8bad\u7ec3\u6570\u636e\u8f93\u5165 CNN \u7f51\u7edc\u6784\u6210\u7684 backbone\uff0c\u5f97\u5230\u56fe\u50cf\u7684\u9ad8\u7ef4\u7279\u5f81 feature map\u3002\u8fd9\u4e9b\u7279\u5f81\u4f5c\u4e3a Transformer Encoder \u7684\u8f93\u5165\uff0c\u7ed3\u5408\u56fe\u50cf\u7684\u4f4d\u7f6e\u7f16\u7801\uff0c\u7ecf\u8fc7 Decoder \u540e\u5f97\u5230\u56fa\u5b9a\u6570\u76ee\uff08\u5927\u4e8e\u8be5\u6570\u636e\u96c6\u6700\u5927\u7269\u4f53\u6570\uff09query \u7684\u7279\u5f81\u4fe1\u606f\uff0c\u6700\u540e\u901a\u8fc7\u524d\u5411\u7f51\u7edc\u5c06 query \u6240\u5305\u542b\u7684\u4fe1\u606f\u6620\u5c04\u5230\u56fe\u7247\u4e2d\u7269\u4f53\u7684\u8fb9\u754c\u6846\u53ca\u6807\u7b7e\u3002</p> <p>\u7f3a\u70b9\uff1a  - \u8bad\u7ec3\u6536\u655b\u6162 - \u5c0f\u76ee\u6807\u6548\u679c\u5dee</p> <pre><code>set prediction problem: set \u8868\u793a\u9884\u6d4b\u503c\u4e0e\u76ee\u6807\u503c\u5206\u522b\u653e\u5728\u4e24\u4e2a\u65e0\u5e8f\u96c6\u4e2d\uff0c\u4e8c\u8005\u4e4b\u95f4\u901a\u8fc7\u5308\u7259\u5229\u7b97\u6cd5\u5339\u914d\uff0c\u4fdd\u8bc1\u4e86\u201c\u4ea4\u6362\u4e0d\u53d8\u6027\u201d\u3002\u8fd9\u79cd\u7279\u6027\u4f7f\u5f97\u5339\u914d\u7ed3\u679c\u4e0e\u5339\u914d\u7684\u5148\u540e\u987a\u5e8f\u65e0\u5173\uff0c\u6574\u4e2a\u7f51\u7edc\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97\uff0c\u5927\u5927\u63d0\u9ad8\u4e86\u8ba1\u7b97\u6548\u7387\u3002\n</code></pre>"}, {"location": "object_detection/detr_series/#dn-detr", "title": "DN-DETR", "text": "<p>DN-DETR: Accelerate DETR Training by Introducing Query DeNoising</p> <p>Tip</p> <ul> <li>\u6df1\u5ea6\u5206\u6790\u4e86 DETR \u6536\u655b\u6162\u7684\u539f\u56e0\uff1a\u5308\u7259\u5229\u7b97\u6cd5\u5339\u914d\u7684\u79bb\u6563\u6027\u548c\u6a21\u578b\u8bad\u7ec3\u7684\u968f\u673a\u6027\uff0c\u5bfc\u81f4ground-truth\u7684\u5339\u914d\u53d8\u6210\u4e86\u4e00\u4e2a\u52a8\u6001\u7684\u3001\u4e0d\u7a33\u5b9a\u7684\u8fc7\u7a0b\uff1b</li> <li>\u63d0\u51fa\u4e86 Denoising training \u89e3\u51b3 DETR decoder \u4e8c\u5206\u56fe\u5339\u914d\u4e0d\u7a33\u5b9a\u7684\u95ee\u9898\u3002</li> </ul> <p>\u4e3a\u4ec0\u4e48 DETR \u6536\u655b\u6162\uff1f</p> <ul> <li>decoder queries \u53ef\u88ab\u89e3\u8bfb\u4e3aanchor\u5750\u6807\uff0c\u5373 bbox \\((x, y, w, h)\\);</li> <li>decoder \u5b66\u4e60\u4e24\u4e2a\u4e1c\u897f\uff0c\u5206\u522b\u662f anchor \u4f4d\u7f6e \\((x, y, w, h)\\) \u548c anchor \u504f\u79fb \\((\\Delta x, \\Delta y, \\Delta w, \\Delta h)\\);</li> <li>decoder queries \u53ef\u4ee5\u770b\u6210\u662f anchor \u4f4d\u7f6e\u7684\u5b66\u4e60\uff0c\u800c\u4e0d\u7a33\u5b9a\u7684\u5339\u914d\u5bfc\u81f4\u4e0d\u7a33\u5b9a\u7684 anchor, \u5bfc\u81f4 anchor \u7684\u504f\u79fb\u5b66\u4e60\u53d8\u5f97\u56f0\u96be\u3002</li> </ul> <p>\u7b56\u7565: \u4f7f\u7528\u4e00\u4e2adenoising task\u4f5c\u4e3a\u4e00\u4e2ashortcut\u6765\u5b66\u4e60\u76f8\u5bf9\u504f\u79fb\uff0c\u8df3\u8fc7\u4e86\u5339\u914d\u8fc7\u7a0b\u76f4\u63a5\u8fdb\u884c\u5b66\u4e60\u3002\u5982\u679c\u628aquery\u770b\u4f5c\u56db\u7ef4\u5750\u6807 \\((x, y, w, h)\\)\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728\u771f\u5b9e\u6846\u9644\u8fd1\u6dfb\u52a0\u4e00\u4e2a\u5fae\u5c0f\u7684\u6270\u52a8\u4f5c\u4e3a\u566a\u58f0\uff0c\u8fd9\u6837\u6211\u4eec\u7684denoising task\u5c31\u6709\u4e86\u4e00\u4e2a\u6e05\u6670\u7684\u76ee\u6807\u2014\u2014\u76f4\u63a5\u91cd\u5efa\u771f\u5b9e\u6846\u800c\u4e0d\u9700\u8981\u5308\u7259\u5229\u5339\u914d\u3002</p>"}, {"location": "object_detection/detr_series/#dino", "title": "DINO", "text": "<p>DINO: DETR with Improved DeNoising Anchor Boxes for End-to-End Object Detection</p> <p></p> <p>\u6ce8\u610f: \u672c\u7bc7 DINO \u9700\u8981\u4e0e Meta \u81ea\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5 DINO \u548c DINOv2 \u533a\u522b\u3002 DINO \u662f\u57fa\u4e8e DAB-DETR \u548c DN-DETR \u7684\u8fdb\u4e00\u6b65\u6539\u8fdb\u3002</p>"}, {"location": "object_detection/detr_series/#_3", "title": "\u7279\u6027", "text": "<ul> <li>\u9ad8\u6027\u80fd\uff1a\u4ee5\u76f8\u5bf9\u8f83\u5c0f\u7684\u6570\u636e\u548c\u6a21\u578b\uff08\u7ea6 SwinV2\u76841/10\uff09\u53d6\u5f97\u4e86\u66f4\u597d\u7684\u68c0\u6d4b\u7ed3\u679c; ResNet-50\u6807\u51c6\u8bbe\u7f6e\u4e0b\u53d6\u5f97\u4e8651.3 AP\u3002</li> <li>\u7aef\u5230\u7aef: \u907f\u514d\u4e86\u4f20\u7edf\u68c0\u6d4b\u5668\u8bb8\u591a\u9700\u8981\u624b\u5de5\u8bbe\u8ba1\u7684\u6a21\u5757 (\u5982NMS);</li> <li>\u6536\u655b\u5feb: ResNet-50 \u6807\u51c6\u8bbe\u7f6e\u4e0b\uff0c\u4f7f\u7528 5 \u4e2a\u5c3a\u5ea6\u7279\u5f81\uff085-scale\uff09\u7684 DINO \u8fbe\u5230 49.4 AP(12epoch)\uff0c51.3 AP (24epoch)\u3002</li> </ul>"}, {"location": "object_detection/detr_series/#_4", "title": "\u521b\u65b0\u70b9", "text": "<ul> <li>Contrastive denoising: DN-detr \u53ea\u4f7f\u7528\u4e86\u6b63\u6837\u672c\u8fdb\u884c\u5b66\u4e60\uff0c\u6a21\u578b\u8fd8\u9700\u8981\u5b66\u4e60\u5982\u4f55\u533a\u5206\u8d1f\u6837\u672c, \u4e00\u662f\u771f\u5b9e\u6846\u52a0\u8f83\u5927\u566a\u58f0\u65f6\u5219\u8ba4\u4e3a\u662f\u8d1f\u6837\u672c\uff1b\u4e8c\u662f\u589e\u52a0\u771f\u5b9e\u6846\u9644\u8fd1\u7684\u6837\u672c\uff1b</li> <li>Mix query selection: \u5927\u90e8\u5206DETR\u6a21\u578b\u7684 query \u662f\u4ece\u6570\u636e\u96c6\u4e2d\u5b66\uff0c\u4e0e\u56fe\u7247\u8f93\u5165\u4e0d\u76f8\u5e72\u3002</li> </ul>"}, {"location": "object_detection/detr_series/#co-detr", "title": "Co-DETR", "text": "<p>DETRs with Collaborative Hybrid Assignments Training (ICCV2023)</p>"}, {"location": "object_detection/detr_series/#_5", "title": "\u52a8\u673a", "text": "<p>\u57fa\u4e8eDETR\uff08DEtection TRansformer\uff09\u7684\u76ee\u6807\u68c0\u6d4b\u5668\u5728\u4f7f\u7528\u4e00\u5bf9\u4e00\u96c6\u5408\u5339\u914d\u65f6\uff0c\u4ec5\u6709\u5c11\u91cf\u67e5\u8be2\u88ab\u6307\u5b9a\u4e3a\u6b63\u6837\u672c\u3002\u8fd9\u5bfc\u81f4\u4e86\u5bf9\u7f16\u7801\u5668\u8f93\u51fa\u7684\u7a00\u758f\u76d1\u7763\uff0c\u524a\u5f31\u4e86\u7f16\u7801\u5668\u7684\u5224\u522b\u7279\u5f81\u5b66\u4e60\u80fd\u529b\uff0c\u540c\u65f6\u4e5f\u9650\u5236\u4e86\u89e3\u7801\u5668\u7684\u6ce8\u610f\u529b\u5b66\u4e60\u8868\u73b0\u3002\u8fd9\u79cd\u7f3a\u9677\u4f7f\u5f97DETR\u5728\u8bad\u7ec3\u6548\u7387\u548c\u6548\u679c\u4e0a\u90fd\u900a\u8272\u4e8e\u4f20\u7edf\u7684\u4e00\u5bf9\u591a\u6807\u7b7e\u5206\u914d\u65b9\u6cd5\u3002</p>"}, {"location": "object_detection/detr_series/#_6", "title": "\u521b\u65b0\u70b9", "text": "<ul> <li>\u534f\u540c\u6df7\u5408\u5206\u914d\u8bad\u7ec3\u6846\u67b6\uff1a\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u534f\u4f5c\u6df7\u5408\u5206\u914d\u8bad\u7ec3\u65b9\u6cd5\uff08Co-DETR\uff09\uff0c\u901a\u8fc7\u7ed3\u5408\u4e00\u5bf9\u591a\u6807\u7b7e\u5206\u914d\u7b56\u7565\uff08\u5982ATSS\u548cFaster R-CNN\uff09\u589e\u5f3a\u7f16\u7801\u5668\u7684\u7279\u5f81\u5b66\u4e60\u80fd\u529b\u3002</li> <li>\u81ea\u5b9a\u4e49\u6b63\u6837\u672c\u67e5\u8be2\u751f\u6210\uff1a\u901a\u8fc7\u8f85\u52a9\u5206\u652f\u751f\u6210\u989d\u5916\u7684\u6b63\u6837\u672c\u67e5\u8be2\uff0c\u5e76\u5c06\u5176\u9001\u5165\u89e3\u7801\u5668\u8fdb\u884c\u8bad\u7ec3\uff0c\u4ece\u800c\u63d0\u9ad8\u89e3\u7801\u5668\u7684\u6b63\u6837\u672c\u8bad\u7ec3\u6548\u7387\u3002</li> <li>\u65e0\u989d\u5916\u63a8\u7406\u5f00\u9500\uff1a\u867d\u7136\u8bad\u7ec3\u4e2d\u5f15\u5165\u4e86\u989d\u5916\u7684\u8f85\u52a9\u5934\uff0c\u4f46\u8fd9\u4e9b\u8f85\u52a9\u5934\u5728\u63a8\u7406\u9636\u6bb5\u88ab\u4e22\u5f03\uff0c\u56e0\u6b64\u65b9\u6cd5\u4e0d\u4f1a\u589e\u52a0\u6a21\u578b\u7684\u63a8\u7406\u53c2\u6570\u6216\u8ba1\u7b97\u6210\u672c\u3002</li> </ul>"}, {"location": "object_detection/detr_series/#d-fine", "title": "D-FINE", "text": "<p>D-FINE: REDEFINE REGRESSION TASK IN DETRS AS  FINE-GRAINED DISTRIBUTION REFINEMENT</p>"}, {"location": "object_detection/detr_series/#_7", "title": "\u9057\u7559\u95ee\u9898", "text": "<ul> <li>DETR \u4e3a\u4ec0\u4e48\u5bf9\u5c0f\u76ee\u6807\u6548\u679c\u4e0d\u597d\uff1f \u6709\u54ea\u4e9b\u6539\u8fdb\u65b9\u6cd5\uff1f</li> </ul>"}, {"location": "object_detection/incremental/", "title": "\u589e\u91cf\u68c0\u6d4b", "text": ""}, {"location": "object_detection/incremental/#cvpr2022-clvision", "title": "CVPR2022 CLVision \u7ade\u8d5b", "text": ""}, {"location": "object_detection/incremental/#_1", "title": "\u6570\u636e\u96c6", "text": "<p>EgoObjects: \u4ee5\u81ea\u6211\u4e3a\u4e2d\u5fc3\u62cd\u6444\u7684\u89c6\u9891\u6570\u636e\u96c6\uff0c\u7531 Meta \u63d0\u4f9b\u3002</p> <p>\u6570\u636e\u7279\u70b9</p> <ul> <li>\u91c7\u96c6\u8bbe\u5907: Rayban Stories\u3001 Snap Spectacles, and Mobile (\u667a\u6167/AR \u773c\u775b\u3001\u79fb\u52a8\u8bbe\u5907);</li> <li>\u573a\u666f: 25+ \u56fd\u5bb6\u548c\u5730\u533a\u7684\u5bb6\u5ead/\u529e\u516c\u5ba4\u5185\u573a\u666f;</li> <li>\u89c6\u9891\u5177\u6709\u5404\u79cd\u5149\u7167\u53d8\u5316\u3001\u5c3a\u5ea6\u53d8\u5316\u3001\u76f8\u673a\u8fd0\u52a8\u548c\u590d\u6742\u80cc\u666f;</li> <li>\u89c6\u9891\u5e27\u6807\u6ce8\u5305\u542b: \u76ee\u6807\u7c7b\u522b\u3001\u76ee\u6807\u5b9e\u4f8b\u7684 1D \u548c 2D \u7684\u8fb9\u6846;</li> <li>\u6bcf\u4e2a\u89c6\u9891\u53ea\u6709\u4e00\u4e2a\u4e3b\u76ee\u6807\uff0c\u540c\u4e00\u89c6\u9891\u7684\u5176\u4ed6\u76ee\u6807\u4e5f\u8fdb\u884c\u4e86\u6807\u6ce8;</li> <li>\u6807\u6ce8\u683c\u5f0f\u7c7b\u4f3c LVIS \u548c COCO;</li> <li>\u573a\u666f\u590d\u6742\u5ea6 (\u5982\u906e\u6321\u3001\u76ee\u6807\u4e2a\u6570) \u6bd4 COCO \u7b80\u5355\uff0c\u4f46\u56fe\u50cf\u7684\u8d28\u91cf\u53d8\u5316\u66f4\u52a0\u591a\u6837\u3002 </li> </ul> <p>\u8bad\u7ec3\u4e0e\u9884\u6d4b</p> <ul> <li>\u8bad\u7ec3\u96c6 70K, \u6d4b\u8bd5\u96c6 10K, 1110 \u573a\u666f</li> </ul> Track Exp. Scenario Total Categories Categories per Exp. Categories Overlap Track2 5 Class-Incremental 277 \u2248150 Yes Track3 5 Class-Incremental 1110 \u2248222 No"}, {"location": "object_detection/incremental/#_2", "title": "\u89c4\u5219", "text": "<ul> <li>\u6a21\u578b\u53c2\u6570\u91cf &lt; 70M;</li> <li>\u53ef\u4f7f\u7528 ImageNet1K, COCO2017, LVIS \u7684\u9884\u8bad\u7ec3\u6a21\u578b, \u4e0d\u80fd\u4f7f\u7528\u5176\u4ed6\u6570\u636e;</li> <li>\u53ef\u4f7f\u7528\u5305\u542b 5000 \u8bad\u7ec3\u6837\u672c\u7684\u56de\u653e buffer, buffer \u9700\u521d\u59cb\u5316\u4e3a\u7a7a, \u4e14\u4e0d\u80fd\u4f7f\u7528\u672a\u6765\u5b9e\u9a8c\u6570\u636e;</li> <li>\u4e0d\u5141\u8bb8\u6d4b\u8bd5\u65f6\u8bad\u7ec3\u6216\u8005\u8c03\u6574\uff1b</li> <li>\u6d4b\u8bd5\u65f6\u4e0d\u53ef\u4ee5\u4f7f\u7528\u89c6\u9891\u7684 ID \u4fe1\u606f\uff1b</li> <li>\uff08\u8bad\u7ec3 + \u6d4b\u8bd5\uff09\u65f6\u95f4 &lt; 24 \u5c0f\u65f6\uff1b</li> <li>\u89e3\u51b3\u65b9\u6848\u63d0\u4ea4\u7684 zip \u5305\u542b 5 \u4e2a\u6587\u4ef6</li> <li>\u8bc4\u4ef7\u6307\u6807: Average mAP</li> </ul>"}, {"location": "object_detection/incremental/#_3", "title": "\u65b9\u6cd5", "text": "<p>\u4e00\u53e5\u8bdd\u63cf\u8ff0: </p>"}, {"location": "object_detection/incremental/#non-local-distillation", "title": "\u975e\u5c40\u90e8\u84b8\u998f (Non-local Distillation)", "text": "<ul> <li>Teacher model: \u4ee5\u524d\u4efb\u52a1\u8bad\u7ec3\u7684\u6a21\u578b\u4f5c\u4e3a Teacher model, \u5305\u542b Res2net\uff0cFPN \u548c detector head;</li> <li>Student model: \u4e0e Teacher model \u5177\u6709\u76f8\u540c\u7ed3\u6784, \u4f46\u53ea\u80fd\u5728\u5f53\u524d\u4efb\u52a1\u4e2d\u8bad\u7ec3\uff1b</li> </ul>"}, {"location": "object_detection/incremental/#replay", "title": "\u56de\u653e (Replay)", "text": "<p>\u5f53\u524d\u4efb\u52a1\u4f1a\u4ece\u524d\u5e8f\u4efb\u52a1\u4e2d\u968f\u673a\u91c7\u6837\u76f8\u540c\u6570\u91cf\u7684\u6837\u672c (Replay \u603b\u6570 = 5000) \u52a0\u5165\u5f53\u524d\u4efb\u52a1\u3002</p>"}, {"location": "object_detection/incremental/#nvfnet", "title": "nVFNet", "text": "<p>\u4fee\u6539 VFNet \u4e2d Dense Classifier \u4e3a Non-local Dense Classifer, \u5177\u4f53\u8bb2\u5c31\u662f\u5728\u7a20\u5bc6\u5206\u7c7b\u5668\u4e4b\u524d\u63d2\u5165\u4e86\u4e00\u4e2a\u975e\u5c40\u90e8\u6a21\u5757\u3002</p>"}, {"location": "object_detection/incremental/#_4", "title": "\u5b9e\u9a8c\u7ed3\u679c", "text": "Replay Distillation Track2 14% 2% Track3 7.5% 1.4%"}, {"location": "object_detection/incremental/#_5", "title": "\u7ec6\u8282", "text": "<p>!!! Important VFNet: </p>"}, {"location": "object_detection/incremental/#_6", "title": "\u76f8\u5173\u95ee\u9898", "text": "<ul> <li>\u4f60\u5177\u4f53\u8d21\u732e\u662f\u4ec0\u4e48\uff1f</li> </ul>"}, {"location": "object_detection/incremental/#ai", "title": "\u5de5\u4e1a AI \u5e94\u7528", "text": ""}, {"location": "object_detection/rcnn_series/", "title": "RCNN \u7cfb\u5217", "text": ""}, {"location": "object_detection/rcnn_series/#faster-rcnn", "title": "Faster RCNN", "text": ""}, {"location": "object_detection/rcnn_series/#rpn", "title": "RPN", "text": "<p>\u5f53\u56fe\u50cf\u4e2d\u6709 gt_boxes \u65f6, \u901a\u8fc7\u8ba1\u7b97 anchor \u4e0e gt_box \u7684 IoU \u786e\u5b9a\u8bad\u7ec3\u7684\u6b63\u8d1f\u6837\u672c:</p> <ul> <li>IoU &lt; 0.3, anchor \u4e3a background, \u6807\u7b7e\u4e3a 0\uff1b</li> <li>IoU &gt; 0.7, anchor \u4e3a foreground, \u6807\u67aa\u4e3a 1\uff1b</li> <li>0.3 &lt; IoU &lt; 0.7 \u7684 anchor \u5ffd\u7565\uff0c\u4e0d\u53c2\u4e0e\u8bad\u7ec3\u3002</li> </ul>"}, {"location": "object_detection/rcnn_series/#roiheads", "title": "ROIHeads", "text": "<ul> <li>IoU &gt; 0.5 \u4e3a foreground, \u6807\u7b7e\u4e3a\u5bf9\u5e94\u7684 class_id;</li> <li>IoU &lt; 0.5 \u4e3a background, \u6807\u7b7e\u4e3a 0.</li> </ul>"}, {"location": "object_detection/rcnn_series/#cascade-rcnn", "title": "Cascade RCNN", "text": ""}, {"location": "object_detection/small_target/", "title": "\u5c0f\u76ee\u6807\u68c0\u6d4b", "text": "<p>!!! \u6709\u54ea\u4e9b tricks?</p>"}, {"location": "object_detection/small_target/#_1", "title": "\u6311\u6218", "text": "<ul> <li>\u4fe1\u606f\u635f\u5931\uff1a\u4e3b\u5e72\u7f51\u7edc\u901a\u8fc7\u4e0b\u91c7\u6837\u964d\u4f4e\u566a\u58f0\u548c\u7279\u5f81\u7a7a\u95f4\u5197\u4f59\uff0c\u6b64\u8fc7\u7a0b\u5bfc\u81f4\u5927\u91cf\u4fe1\u606f\u635f\u5931\uff1b</li> <li>\u566a\u58f0\u7279\u5f81\u8868\u793a\uff1a\u5c0f\u7269\u4f53\u901a\u5e38\u5206\u8fa8\u7387\u4f4e\uff0c\u5916\u89c2\u8d28\u91cf\u5dee\uff0c\u5f88\u96be\u5b66\u4e60\u53ef\u533a\u5206\u6027\u7279\u5f81\uff1b\u540c\u65f6\u4e5f\u6613\u53d7\u5230\u5176\u4ed6\u80cc\u666f\u566a\u58f0\u5e72\u6270\uff1b\u5c0f\u76ee\u6807\u4e5f\u662f\u96be\u76ee\u6807\uff1b</li> <li>\u8fb9\u6846\u6ce2\u52a8\uff1a\u5c0f\u7269\u4f53\u5bf9\u9884\u6d4b\u8fb9\u6846\u504f\u5dee\u66f4\u654f\u611f\uff0c\u8f7b\u5fae\u504f\u5dee\u53ef\u80fd\u5bfc\u81f4 IoU \u5206\u6570\u663e\u8457\u4e0b\u964d\uff1b</li> <li>\u8bad\u7ec3\u6837\u672c\u4e0d\u8db3\uff1a\u5c0f\u7269\u4f53\u5360\u636e\u7684\u533a\u57df\u6709\u9650\uff0c\u901a\u5e38\u4e0e\u951a\u7bb1\u7684\u91cd\u53e0\u6781\u5c0f\uff0c\u56e0\u6b64\u5728\u8bad\u7ec3\u671f\u95f4\u5f88\u96be\u6536\u96c6\u8db3\u591f\u7684\u9633\u6027\u6837\u672c\u3002</li> </ul>"}, {"location": "object_detection/small_target/#_2", "title": "\u4f18\u5316\u7b56\u7565", "text": "<ul> <li>\u591a\u5c3a\u5ea6\u8bad\u7ec3\u548c\u6d4b\u8bd5\uff1a \u8f93\u5165\u4e0d\u540c\u7684\u5c3a\u5bf8\u8fdb\u884c\u8bad\u7ec3\u548c\u6d4b\u8bd5\uff1b</li> <li>\u4f18\u5316\u7279\u5f81\u63d0\u53d6\uff1a\u4fdd\u6301\u7a7a\u95f4\u5206\u8fa8\u7387\u7684\u65b9\u6cd5\u5982 FPN, PAN (Path Aggregation Network);</li> <li>\u6539\u8fdb\u6807\u7b7e\u5206\u914d\u7b56\u7565</li> <li>\u5f15\u5165\u6ce8\u610f\u529b\u673a\u5236</li> <li>\u6539\u8fdb\u8bc4\u4f30\u6307\u6807</li> <li>\u6570\u636e\u589e\u5f3a\uff1a Mosaic, Copy-Paste</li> <li>TTA: Tiling, SAHI (Slicing Aided Hyper Inference)</li> </ul>"}, {"location": "object_detection/small_target/#_3", "title": "\u53c2\u8003\u6587\u732e", "text": "<ul> <li>Towards Large-Scale Small Object Detection: Survey and Benchmarks</li> <li>Transformers in Small Object Detection: A Benchmark and Survey of State-of-the-Art</li> </ul>"}, {"location": "object_detection/yolo_series/", "title": "YOLO \u7cfb\u5217", "text": "\u7248\u672c\u53f7 \u5e74\u4efd \u4e3b\u8981\u8d21\u732e\u4e0e\u7279\u70b9 YOLOv1 2015 \u5b9e\u65f6\u7aef\u5230\u7aef\u7269\u4f53\u68c0\u6d4b\uff0c\u5c06\u68c0\u6d4b\u89c6\u4e3a\u56de\u5f52\u95ee\u9898\uff0c\u5355\u6b21\u7f51\u7edc\u8bc4\u4f30\u9884\u6d4b\u4f4d\u7f6e\u548c\u7c7b\u522b YOLOv2 2016 \u5f15\u5165\u6279\u91cf\u5f52\u4e00\u5316\uff0c\u9ad8\u5206\u8fa8\u7387\u5206\u7c7b\u5668\uff0c\u5168\u5377\u79ef\u7f51\u7edc\uff0c\u80fd\u68c0\u6d4b\u8d85\u8fc79000\u4e2a\u7c7b\u522b YOLOv3 2018 \u4f7f\u7528\u66f4\u6df1\u7684Darknet-53\u7f51\u7edc\uff0c\u5f15\u5165\u7279\u5f81\u91d1\u5b57\u5854\u7f51\u7edc\u63d0\u9ad8\u591a\u5c3a\u5ea6\u76ee\u6807\u68c0\u6d4b\u80fd\u529b YOLOv4 2020 \u7ed3\u5408CSPNet\u3001PANet\u3001SAM\u7b49\u6280\u672f\uff0c\u63d0\u9ad8\u7279\u5f81\u63d0\u53d6\u548c\u68c0\u6d4b\u6548\u7387 YOLOv5 2020 \u4f7f\u7528Pytorch\u6846\u67b6\uff0c\u4e0d\u540c\u5927\u5c0f\u6a21\u578b\u7248\u672c\u9002\u5e94\u4e0d\u540c\u73af\u5883\uff0c\u6613\u7528\u6027\u548c\u6027\u80fd\u663e\u8457\u6539\u8fdb YOLOv6 2021 \u591a\u79cd\u4e0d\u540c\u5c3a\u5bf8\u6a21\u578b\u9002\u5e94\u5de5\u4e1a\u5e94\u7528\uff0c\u7ee7\u7eed\u5728YOLO\u7cfb\u5217\u57fa\u7840\u4e0a\u6539\u8fdb YOLOv7 2022 \u67b6\u6784\u53d8\u5316\u548c\u4e00\u7cfb\u5217\u514d\u8d39\u5305\u63d0\u9ad8\u51c6\u786e\u7387\uff0c\u4fdd\u6301\u5b9e\u65f6\u6027 YOLOv8 2023 \u65b0\u529f\u80fd\u548c\u6539\u8fdb\uff0c\u5305\u62ec\u65b0\u7684\u9aa8\u5e72\u7f51\u7edc\u3001Anchor-Free\u68c0\u6d4b\u5934\u548c\u65b0\u635f\u5931\u51fd\u6570\uff0c\u63d0\u5347\u6027\u80fd\u548c\u7075\u6d3b\u6027 YOLOv9 2023 \u5f15\u5165\u53ef\u7f16\u7a0b\u68af\u5ea6\u4fe1\u606f\uff08PGI\uff09\u548c\u57fa\u4e8e\u68af\u5ea6\u8def\u5f84\u89c4\u5212\u7684\u901a\u7528\u9ad8\u6548\u5c42\u805a\u5408\u7f51\u7edc\uff08GELAN\uff09\u67b6\u6784 YOLOv10 2024 \u901a\u8fc7\u6d88\u9664\u975e\u6700\u5927\u6291\u5236\uff08NMS-Free\uff09\u548c\u4f18\u5316\u5404\u79cd\u6a21\u578b\u7ec4\u4ef6\uff0c\u5b9e\u73b0\u4e86\u6700\u5148\u8fdb\u7684\u6027\u80fd\u3002 YOLOv11 2024 \u91c7\u7528C3K2\u6a21\u5757\u66f4\u5229\u4e8e\u805a\u5408\u7279\u5f81\uff0c\u5728\u6ce8\u610f\u529b\u65b9\u9762\u4f7f\u7528C2PSA\u6a21\u5757\u7684\u591a\u5934\u6ce8\u610f\u529b\u673a\u5236\u63d0\u53d6\u5168\u5c40\u7279\u5f81"}, {"location": "object_detection/yolo_series/#yolov1", "title": "YOLOv1", "text": "<p>\u5c5e\u4e8e anchor-free \u7b97\u6cd5, \u6838\u5fc3\u662f\u5c06\u76ee\u6807\u68c0\u6d4b\u8f6c\u53d8\u4e3a \u56de\u5f52\u95ee\u9898\u3002</p> <ul> <li>\u8f93\u5165: \\(448 \\times 448 \\times 3\\);</li> <li>\u8f93\u51fa: \\(7 \\times 7 \\times 30\\).</li> </ul>"}, {"location": "object_detection/yolo_series/#_1", "title": "\u5177\u4f53\u5b9e\u73b0", "text": "<ol> <li>\u8bb2\u56fe\u50cf\u5212\u5206\u4e3a S \u00d7 S \u7684\u683c\u5b50, \u82e5\u67d0\u4e2a object \u4e2d\u5fc3\u843d\u5165\u7f51\u683c\u4e2d\uff0c\u5219\u8be5\u7f51\u683c\u8d1f\u8d23\u9884\u6d4b\u8be5 object;</li> <li>\u6bcf\u4e2a\u7f51\u683c\u8d1f\u8d23\u9884\u6d4b B \u4e2a bboxes, \u6bcf\u4e2a bbox \u9700\u9884\u6d4b (x, y, w, h, score) \u5171 5 \u4e2a\u503c;</li> <li>\u6bcf\u4e2a\u7f51\u683c\u8fd8\u9700\u9884\u6d4b\u5c5e\u4e8e C \u4e2a\u7c7b\u522b\u7684\u67d0\u4e2a\u7c7b\u522b\u4fe1\u606f;</li> <li>\u7efc\u4e0a, \u7f51\u7edc\u8f93\u51fa\u7684\u5f20\u91cf\u5927\u5c0f\u4e3a S \u00d7 S \u00d7 (5 \u00d7 B + C).</li> </ol>"}, {"location": "object_detection/yolo_series/#_2", "title": "\u4f18\u7f3a\u70b9", "text": "<p>\u4f18\u70b9:</p> <ul> <li>\u901f\u5ea6\u5feb\uff0c\u6807\u51c6\u7248\u53ef\u8fbe 45 fps;</li> </ul> <p>\u7f3a\u70b9:</p> <ul> <li>\u76f8\u4e92\u9760\u8fd1\u7269\u4f53\uff0c\u5c0f\u76ee\u6807\u6027\u80fd\u5dee;</li> <li>\u4e00\u4e2a\u7f51\u683c\u53ea\u80fd\u9884\u6d4b\u4e00\u4e2a\u7c7b\u522b\uff0c\u5f53\u4e00\u4e2a\u7f51\u683c\u4e2d\u540c\u65f6\u51fa\u73b0\u591a\u4e2a\u7c7b\u522b\u65f6\u5219\u65e0\u6cd5\u68c0\u51fa\u6240\u6709\u7684\u7c7b\u3002</li> </ul>"}, {"location": "object_detection/yolo_series/#yolov2", "title": "YOLOv2", "text": "<ul> <li>backbone: darknet19</li> <li>\u53bb\u6389\u4e86 YOLOv1 \u4e2d\u7684 FC \u5c42\u548c\u6700\u540e\u4e00\u4e2a Pooling \u5c42, \u4fdd\u6301\u4e86\u66f4\u9ad8\u7684\u5206\u8fa8\u7387\uff1b</li> <li>\u5f15\u5165\u4e86 Anchor \u673a\u5236, \u9884\u6d4b Anchor Box \u7684\u504f\u79fb\u503c\u548c\u7f6e\u4fe1\u5ea6\uff1b\u6bcf\u4e2a Cell \u53ef\u9884\u6d4b 9 \u4e2a Anchor Box, \u5171 13 \u00d7 13 \u00d7 9 = 1521 \u4e2a\uff1b\u91c7\u7528 Kmeans \u805a\u7c7b\u65b9\u6cd5\u5f97\u5230 Anchor Box \u7684\u5927\u5c0f\uff1b</li> <li>\u878d\u5408\u6df1\u5c42\u7279\u5f81\u548c\u6d45\u5c42\u7279\u5f81\uff1b</li> <li>\u4f7f\u7528\u4e86 BatchNorm \u63d0\u5347\u8bad\u7ec3\u901f\u5ea6\u548c\u8bad\u7ec3\u7cbe\u5ea6\uff1b</li> </ul>"}, {"location": "object_detection/yolo_series/#yolov3", "title": "YOLOv3", "text": "<ul> <li>backbone: darknet53, (1) \u501f\u9274\u4e86\u6b8b\u5dee\u8fde\u63a5\u601d\u60f3; (2) \u540c\u65f6\u4f7f\u7528 BN \u5c42\u548c Leaky ReLU \u9632\u6b62\u8fc7\u62df\u5408\uff1b(3) \u4f7f\u7528\u6b65\u957f\u4e3a 2 \u7684\u5377\u79ef\u5c42\u4ee3\u66ff\u6700\u5927\u6c60\u5316\u4e0b\u91c7\u6837\uff1b</li> <li>\u591a\u5c3a\u5ea6\u9884\u6d4b: \u5177\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u5c3a\u5ea6\u7684\u7f51\u7edc\u8f93\u51fa\uff1b</li> <li>\u5c06 YOLOv2 \u4e2d\u7684\u5355\u6807\u7b7e\u5206\u7c7b\u6539\u8fdb\u4e3a\u591a\u6807\u7b7e\u5206\u7c7b\u3002</li> </ul>"}, {"location": "object_detection/yolo_series/#yolov4", "title": "YOLOv4", "text": "<ul> <li>\u4f7f\u7528 Mish \u6fc0\u6d3b\u51fd\u6570\u4ee3\u66ff Leaky ReLU (Mish \u8fde\u7eed\u53ef\u5fae);</li> <li>\u5f15\u5165 SPP (Spatial Pyramid Pooling) \u589e\u52a0\u611f\u53d7\u91ce;</li> <li>Mosaic \u6570\u636e\u589e\u5f3a: \u63d0\u5347\u80cc\u666f\u591a\u6837\u6027\u548c\u5c0f\u76ee\u6807\u68c0\u6d4b\u80fd\u529b\uff1b</li> </ul>"}, {"location": "object_detection/yolo_series/#yolov5", "title": "YOLOv5", "text": "<ul> <li>Backbone: Focus \u7ed3\u6784\uff1b</li> <li>Neck: \u540c YOLOv4, FPN + PAN \u7279\u5f81\u878d\u5408\uff1b</li> <li>Head: YOLOv3 \u7684 Head;</li> <li>\u81ea\u9002\u5e94 anchor \u8ba1\u7b97\u4ee3\u66ff Kmeans \u79bb\u7ebf\u805a\u7c7b\uff1b</li> <li>\u81ea\u9002\u5e94\u7070\u5ea6\u586b\u5145: \u907f\u514d resize \u5bfc\u81f4\u76ee\u6807\u7578\u53d8\u3002</li> </ul>"}, {"location": "programming/binary_search/", "title": "\u4e8c\u5206\u67e5\u627e", "text": ""}, {"location": "programming/binary_search/#_1", "title": "\u9898\u76ee\u5217\u8868", "text": "\u9898\u76ee \u96be\u5ea6 \u6807\u7b7e \u9891\u5ea6 4.\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 H 113 33.\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 M 193 34.\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e M 56 240.\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635II M 56 287.\u5bfb\u627e\u91cd\u590d\u6570 M 24"}, {"location": "programming/binary_search/#_2", "title": "\u5178\u578b\u9898\u76ee", "text": ""}, {"location": "programming/binary_search/#4", "title": "4.\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570", "text": "<p>\u9898\u76ee: \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u5206\u522b\u4e3a m \u548c n \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4\u00a0nums1 \u548c\u00a0nums2\u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684 \u4e2d\u4f4d\u6570\u3002\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a O(log (m+n)) \u3002</p> <p>\u601d\u8def: \u5212\u5206\u6cd5\u3002\u8bb0\u7d22\u5f15 \\(i\\) \u5212\u5206 nums1, \u7d22\u5f15 \\(j\\) \u5212\u5206 nums2, \u5219\u6ee1\u8db3</p> \\[ len(\\text{nums1}[0:i]) + len(\\text{nums2}[0:j]) = len(\\text{nums1}[i:]) + len(\\text{nums2}[j:]) \\] <pre><code>def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&gt; float:\n\n    # assure len(nums1) &lt;= len(nums2)\n    if len(num1) &gt; len(num2):\n        nums1, nums2 = nums2, nums1\n    m, n = len(nums1), len(nums2)\n\n    # \u8fb9\u754c\u5904\u7406\n    if len(nums1) == 0:\n        if len(nums2) % 2 == 0:\n            return 0.5 * (nums2[n // 2 - 1] + nums2[n // 2])\n        else:\n            return nums2[n // 2]\n\n    # \u5bf9 nums1 \u8fdb\u884c\u4e8c\u5206\u67e5\u627e, \u5de6\u95ed\u53f3\u5f00\u533a\u95f4 [left, right)\n    # i: \u4e3a\u6307\u5411 nums1 \u4e2d\u5143\u7d20\u7684\u7d22\u5f15;\n    # j: \u4e3a\u6307\u5411 nums2 \u4e2d\u5143\u7d20\u7684\u7d22\u5f15;\n    left, right = 0, m + 1\n    while left &lt; right:\n        i = (left + right) // 2\n        j = (m + n + 1) // 2 - i\n\n        # \u5f02\u5e38\u5904\u7406\uff0c\u9632\u6b62\u4f7f\u7528\u7d22\u5f15\u83b7\u53d6\u503c\u65f6\u5bfc\u81f4\u6ea2\u51fa\n        tl = float('-inf') if i == 0 else nums1[i - 1]\n        bl = float('-inf') if j == 0 else nums2[j - 1]\n        tr = float('inf') if i == m else nums1[i]\n        br = float('inf') if j == n else nums2[j]\n\n        if tr &lt; bl:\n            left = i + 1  # +1\n        elif tl &gt; br:\n            right = i\n        else:\n            break  # \u8df3\u51fa\u5faa\u73af\n\n    if (m + n) % 2 == 1:  # odd\n        return max(tl, bl)\n    else:  # even\n        return 0.5 * (max(tl, bl) + min(tr, br))\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6: \\(O\\left(\\log\\left(\\min(m, n)\\right)\\right)\\), \u7a7a\u95f4\u590d\u6742\u5ea6: \\(O(1)\\)</p>"}, {"location": "programming/binary_search/#33", "title": "33.\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4", "text": "<p>\u9898\u76ee: \u5728\u4f20\u9012\u7ed9\u51fd\u6570\u4e4b\u524d\uff0cnums \u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u4e0b\u6807 k\uff080 &lt;= k &lt; nums.length\uff09\u4e0a\u8fdb\u884c\u4e86 \u65cb\u8f6c\uff0c\u4f7f\u6570\u7ec4\u53d8\u4e3a [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]\uff08\u4e0b\u6807 \u4ece 0 \u5f00\u59cb \u8ba1\u6570\uff09\u3002\u4f8b\u5982\uff0c [0,1,2,4,5,6,7] \u5728\u4e0b\u6807 3 \u5904\u7ecf\u65cb\u8f6c\u540e\u53ef\u80fd\u53d8\u4e3a\u00a0[4,5,6,7,0,1,2] \u3002\u7ed9\u4f60 \u65cb\u8f6c\u540e \u7684\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 target \uff0c\u5982\u679c nums \u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c target \uff0c\u5219\u8fd4\u56de\u5b83\u7684\u4e0b\u6807\uff0c\u5426\u5219\u8fd4\u56de\u00a0-1\u00a0\u3002 \u4f60\u5fc5\u987b\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logn) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p> <p></p> <p>\u601d\u8def: </p> <ul> <li>mid \u6307\u9488\u5c06\u6570\u7ec4\u5207\u5206\u4e3a\u4e24\u90e8\u5206, \u5fc5\u5b9a\u4e00\u90e8\u5206\u6709\u5e8f, \u53e6\u4e00\u90e8\u5206\u662f\u975e\u6709\u5e8f\u7684\u3002 \u5982\u56fe\u6240\u793a\u662f [0, mid] \u6709\u5e8f;</li> <li>\u5982\u679c target \u843d\u5165\u6709\u5e8f\u90e8\u5206, \u90a3\u4e48\u76f4\u63a5\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e.</li> </ul> <p>\u65b9\u6cd51: \u5148\u4e8c\u5206\u67e5\u627e\u65cb\u8f6c\u70b9\uff0c\u518d\u6839\u636e\u65cb\u8f6c\u70b9\u5224\u5b9a target \u843d\u5165\u7684\u6709\u5e8f\u533a\u95f4, \u6700\u540e\u5728\u6709\u5e8f\u533a\u95f4\u4e8c\u5206\u67e5\u627e target;</p> <p>\u65b9\u6cd52: \u76f4\u63a5\u5224\u5b9a\u6709\u5e8f\u533a\u95f4, \u5728\u6709\u5e8f\u533a\u95f4\u4e2d\u4e8c\u5206\u67e5\u627e.</p> \u65b9\u6cd51\u65b9\u6cd52 <pre><code>class Solution:\n    def search(self, nums, target):\n        # \u5bfb\u627e\u65cb\u8f6c\u70b9 (\u4e8c\u5206\u67e5\u627e)\n        left, right = 0, len(nums)\n        while left &lt; right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] &gt; nums[left]:\n                left = mid\n            else:\n                right = mid\n\n        # \u5224\u5b9a target \u5728\u65cb\u8f6c\u70b9\u7684\u5de6\u534a\u90e8\u5206\u8fd8\u662f\u53f3\u534a\u90e8\u5206, \u5e76\u8bbe\u5b9a\u67e5\u627e\u533a\u95f4\n        if nums[0] &lt;= target &lt;= nums[mid]:\n            left, right = 0, mid\n        else:\n            left, right = mid + 1, len(nums)\n\n        # \u5bfb\u627e target (\u4e8c\u5206\u67e5\u627e)\n        while left &lt; right:\n            mid = (left + right) // 2\n            if nums[mid] &lt; target:\n                left = mid + 1\n            elif nums[mid] &gt; target:\n                right = mid\n            else:\n                return mid\n        return -1\n</code></pre> <pre><code>class Solution:\n    def search(self, nums: List[int], target: int) -&gt; int:\n        left, right = 0, len(nums)\n        while left &lt; right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            # [0, mid] \u6709\u5e8f\n            if nums[0] &lt;= nums[mid]:\n                # target \u5728 [0, mid) \u4e2d\n                if nums[0] &lt;= target &lt; nums[mid]:\n                    right = mid\n                else:\n                    left = mid + 1\n            # [mid, end] \u6709\u5e8f\n            else:\n                if nums[mid] &lt; target &lt;= nums[-1]:\n                    left = mid + 1\n                else:\n                    right = mid\n        return -1\n</code></pre>"}, {"location": "programming/binary_search/#34", "title": "34.\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6309\u7167\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u8bf7\u4f60\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002 \u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c target\uff0c\u8fd4\u56de\u00a0[-1, -1]\u3002 \u4f60\u5fc5\u987b\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u00a0O(log n)\u00a0\u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p> <p>Tips: \u5bfb\u627e\u4e0a\u754c\u65f6, \u5c06 target + 1.</p> <pre><code>class Solution:\n    def searchRange(self, nums: List[int], target: int) -&gt; List[int]:\n        def lower_bound(nums, target):\n            left, right = 0, len(nums)\n            while left &lt; right:\n                mid = (left + right) // 2\n                if nums[mid] &lt; target:\n                    left = mid + 1\n                else:\n                    right = mid\n            return left\n\n        lower = lower_bound(nums, target)\n        if (not nums) or (lower &gt; len(nums) - 1) or (nums[lower] != target):\n            return [-1, -1]\n        upper = lower_bound(nums, target + 1) - 1\n        return [lower, upper]\n</code></pre>"}, {"location": "programming/binary_search/#240", "title": "240.\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635II", "text": "<p>\u9898\u76ee: \u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22\u00a0m\u00a0x\u00a0n\u00a0\u77e9\u9635 matrix \u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c target \u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a(1) \u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002(2) \u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002</p> <p>\u601d\u8def: \u8be5\u9898\u6709\u4e24\u79cd\u9ad8\u6548\u7684\u601d\u8def, \u7b2c\u4e00\u79cd\u662f\u9010\u884c\u4e8c\u5206\u67e5\u627e, \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(m\\log n)\\); \u7b2c\u4e8c\u79cd\u662f Z \u5b57\u5f62\u67e5\u627e, \u5373\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u67e5\u627e \\(num[i][j] &gt; target\\) \u5411\u5de6\u79fb\u52a8, \\(nums[i][j] &lt; target\\) \u5411\u4e0b\u79fb\u52a8, \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(m+n)\\), \u8fd9\u91cc\u8bb0\u5f55\u7b2c\u4e8c\u79cd\u5199\u6cd5\u3002</p> <pre><code>class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -&gt; bool:\n        m, n = len(matrix), len(matrix[0])\n        i, j = 0, n - 1\n        while i &lt; m and j &gt;= 0:\n            if matrix[i][j] &gt; target:\n                j -= 1\n            elif matrix[i][j] &lt; target:\n                i += 1\n            else:\n                return True\n        return False\n</code></pre>"}, {"location": "programming/binary_tree/", "title": "\u4e8c\u53c9\u6811", "text": ""}, {"location": "programming/binary_tree/#_1", "title": "\u9898\u76ee\u5217\u8868", "text": "\u9898\u76ee \u96be\u5ea6 \u6807\u7b7e \u9891\u5ea6 94.\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 E 115 98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 M array 101.\u5bf9\u79f0\u4e8c\u53c9\u6811 E 70 102.\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 M 202 103.\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386 M 182 104.\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 E 105.\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 M 80 110.\u5e73\u8861\u4e8c\u53c9\u6811 E 73 114.\u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868 M 124.\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c H 121 199.\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe M 111 226.\u7ffb\u8f6c\u4e8c\u53c9\u6811 E 236.\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 M 181 297.\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316 H BFS, DFS 301.\u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7 H backtracking 437.\u8def\u5f84\u603b\u548cIII M tree 538.\u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811 M DFS 543.\u4e8c\u53c9\u6811\u7684\u76f4\u5f84 E DFS 617.\u5408\u5e76\u4e8c\u53c9\u6811 E BFS, DFS"}, {"location": "programming/binary_tree/#_2", "title": "\u904d\u5386\u65b9\u6cd5", "text": ""}, {"location": "programming/binary_tree/#_3", "title": "\u524d\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u904d\u5386", "text": "<p>\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u904d\u5386\u90fd\u91c7\u7528\u4e86 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22, \u800c\u5c42\u6b21\u904d\u5386\u91c7\u7528\u4e86 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u9012\u5f52\u7684\u601d\u8def\u6bd4\u8f83\u7b80\u5355\uff0c\u8fed\u4ee3\u7684\u601d\u8def\u5176\u5b9e\u5c31\u662f\u5c06\u5165\u6808\u7684\u8fc7\u7a0b\u663e\u793a\u8868\u73b0\u4e86\u51fa\u6765\u3002</p>"}, {"location": "programming/binary_tree/#_4", "title": "\u524d\u5e8f\u77e5\u8bc6", "text": "<ul> <li>\u524d\u5e8f\u904d\u5386\u53ef\u4ee5\u60f3\u8c61\u6210\uff0c\u5c0f\u4eba\u4ece\u6811\u6839\u5f00\u59cb\u7ed5\u7740\u6574\u68f5\u6811\u7684\u5916\u56f4\u8f6c\u4e00\u5708\uff0c\u7ecf\u8fc7\u7ed3\u70b9\u7684\u987a\u5e8f\u5c31\u662f\u5148\u5e8f\u904d\u5386\u7684\u987a\u5e8f</li> </ul> <ul> <li>\u4e2d\u5e8f\u904d\u5386\u53ef\u4ee5\u60f3\u8c61\u6210\uff0c\u6309\u6811\u753b\u597d\u7684\u5de6\u53f3\u4f4d\u7f6e \u6295\u5f71 \u4e0b\u6765</li> </ul> <ul> <li>\u540e\u5e8f\u904d\u5386\u5c31\u50cf\u662f\u526a\u8461\u8404\uff0c\u6211\u4eec\u8981\u628a\u4e00\u4e32\u8461\u8404\u526a\u6210\u4e00\u9897\u4e00\u9897\u7684\u3002\u8fd8\u8bb0\u5f97\u6211\u4eec\u5148\u5e8f\u904d\u5386\u7ed5\u5708\u7684\u8def\u7ebf\u4e48\uff1f\u5c31\u662f \u56f4\u7740\u6811\u7684\u5916\u56f4\u7ed5\u4e00\u5708\uff0c\u5982\u679c\u53d1\u73b0\u4e00\u526a\u5200\u5c31\u80fd\u526a\u4e0b\u7684\u4e00\u9897\u8461\u8404\uff08\u6ce8\u610f \u5fc5\u987b\u662f\u4e00\u9897\u8461\u8404\uff09\uff0c\u5c31\u628a\u5b83\u526a\u4e0b\u6765\uff0c\u7ec4\u6210\u7684\u5c31\u662f\u540e\u5e8f\u904d\u5386\u4e86\u3002</li> </ul>"}, {"location": "programming/binary_tree/#144", "title": "144.\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386", "text": "\u9012\u5f52\u8fed\u4ee3 <pre><code>void pre_dfs(TreeNode *root, vector&lt;int&gt; &amp;res) {\n    if (root == nullptr) {\n        return;\n    }\n    res.push_back(root-&gt;val);\n    pre_dfs(root-&gt;left, res);\n    pre_dfs(root-&gt;right, res);\n}\n\nvector&lt;int&gt; preorderTraversal(TreeNode *root) {\n    vector&lt;int&gt; res;\n    pre_dfs(root, res);\n    return res;\n}\n</code></pre> <pre><code>vector&lt;int&gt; preorderTraversal(TreeNode* root) {\n    vector&lt;int&gt; res;\n    if (!root) {\n        return res;\n    }\n\n    stack&lt;TreeNode*&gt; stk;\n    TreeNode* node = root;\n    while (!stk.empty() || node != nullptr) {\n        // \u6839\u8282\u70b9\u4e0e\u5de6\u5b69\u5b50\u5165\u6808, \u5e76\u5c06\u6839\u8282\u70b9\u7684\u503c\u52a0\u5165\u5217\u8868\n        while (node != nullptr) {\n            res.emplace_back(node-&gt;val);\n            stk.emplace(node);\n            node = node-&gt;left;\n        }\n        // \u5c06\u53f3\u5b69\u5b50\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\n        node = stk.top();\n        stk.pop();\n        node = node-&gt;right;\n    }\n    return res;\n}\n</code></pre>"}, {"location": "programming/binary_tree/#94", "title": "94.\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386", "text": "\u9012\u5f52\u8fed\u4ee3 <pre><code>void in_dfs(TreeNode* root, vector&lt;int&gt; &amp;res) {\n    if (!root) {\n        return;\n    }\n    in_dfs(root-&gt;left, res);\n    res.push_back(root-&gt;val);\n    in_dfs(root-&gt;right, res);\n}\nvector&lt;int&gt; inorderTraversal(TreeNode* root) {\n    vector&lt;int&gt; res;\n    in_dfs(root, res);\n    return res;\n}\n</code></pre> <pre><code>vector&lt;int&gt; inorderTraversal(TreeNode* root) {\n    vector&lt;int&gt; res;\n    stack&lt;TreeNode*&gt; stk;\n    while (root != nullptr || !stk.empty()) {\n        // \u4ec5\u5de6\u5b69\u5b50\u5165\u6808\n        while (root != nullptr) {\n            stk.push(root);\n            root = root-&gt;left;\n        }\n        root = stk.top();\n        stk.pop();\n        res.push_back(root-&gt;val);\n        root = root-&gt;right;\n    }\n    return res;\n}\n</code></pre>"}, {"location": "programming/binary_tree/#145", "title": "145.\u4e8c\u53c9\u6811\u540e\u5e8f\u904d\u5386", "text": "\u9012\u5f52\u8fed\u4ee3 <pre><code>    void post_dfs(TreeNode *root, vector&lt;int&gt; &amp;res) {\n        if (!root) {\n            return;\n        }\n        post_dfs(root-&gt;left, res);\n        post_dfs(root-&gt;right, res);\n        res.push_back(root-&gt;val);\n    }\n\n    vector&lt;int&gt; postorderTraversal(TreeNode *root) {\n        vector&lt;int&gt; res;\n        post_dfs(root, res);\n        return res;\n    }\n</code></pre> <pre><code>vector&lt;int&gt; postorderTraversal(TreeNode *root) {\n    vector&lt;int&gt; res;\n    if (!root) {\n        return res;\n    }\n\n    stack&lt;TreeNode *&gt; stk;\n    TreeNode *prev = nullptr;\n    while (root != nullptr || !stk.empty()) {\n        while (root != nullptr) {\n            stk.emplace(root);\n            root = root-&gt;left;\n        }\n        root = stk.top();\n        stk.pop();\n        if (root-&gt;right == nullptr || root-&gt;right == prev) {\n            res.emplace_back(root-&gt;val);\n            prev = root;\n            root = nullptr;\n        } else {\n            stk.emplace(root);\n            root = root-&gt;right;\n        }\n    }\n    return res;\n}\n</code></pre>"}, {"location": "programming/binary_tree/#102", "title": "102.\u4e8c\u53c9\u6811\u5c42\u5e8f\u904d\u5386", "text": "\u9012\u5f52\u8fed\u4ee3 <pre><code>def levelOrder(self, root: TreeNode) -&gt; List[List[int]]:\n    res = []\n\n    def helper(root, depth):\n        if not root: \n            return []\n        # start the current depth\n        if len(res) == depth: \n            res.append([])\n        # fulfil the current depth\n        res[depth].append(root.val)\n        # process child nodes for the next depth\n        if  root.left:\n            helper(root.left, depth + 1) \n        if  root.right: \n            helper(root.right, depth + 1)\n\n    helper(root, 0)\n    return res\n</code></pre> <pre><code>def levelOrder(self, root: Optional[TreeNode]) -&gt; List[List[int]]:\n    from collections import deque\n    if root is None:\n        return []\n\n    queue = deque([root])\n    results = []\n    while queue:\n        res = []\n        for _ in range(len(queue)):\n            node = queue.popleft()\n            res.append(node.val)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        results.append(res)\n\n    return results\n</code></pre>"}, {"location": "programming/binary_tree/#103", "title": "103.\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386", "text": "<p>\u8be5\u9898\u6709\u4e24\u79cd\u601d\u8def:</p> <ol> <li>\u6309\u7167\u6b63\u5e38\u7684\u5c42\u6b21\u904d\u5386, \u5728\u5947\u6570\u5c42\u5012\u5e8f\u6570\u7ec4\u540e\u518d\u6dfb\u52a0\u5230 results;</li> <li>\u76f4\u63a5\u5229\u7528\u53cc\u7aef\u961f\u5217\u7684\u7279\u6027, \u8fd9\u91cc\u5199\u7b2c\u4e8c\u79cd\u65b9\u6cd5.</li> </ol> <pre><code>def zigzagLevelOrder(self, root: Optional[TreeNode]) -&gt; List[List[int]]:\n    from collections import deque\n    results = []\n    if root is None:\n        return results\n    layer = 0\n    queue = deque([root])\n    while queue:\n        result = []\n        if layer % 2 == 0:\n            # \u5076\u6570\u5c42\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                result.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n        else:\n            # \u5947\u6570\u5c42\n            for _ in range(len(queue)):\n                node = queue.pop()\n                result.append(node.val)\n                if node.right:\n                    queue.appendleft(node.right)\n                if node.left:\n                    queue.appendleft(node.left)\n        layer += 1\n        results.append(result)\n    return results\n</code></pre>"}, {"location": "programming/binary_tree/#199", "title": "199.\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe", "text": "<ul> <li>\u6cd51: \u8be5\u9898\u53ef\u4ee5\u91c7\u7528\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386, \u4ec5\u628a\u6bcf\u4e00\u5c42\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u52a0\u5165\u7ed3\u679c\u5217\u8868;</li> <li>\u6cd52: \u53f3\u5b50\u6811\u5148\u5e8f\u904d\u5386\u6cd5, \u6309\u7167 \u6839\u7ed3\u70b9 \u2192 \u53f3\u5b50\u6811 \u2192 \u5de6\u5b50\u6811 \u7684\u987a\u5e8f\u8bbf\u95ee. \u5bf9\u4e8e\u6bcf\u4e00\u5c42\u6765\u8bf4\uff0c\u5728\u8fd9\u5c42\u89c1\u5230\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u4e00\u5b9a\u662f\u6700\u53f3\u8fb9\u7684\u7ed3\u70b9\u3002</li> </ul> \u5c42\u5e8f\u904d\u5386\u53f3\u5b50\u6811\u5148\u5e8f\u904d\u5386 <pre><code>def rightSideView(self, root: Optional[TreeNode]) -&gt; List[int]:\n    from collections import deque\n    results = []\n    if root is None:\n        return results\n    queue = deque([root])\n    while queue:\n        size = len(queue)\n        for i in range(size):\n            node = queue.popleft()\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n            # \u961f\u5c3e\u5143\u7d20\u52a0\u5165\n            if i == size - 1:\n                results.append(node.val)\n    return results\n</code></pre> <pre><code>def rightSideView(self, root: Optional[TreeNode]) -&gt; List[int]:\n    def dfs(root, results, depth):\n        if root is None:\n            return\n        if len(results) == depth:\n            results.append(root.val)\n        depth += 1\n        dfs(root.right, results, depth)\n        dfs(root.left, results, depth)\n\n    results = []\n    depth = 0\n    dfs(root, results, depth)\n    return results\n</code></pre>"}, {"location": "programming/binary_tree/#_5", "title": "\u8def\u5f84\u95ee\u9898", "text": "<p>\u4e8c\u53c9\u6811\u8def\u5f84\u95ee\u9898\u53ef\u4ee5\u5206\u6210\u4e24\u7c7b: \u81ea\u9876\u5411\u4e0b \u6216 \u81ea\u5e95\u5411\u4e0a.</p> <p>\u81ea\u9876\u5411\u4e0b: \u4ece\u67d0\u4e00\u4e2a\u8282\u70b9(\u4e0d\u4e00\u5b9a\u662f\u6839\u8282\u70b9)\uff0c\u4ece\u4e0a\u5411\u4e0b\u5bfb\u627e\u8def\u5f84\uff0c\u5230\u67d0\u4e00\u4e2a\u8282\u70b9(\u4e0d\u4e00\u5b9a\u662f\u53f6\u8282\u70b9)\u7ed3\u675f, \u76f8\u5173\u9898\u76ee\u6709:</p> <ul> <li>112.\u8def\u5f84\u603b\u548c</li> <li>113.\u8def\u5f84\u603b\u548cII</li> <li>437.\u8def\u5f84\u603b\u548cIII</li> <li>257.\u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84</li> <li>988.\u4ece\u53f6\u7ed3\u70b9\u5f00\u59cb\u7684\u6700\u5c0f\u5b57\u7b26\u4e32</li> </ul> <p>\u81ea\u5e95\u5411\u4e0a: \u4ece\u4efb\u610f\u8282\u70b9\u5230\u4efb\u610f\u8282\u70b9\u7684\u8def\u5f84, \u901a\u5e38\u8fd9\u7c7b\u95ee\u9898\u91c7\u7528\u540e\u5e8f\u904d\u5386\u7684\u601d\u60f3\u3002\u76f8\u5173\u9898\u76ee:</p> <ul> <li>124.\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c</li> <li>687.\u6700\u957f\u540c\u503c\u8def\u5f84</li> <li>543.\u4e8c\u53c9\u6811\u7684\u76f4\u5f84</li> </ul>"}, {"location": "programming/binary_tree/#112", "title": "112.\u8def\u5f84\u603b\u548c", "text": "<p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u00a0root \u548c\u4e00\u4e2a\u8868\u793a\u76ee\u6807\u548c\u7684\u6574\u6570\u00a0targetSum \u3002\u5224\u65ad\u8be5\u6811\u4e2d\u662f\u5426\u5b58\u5728 \u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9 \u7684\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u503c\u76f8\u52a0\u7b49\u4e8e\u76ee\u6807\u548c\u00a0targetSum \u3002\u5982\u679c\u5b58\u5728\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\u8fd4\u56de false\u3002\u53f6\u5b50\u8282\u70b9 \u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002</p> \u56de\u6eaf\u6cd5DFS <pre><code>class Solution:\n    def __init__(self):\n        self.exist = False\n\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -&gt; bool:\n        def backtrack(root, path_sum):\n            if root is None:\n                return\n\n            path_sum += root.val\n            # \u5224\u65ad\u53f6\u5b50\u8282\u70b9\n            if root.left is None and root.right is None and path_sum == targetSum:\n                self.exist = True\n                return\n            backtrack(root.left, path_sum)\n            backtrack(root.right, path_sum)\n            path_sum -= root.val\n\n        path_sum = 0\n        backtrack(root, path_sum)\n        return self.exist\n</code></pre>"}, {"location": "programming/binary_tree/#124", "title": "124.\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c", "text": "<p>\u9898\u76ee: \u8def\u5f84 \u88ab\u5b9a\u4e49\u4e3a\u4e00\u6761\u4ece\u6811\u4e2d\u4efb\u610f\u8282\u70b9\u51fa\u53d1\uff0c\u6cbf\u7236\u8282\u70b9-\u5b50\u8282\u70b9\u8fde\u63a5\uff0c\u8fbe\u5230\u4efb\u610f\u8282\u70b9\u7684\u5e8f\u5217\u3002\u540c\u4e00\u4e2a\u8282\u70b9\u5728\u4e00\u6761\u8def\u5f84\u5e8f\u5217\u4e2d \u81f3\u591a\u51fa\u73b0\u4e00\u6b21 \u3002\u8be5\u8def\u5f84 \u81f3\u5c11\u5305\u542b\u4e00\u4e2a \u8282\u70b9\uff0c\u4e14\u4e0d\u4e00\u5b9a\u7ecf\u8fc7\u6839\u8282\u70b9\u3002\u8def\u5f84\u548c \u662f\u8def\u5f84\u4e2d\u5404\u8282\u70b9\u503c\u7684\u603b\u548c\u3002\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8fd4\u56de\u5176\u6700\u5927\u8def\u5f84\u548c\u3002</p> <p>\u601d\u8def: \u5bf9\u4e8e\u4e00\u68f5\u6811\u4e2d\u4ee5\u67d0\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u6700\u5c0f\u5b50\u6811, \u5f62\u6210\u7684\u8def\u5f84\u53ef\u4ee5\u5206\u6210\u56db\u79cd\u60c5\u51b5: </p> <ol> <li>root</li> <li>root + left</li> <li>root + right</li> <li>root + left + right</li> </ol> <p>\u4e0a\u8ff0\u56db\u79cd\u60c5\u51b5\u4e2d, \u5982\u679c\u5f53\u524d\u7ed3\u70b9\u4e0d\u662f\u6839\u7ed3\u70b9\uff0c\u90a3\u4e48\u7b2c 4 \u79cd\u60c5\u51b5\u662f\u4e0d\u80fd\u53bb\u66f4\u65b0\u5f53\u524d\u7ed3\u70b9\u7684\u6700\u5927\u8def\u5f84\u548c\u7684\uff0c\u56e0\u4e3a\u4f1a\u5f62\u6210\u5206\u652f\u3002\u4f46\u662f\u5728\u6700\u7ec8\u6bd4\u8f83\u6700\u5927\u8def\u5f84\u65f6\uff0c\u8be5\u79cd\u60c5\u51b5\u4e0d\u80fd\u5ffd\u7565\u3002</p> <p>\u901a\u8fc7\u4e0d\u65ad\u66f4\u65b0\u53f6\u5b50\u7ed3\u70b9\u5230\u5f53\u524d\u7ed3\u70b9\u7684\u6700\u5927\u8def\u5f84\u548c\u6c42\u53d6\u5f53\u524d\u7ed3\u70b9\u7684\u6700\u5927\u8def\u5f84\u548c\u3002</p> <pre><code>class Solution:\n    def __init__(self):\n        self.result = -float('inf')  # \u5168\u5c40\u53d8\u91cf, \u52a8\u6001\u5730\u66f4\u65b0\u7ed3\u679c\n\n    def maxPathSum(self, root: Optional[TreeNode]) -&gt; int:\n        def dfs(node):\n            if node is None:\n                return 0\n            # \u5982\u679c\u5de6\u53f3\u5b50\u6811\u63d0\u4f9b\u7684\u503c\u4e3a\u8d1f, \u5219\u820d\u5f03\n            lval = max(0, dfs(node.left))\n            rval = max(0, dfs(node.right))\n            # \u66f4\u65b0\u8282\u70b9\u503c, \u9700\u8981\u8003\u8651 root, \u5373 root + left + right\n            self.result = max(lval + rval + node.val, self.result)\n            # \u8fd4\u56de\u8282\u70b9\u7684\u6700\u5927\u8d21\u732e\u503c\n            return max(lval, rval) + node.val\n\n        dfs(root)\n        return self.result\n</code></pre>"}, {"location": "programming/binary_tree/#_6", "title": "\u5176\u4ed6\u4f8b\u9898", "text": ""}, {"location": "programming/binary_tree/#110", "title": "110.\u5e73\u8861\u4e8c\u53c9\u6811", "text": "<ul> <li>\u5f53\u524d\u8282\u70b9\u7684\u9ad8\u5ea6\u4e3a\u5de6\u5b50\u6811\u9ad8\u5ea6\u4e0e\u53f3\u5b50\u6811\u9ad8\u5ea6\u7684\u6700\u5927\u503c\u52a01, \u8868\u793a\u4e3a \\(h_{node}= \\max({h_{left}, h_{right}}) + 1\\);</li> <li>\u53f6\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u90fd\u4e3a NULL, \u53ef\u9ed8\u8ba4\u5176\u5de6\u53f3\u5b69\u5b50\u9ad8\u5ea6\u90fd\u4e3a -1.</li> </ul> <pre><code>def isBalanced(self, root: Optional[TreeNode]) -&gt; bool:\n    def height(node):\n        if node is None:\n            return 0\n        left_height = height(node.left)\n        right_height = height(node.right)\n\n        # \u82e5\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u4e3a\u975e\u5e73\u8861\u4e8c\u53c9\u6811, \u5219\u80fd\u591f\u5c06 -2 \u9010\u5c42\u5411\u4e0a\u53cd\u9988\u7ed9\u5176\u7236\u8282\u70b9, -2 \u4e3a\u6807\u8bc6\u7b26\u53f7\n        if left_height == -2 or right_height == -2:\n            return -2\n        # \u82e5\u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u5927\u4e8e1, \u5219\u8be5\u8282\u70b9\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\n        if abs(left_height - right_height) &gt; 1:\n            return -2\n        return max(left_height, right_height) + 1\n\n    if height(root) == -2:\n        return False\n    return True\n</code></pre>"}, {"location": "programming/binary_tree/#236", "title": "236.\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148", "text": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002</p> <pre><code>class Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -&gt; 'TreeNode':\n        if root is None:\n            return root\n        # \u627e\u5230\u7ed3\u70b9 p \u6216\u8005\u7ed3\u70b9 q\n        if (root is p) or (root is q):\n            return root\n\n        lchild = self.lowestCommonAncestor(root.left, p, q)\n        rchild = self.lowestCommonAncestor(root.right, p, q)\n\n        # lchild \u548c rchild \u90fd\u4e0d\u4e3a\u7a7a, \u8bf4\u660e p \u548c q \u4e00\u8fb9\u4e00\u4e2a\n        if lchild and rchild:\n            return root\n        # rchild \u4e3a\u7a7a, \u53ea\u9700\u770b lchild\n        if lchild and (rchild is None):\n            return lchild\n        # lchild \u4e3a\u7a7a, \u53ea\u9700\u770b rchild\n        if rchild and (lchild is None):\n            return rchild\n        # lchild \u548c rchild \u90fd\u4e3a\u7a7a\n        return None\n</code></pre>"}, {"location": "programming/bracktracking/", "title": "\u56de\u6eaf\u6cd5", "text": ""}, {"location": "programming/bracktracking/#_1", "title": "\u9898\u76ee\u5217\u8868", "text": "\u9898\u76ee \u96be\u5ea6 \u6807\u7b7e \u9891\u5ea6 17.\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 M 13 22.\u62ec\u53f7\u751f\u6210 M 94 39.\u7ec4\u5408\u603b\u548c M 62 40.\u7ec4\u5408\u603b\u548cII M 35 46.\u5168\u6392\u5217 M 178 51.N\u7687\u540e H matrix 15 78.\u5b50\u96c6 M 72 79.\u5355\u8bcd\u641c\u7d22 M matrix 36"}, {"location": "programming/bracktracking/#_2", "title": "\u8981\u70b9", "text": "<ul> <li>\u56de\u6eaf\u6cd5\u5c5e\u4e8e\u66b4\u529b\u641c\u7d22</li> <li>\u5e94\u7528\u573a\u666f: \u6392\u5217\u3001\u7ec4\u5408\u3001\u5207\u5272\u3001\u81ea\u5df1\u3001\u68cb\u76d8</li> <li>\u5982\u4f55\u7406\u89e3? \u53ef\u4ee5\u62bd\u8c61\u4e3a N \u53c9\u6811, \u6811\u7684\u5bbd\u5ea6\u4e3a\u5f85\u5904\u7406\u96c6\u5408\u7684\u5927\u5c0f</li> </ul>"}, {"location": "programming/bracktracking/#_3", "title": "\u7b97\u6cd5\u6846\u67b6", "text": "<pre><code>results = []  # \u4fdd\u5b58\u6240\u6709\u641c\u7d22\u7ed3\u679c\n\ndef backtracking(\u8def\u5f84, \u9009\u62e9\u5217\u8868):\n    if \u6ee1\u8db3\u7ed3\u675f\u6761\u4ef6:\n        results.append(\u8def\u5f84)\n        return\n\n    for \u9009\u62e9 in \u9009\u62e9\u5217\u8868:\n        \u5b9e\u73b0\u5355\u5c42\u903b\u8f91\n        backtracking(\u8def\u5f84, \u9009\u62e9\u5217\u8868)\n        \u64a4\u9500\u9009\u62e9\n</code></pre>"}, {"location": "programming/bracktracking/#_4", "title": "\u56fe\u56de\u6eaf", "text": ""}, {"location": "programming/bracktracking/#79", "title": "79.\u5355\u8bcd\u641c\u7d22", "text": "<p>\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u00a0m x n \u4e8c\u7ef4\u5b57\u7b26\u7f51\u683c\u00a0board \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5355\u8bcd\u00a0word \u3002\u5982\u679c\u00a0word \u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002</p> <pre><code>def exist(self, board: List[List[str]], word: str) -&gt; bool:\n    self.flag = False  # \u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u72b6\u6001\n\n    def backtrack(i, j, start, visited):\n        # \u8d8a\u754c\u6216\u5df2\u904d\u5386\n        if i &lt; 0 or j &lt; 0 or i &gt;= m or j &gt;= n or visited[i][j]:\n            return\n        # \u5b57\u7b26\u4e0d\u5339\u914d\n        if board[i][j] != word[start]:\n            return\n        if start == len(word) - 1:\n            self.flag = True\n            return\n\n        visited[i][j] = True  # \u9009\u62e9\n        backtrack(i - 1, j, start + 1, visited)\n        backtrack(i + 1, j, start + 1, visited)\n        backtrack(i, j - 1, start + 1, visited)\n        backtrack(i, j + 1, start + 1, visited)\n        visited[i][j] = False  # \u64a4\u9500\u9009\u62e9\n\n    m, n = len(board), len(board[0])\n    # \u5b9a\u4e49\u662f\u5426\u5df2\u904d\u5386\u7684\u6570\u7ec4\n    visited = [[False for j in range(n)] for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            start = 0\n            self.flag = False\n            backtrack(i, j, start, visited)\n            if self.flag:\n                return True\n    return False\n</code></pre>"}, {"location": "programming/bracktracking/#51", "title": "51.N\u7687\u540e", "text": "<p>\u9898\u76ee: \u6309\u7167\u56fd\u9645\u8c61\u68cb\u7684\u89c4\u5219\uff0c\u7687\u540e\u53ef\u4ee5\u653b\u51fb\u4e0e\u4e4b\u5904\u5728\u540c\u4e00\u884c\u6216\u540c\u4e00\u5217\u6216\u540c\u4e00\u659c\u7ebf\u4e0a\u7684\u68cb\u5b50\u3002 n\u00a0\u7687\u540e\u95ee\u9898 \u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 n\u00a0\u4e2a\u7687\u540e\u653e\u7f6e\u5728 n\u00d7n \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684\u00a0n\u00a0\u7687\u540e\u95ee\u9898 \u7684\u89e3\u51b3\u65b9\u6848\u3002 \u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u4e0d\u540c\u7684\u00a0n \u7687\u540e\u95ee\u9898 \u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d 'Q' \u548c '.' \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002</p> <p></p> <p>\u6ce8\u610f: \u8bb0\u4f4f\u5df2\u6446\u653e Q \u7684\u4f4d\u7f6e\u4e0d\u662f\u50cf Flood Fill \u7b80\u5355\u4f7f\u7528 visited \u5e03\u5c14\u6570\u7ec4, \u800c\u662f\u9010\u884c\u8003\u8651 Q \u53ef\u4ee5\u6446\u653e\u5728\u54ea\u4e00\u4e2a\u4f4d\u7f6e\u3002</p> <p>\u5bf9\u89d2\u7ebf\u5143\u7d20\u7279\u6027</p> <p></p> <p>\u68c0\u67e5\u7b56\u7565: \u53ea\u8981\u65b0\u6446\u653e\u7684 Q \u4e0e\u5df2\u6446\u653e\u7684 Q \u51b2\u7a81, \u5c31\u5c1d\u8bd5\u6446\u653e\u540c\u4e00\u884c\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e; \u5230\u884c\u5c3e\u8fd8\u4e0d\u80fd\u653e\u7f6e Q \u7684\u8bdd\u5c31\u56de\u9000\u5230\u4e0a\u4e00\u884c\u3002</p> <pre><code>def solveNQueens(self, n: int) -&gt; List[List[str]]:\n    def generate_board():\n        board = []\n        for r in range(n):\n            row[queens[r]] = \"Q\"\n            board.append(\"\".join(row))\n            row[queens[r]] = \".\"  # \u6062\u590d\u4e3a \".\"\n        return board\n\n    def backtrack(r):\n        \"\"\"\n        r (int): index of row\n        \"\"\"\n        if r == n:\n            board = generate_board()\n            results.append(board)\n            return\n\n        for c in range(n):\n            if (c in columns) or (r - c in diag_45) or (r + c in diag_135):\n                continue\n            queens[r] = c\n            columns.add(c)\n            diag_45.add(r - c)\n            diag_135.add(r + c)\n            backtrack(r + 1)\n            columns.remove(c)\n            diag_45.remove(r - c)\n            diag_135.remove(r + c)\n\n    results = []\n    queens = [-1] * n  # store colomn index of queens in each row\n    row = [\".\"] * n\n    columns = set()\n    diag_45 = set()\n    diag_135 = set()\n\n    backtrack(r=0)\n    return results\n</code></pre>"}, {"location": "programming/bracktracking/#_5", "title": "\u5178\u578b\u4f8b\u9898", "text": ""}, {"location": "programming/bracktracking/#17", "title": "17.\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408", "text": "<pre><code>def letterCombinations(self, digits: str) -&gt; List[str]:\n    NUMBER_MAP = {\n        \"2\": \"abc\",\n        \"3\": \"def\",\n        \"4\": \"ghi\",\n        \"5\": \"jkl\",\n        \"6\": \"mno\",\n        \"7\": \"pqrs\",\n        \"8\": \"tuv\",\n        \"9\": \"wxyz\"\n    }\n\n    def backtrack(digits, index, track, results):\n        if len(digits) == len(track):\n            results.append(\"\".join(track))\n            return\n\n        digit = digits[index]\n        for letter in NUMBER_MAP[digit]:\n            track.append(letter)\n            backtrack(digits, index + 1, track, results)\n            track.pop()\n\n    if not digits:\n        return []\n    results = []\n    track = []\n    index = 0\n    backtrack(digits, index, track, results)\n    return results\n</code></pre>"}, {"location": "programming/bracktracking/#22", "title": "22.\u62ec\u53f7\u751f\u6210", "text": "<p>\u9898\u76ee: \u6570\u5b57 n \u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002</p> \u56de\u6eaf\u6cd5DFS <pre><code>def generateParenthesis(self, n: int) -&gt; List[str]:\n    def backtrack(left, right, track, results):\n        \"\"\"\n        Args:\n            left (int): \u5de6\u62ec\u53f7\u7684\u4e2a\u6570\n            right (int): \u53f3\u62ec\u53f7\u7684\u4e2a\u6570\n            track (list): \u8def\u5f84\n            results (list[list]): \u4fdd\u5b58\u8def\u5f84\u7684\u5217\u8868\n        \u6ce8\u610f: \u526a\u679d\u548c\u6dfb\u52a0\u7ed3\u679c\u7684\u987a\u5e8f\u4e0d\u80fd\u4ea4\u6362\n        \"\"\"\n        # \u526a\u679d\n        if right &gt; left or left &gt; n or right &gt; n:\n            return\n\n        # \u6ee1\u8db3\u6761\u4ef6\u5219\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\n        if len(track) == 2 * n:\n            results.append(\"\".join(track))\n            return\n\n        # \u589e\u52a0\u5de6\u62ec\u53f7\n        track.append(\"(\")\n        backtrack(left + 1, right, track, results)\n        track.pop()\n\n        # \u589e\u52a0\u53f3\u62ec\u53f7\n        track.append(\")\")\n        backtrack(left, right + 1, track, results)\n        track.pop()\n\n    results = []\n    track = []\n    if n == 0:\n        return results\n    backtrack(0, 0, track, results)\n    return results\n</code></pre> <pre><code>def generateParenthesis(self, n: int) -&gt; List[str]:\n    def dfs(curr_str, left, right, results):\n        if left &gt; n or right &gt; n or right &gt; left:\n            return\n        if len(curr_str) == n * 2:\n            results.append(curr_str)\n            return\n        dfs(curr_str + \"(\", left + 1, right, results)\n        dfs(curr_str + \")\", left, right + 1, results)\n\n    string = \"\"\n    results = []\n    dfs(string, 0, 0, results)\n    return results\n</code></pre>"}, {"location": "programming/bracktracking/#39", "title": "39.\u7ec4\u5408\u603b\u548c", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a \u65e0\u91cd\u590d\u5143\u7d20 \u7684\u6574\u6570\u6570\u7ec4\u00a0candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6574\u6570\u00a0target\u00a0\uff0c\u627e\u51fa\u00a0candidates\u00a0\u4e2d\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a\u76ee\u6807\u6570\u00a0target \u7684 \u6240\u6709\u00a0\u4e0d\u540c\u7ec4\u5408 \uff0c\u5e76\u4ee5\u5217\u8868\u5f62\u5f0f\u8fd4\u56de\u3002\u4f60\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u8fd9\u4e9b\u7ec4\u5408\u3002 candidates \u4e2d\u7684 \u540c\u4e00\u4e2a \u6570\u5b57\u53ef\u4ee5 \u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6 \u3002\u5982\u679c\u81f3\u5c11\u4e00\u4e2a\u6570\u5b57\u7684\u88ab\u9009\u6570\u91cf\u4e0d\u540c\uff0c\u5219\u4e24\u79cd\u7ec4\u5408\u662f\u4e0d\u540c\u7684\u3002\u00a0 \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u8f93\u5165\uff0c\u4fdd\u8bc1\u548c\u4e3a\u00a0target \u7684\u4e0d\u540c\u7ec4\u5408\u6570\u5c11\u4e8e 150 \u4e2a\u3002</p> <p>Hints: \u4ee3\u7801\u4e2d\u8bbe\u7f6e start \u6307\u9488\u662f\u4e3a\u4e86\u907f\u514d\u7ed3\u679c\u4e2d\u7684\u91cd\u590d\u3002</p> <pre><code>def combinationSum(self, candidates: List[int], target: int) -&gt; List[List[int]]:\n    def backtrack(track_sum, track, results, start):\n        \"\"\"\n        track_sum (int): sum of track\n        start (int): the start index for start\n        \"\"\"\n        if track_sum &gt; target:\n            return\n        if track_sum == target:\n            results.append(track.copy())  # \u6ce8\u610f\u4f7f\u7528 copy()\n            return\n\n        for i in range(start, len(candidates)):\n            # \u9009\u62e9\u5e76\u5904\u7406\n            track_sum += candidates[i]\n            track.append(candidates[i])\n            # \u56de\u6eaf\n            backtrack(track_sum, track, results, i)\n            # \u64a4\u9500\u9009\u62e9\n            track_sum -= candidates[i]\n            track.pop()\n\n    results = []\n    track = []\n    track_sum = 0\n    start = 0\n    backtrack(track_sum, track, results, start)\n    return results\n</code></pre>"}, {"location": "programming/bracktracking/#40", "title": "40.\u7ec4\u5408\u603b\u548cII", "text": "<p>\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u5019\u9009\u4eba\u7f16\u53f7\u7684\u96c6\u5408\u00a0candidates\u00a0\u548c\u4e00\u4e2a\u76ee\u6807\u6570\u00a0target\u00a0\uff0c\u627e\u51fa\u00a0candidates\u00a0\u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a\u00a0target\u00a0\u7684\u7ec4\u5408\u3002 candidates\u00a0\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u00a0\u4e00\u6b21\u00a0\u3002</p> <p>\u601d\u8def: \u76f8\u8f83 39.\u7ec4\u5408\u603b\u6570 \u7684\u533a\u522b\u5728\u4e8e\u96c6\u5408\u4e2d\u7684\u6570\u5b57\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528, \u4f46\u662f\u96c6\u5408\u4e2d\u53c8\u6709\u91cd\u590d\u6570\u5b57\u3002\u6240\u4ee5\u8fd9\u91cc\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u6570\u5b57\u5305\u542b\u4e86\u4e24\u79cd\u60c5\u51b5:</p> <ul> <li>\u4f7f\u7528\u8fc7\u7684\u6570\u5b57\u4e0d\u80fd\u518d\u4f7f\u7528;</li> <li>\u540c\u4e00\u5c42\u4e0d\u80fd\u6709\u76f8\u540c\u7684\u6570\u5b57, \u5982\u4e0b\u56fe</li> </ul> <p></p> <pre><code>def combinationSum2(self, candidates: List[int], target: int) -&gt; List[List[int]]:\n    def backtrack(track, track_sum, results, start):\n        if track_sum &gt; target:\n            return\n        if track_sum == target:\n            results.append(track.copy())\n            return\n\n        for i in range(start, len(candidates)):\n            # \u53bb\u91cd\n            if i &gt; start and candidates[i - 1] == candidates[i]:\n                continue\n\n            track.append(candidates[i])\n            track_sum += candidates[i]\n            backtrack(track, track_sum, results, i + 1)\n            track.pop()\n            track_sum -= candidates[i]\n\n    results = []\n    track = []\n    track_sum = 0\n    start = 0\n\n    candidates = sorted(candidates)  # \u5148\u6392\u5e8f\n    backtrack(track, track_sum, results, start)\n    return results\n</code></pre>"}, {"location": "programming/bracktracking/#46", "title": "46.\u5168\u6392\u5217", "text": "<p>\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4 nums \uff0c\u8fd4\u56de\u5176 \u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217 \u3002\u4f60\u53ef\u4ee5 \u6309\u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u7b54\u6848\u3002</p> <pre><code>def permute(self, nums: List[int]) -&gt; List[List[int]]:\n    results = []\n    track = []\n    self.backtrack(nums, track, results)\n    return results\n\ndef backtrack(self, nums, track, results):\n    if len(track) == len(nums):\n        results.append(track.copy())\n\n    for num in nums:\n        if num in track:  # \u5f53\u524d\u5c42\u4e2d, \u5df2\u6dfb\u52a0\u7684\u6570\u4e0d\u518d\u8003\u8651\n            continue\n        track.append(num)                     # \u9009\u62e9\n        self.backtrack(nums, track, results)  # \u9012\u5f52\n</code></pre>"}, {"location": "programming/bracktracking/#78", "title": "78.\u5b50\u96c6", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 \u4e92\u4e0d\u76f8\u540c \u3002\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002\u89e3\u96c6 \u4e0d\u80fd \u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002\u4f60\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u89e3\u96c6\u3002</p> <p>\u601d\u8def: \u4e0d\u540c\u5c42\u5143\u7d20\u4e0d\u80fd\u91cd\u590d, \u90a3\u4e48\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a start \u6307\u9488\u53bb\u6392\u9664\u5df2\u7ecf\u9009\u62e9\u7684\u5143\u7d20\u3002</p> <pre><code>def subsets(self, nums: List[int]) -&gt; List[List[int]]:\n    def backtrack(track, results, start):\n        if len(track) &gt; len(nums):\n            return\n        results.append(track[:])\n\n        for i in range(start, len(nums)):\n            num = nums[i]\n            if num in track:\n                continue\n            track.append(num)\n            backtrack(track, results, i)\n            track.pop()\n\n    results = []\n    track = []\n    backtrack(track, results, 0)\n    return results\n</code></pre>"}, {"location": "programming/dfs/", "title": "DFS", "text": ""}, {"location": "programming/dfs/#_1", "title": "\u9898\u76ee\u5217\u8868", "text": "\u9898\u76ee \u96be\u5ea6 \u6807\u7b7e \u9891\u5ea6 200.\u5c9b\u5c7f\u6570\u91cf M matrix, graph 189"}, {"location": "programming/dfs/#_2", "title": "\u5178\u578b\u9898\u76ee", "text": ""}, {"location": "programming/dfs/#200", "title": "200.\u5c9b\u5c7f\u6570\u91cf", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u7531 '1'\uff08\u9646\u5730\uff09\u548c '0'\uff08\u6c34\uff09\u7ec4\u6210\u7684\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u8bf7\u4f60\u8ba1\u7b97\u7f51\u683c\u4e2d\u5c9b\u5c7f\u7684\u6570\u91cf\u3002 \u5c9b\u5c7f\u603b\u662f\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u6bcf\u5ea7\u5c9b\u5c7f\u53ea\u80fd\u7531\u6c34\u5e73\u65b9\u5411\u548c/\u6216\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u5f62\u6210\u3002\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\u8be5\u7f51\u683c\u7684\u56db\u6761\u8fb9\u5747\u88ab\u6c34\u5305\u56f4\u3002</p> <p>\u8be5\u9898\u53ef\u4ee5\u4f7f\u7528 DFS \u548c BFS, \u548c Union-Find \u4e09\u79cd\u65b9\u6cd5\u6765\u6c42\u89e3.</p> DFSBFS <pre><code>def numIslands(self, grid: List[List[str]]) -&gt; int:\n    \"\"\"solve by DFS\"\"\"\n    def dfs(grid, i, j, row, col):\n        if (i &lt; 0 or j &lt; 0 or i &gt;= row or j &gt;= col) or grid[i][j] == '0':\n            return\n        grid[i][j] = '0'\n        dfs(grid, i - 1, j, row, col)\n        dfs(grid, i + 1, j, row, col)\n        dfs(grid, i, j - 1, row, col)\n        dfs(grid, i, j + 1, row, col)\n\n    num_island = 0\n    row, col = len(grid), len(grid[0])\n    for i in range(row):\n        for j in range(col):\n            if grid[i][j] == '0':\n                continue\n            num_island += 1\n            dfs(grid, i, j, row, col)\n    return num_island\n</code></pre> <pre><code>def numIslands(self, grid):\n\"\"\"solve by BFS\"\"\"\nfrom collections import deque\n\ndef bfs(grid, i, j, row, col):\n    q = deque([[i, j]])\n\n    def process_neighbor(grid, x, y):\n        if 0 &lt;= x &lt; row and 0 &lt;= y &lt; col and grid[x][y] == '1':\n            q.append([x, y])\n            grid[x][y] = \"0\"\n\n    while q:\n        i, j = q.popleft()\n        process_neighbor(grid, i - 1, j)\n        process_neighbor(grid, i + 1, j)\n        process_neighbor(grid, i, j - 1)\n        process_neighbor(grid, i, j + 1)\n\nnum_island = 0\nrow, col = len(grid), len(grid[0])\nfor i in range(row):\n    for j in range(col):\n        if grid[i][j] == '0':\n            continue\n        bfs(grid, i, j, row, col)\n        num_island += 1\nreturn num_island\n</code></pre>"}, {"location": "programming/divide_and_conquer/", "title": "\u5206\u6cbb\u6cd5", "text": ""}, {"location": "programming/divide_and_conquer/#_1", "title": "\u9898\u76ee\u5217\u8868", "text": "Title Difficulty Marks 169.\u591a\u6570\u5143\u7d20 E hash_table, sorting 215.\u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 M heap"}, {"location": "programming/divide_and_conquer/#_2", "title": "\u8865\u5145\u77e5\u8bc6", "text": "<p>\u9012\u5f52\u56db\u90e8\u66f2</p> <ul> <li>\u7ec8\u6b62\u6761\u4ef6</li> <li>\u95ee\u9898\u5212\u5206</li> <li>\u9012\u5f52\u6c42\u89e3</li> <li>\u7ed3\u679c\u5408\u5e76</li> </ul> <p>\u5728\u8ba1\u7b97\u673a\u4e2d, \u9012\u5f52\u7684\u672c\u8d28\u662f\u672a\u8fbe\u5230\u7ec8\u6b62\u6761\u4ef6\u65f6\u4e0d\u65ad\u5730\u5728\u51fd\u6570\u8c03\u7528\u6808\u4e2d\u5f00\u8f9f\u7a7a\u95f4\u3002\u4f8b\u5982\u6c42\u9636\u4e58 n! \u9012\u5f52\u51fd\u6570</p> <pre><code>def sum(n):\n    if n &lt;= 1:\n        return 1\n    val = n * sum(n-1)\n    return val\n</code></pre> <p><code>sum(5)</code> \u4e0e <code>sum(4)</code> \u5f00\u8f9f\u7684\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u51fd\u6570\u5b58\u50a8\u7a7a\u95f4, \u5982\u679c <code>`sum(4)</code>\u8ba1\u7b97\u5b8c\u6210\uff0c\u5219\u8be5\u7247\u7a7a\u95f4\u88ab\u91ca\u653e\u3002\u8ba1\u7b97\u5b8c\u6210\u7684\u6807\u5fd7\u662f\u6240\u6709\u7684\u7a7a\u95f4\u90fd\u91ca\u653e\u3002 </p>"}, {"location": "programming/double_pointers/", "title": "\u53cc\u6307\u9488", "text": ""}, {"location": "programming/double_pointers/#_1", "title": "\u9898\u76ee\u5217\u8868", "text": "\u9898\u76ee \u96be\u5ea6 \u6807\u7b7e \u9891\u5ea6 11.\u76db\u6c34\u6700\u591a\u7684\u5bb9\u5668 M 36 15.\u4e09\u6570\u4e4b\u548c M 266 18.\u56db\u6570\u4e4b\u548c M 16 31.\u4e0b\u4e00\u4e2a\u6392\u5217 M array 102 42.\u63a5\u96e8\u6c34 H stack 136"}, {"location": "programming/double_pointers/#_2", "title": "\u5178\u578b\u9898\u76ee", "text": ""}, {"location": "programming/double_pointers/#11", "title": "11.\u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668", "text": "<p>\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4\u00a0height\u00a0\u3002\u6709\u00a0n\u00a0\u6761\u5782\u7ebf\uff0c\u7b2c i \u6761\u7ebf\u7684\u4e24\u4e2a\u7aef\u70b9\u662f\u00a0(i, 0)\u00a0\u548c\u00a0(i, height[i])\u00a0\u3002 \u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e\u00a0x\u00a0\u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002 \u8fd4\u56de\u5bb9\u5668\u53ef\u4ee5\u50a8\u5b58\u7684\u6700\u5927\u6c34\u91cf\u3002</p> <pre><code>class Solution:\n    def maxArea(self, height: List[int]) -&gt; int:\n        \"\"\"\n        1. \u53cc\u6307\u9488\u6cd5\n        2. \u79fb\u52a8 height \u8f83\u5c0f\u7684\u6307\u9488\n        \"\"\"\n        left, right = 0, len(height) - 1\n        max_area = 0\n        while left &lt; right:\n            area = min(height[left], height[right]) * (right - left)\n            if area &gt; max_area:\n                max_area = area\n            if height[left] &lt; height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area\n</code></pre>"}, {"location": "programming/double_pointers/#15", "title": "15.\u4e09\u6570\u4e4b\u548c", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e09\u5143\u7ec4 [nums[i], nums[j], nums[k]] \u6ee1\u8db3 i != j\u3001i != k \u4e14 j != k \uff0c\u540c\u65f6\u8fd8\u6ee1\u8db3 nums[i] + nums[j] + nums[k] == 0\u3002\u8bf7\u4f60\u8fd4\u56de\u6240\u6709\u548c\u4e3a 0 \u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002\u6ce8\u610f\uff1a\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002</p> <p>Tips: \u672c\u9898\u9700\u8981\u6ce8\u610f\u7684\u662f\u5f53 \u6ee1\u8db3\u4e09\u6570\u548c\u4e3a0\u4e4b\u540e \u7684\u53bb\u91cd\u3002</p> <pre><code>class Solution:\n    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:\n        # \u5347\u5e8f\u6392\u5217\n        nums.sort()   # or 'nums = sorted(nums)'\n\n        results = []\n        for i in range(len(nums)):\n            if i &gt; 0 and nums[i - 1] == nums[i]:\n                continue\n\n            # \u53cc\u6307\u9488\u7f29\u5c0f\u533a\u95f4\n            left, right = i + 1, len(nums) - 1\n            while left &lt; right:\n                sum_ = nums[i] + nums[left] + nums[right]  # \u4e09\u6570\u548c\n                if sum_ &gt; 0:\n                    right -= 1\n                elif sum_ &lt; 0:\n                    left += 1\n                else:\n                    results.append([nums[i], nums[left], nums[right]])\n                    while left &lt; right and nums[left] == nums[left + 1]:\n                        left += 1\n                    while left &lt; right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n\n        return results\n</code></pre>"}, {"location": "programming/double_pointers/#18", "title": "18.\u56db\u6570\u4e4b\u548c", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u7531 n \u4e2a\u6574\u6570\u7ec4\u6210\u7684\u6570\u7ec4\u00a0nums \uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c target \u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u6ee1\u8db3\u4e0b\u8ff0\u5168\u90e8\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u00a0[nums[a], nums[b], nums[c], nums[d]]\u00a0\uff08\u82e5\u4e24\u4e2a\u56db\u5143\u7ec4\u5143\u7d20\u4e00\u4e00\u5bf9\u5e94\uff0c\u5219\u8ba4\u4e3a\u4e24\u4e2a\u56db\u5143\u7ec4\u91cd\u590d):</p> <ul> <li>0 &lt;= a, b, c, d\u00a0&lt; n</li> <li>a\u3001b\u3001c \u548c d \u4e92\u4e0d\u76f8\u540c</li> <li>nums[a] + nums[b] + nums[c] + nums[d] == target</li> <li>\u4f60\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u7b54\u6848 \u3002</li> </ul> <p>\u601d\u8def: \u540c\u4e09\u6570\u4e4b\u548c\u7684\u601d\u8def, \u4e3b\u8981\u5173\u6ce8\u53bb\u91cd:</p> <ul> <li>\u786e\u5b9a\u7b2c 1 \u4e2a\u6570 \\(nums[i]\\) \u4e4b\u540e: <ul> <li>\u5982\u679c \\(nums[i] + nums[-1] + nums[-2] + nums[-3] &lt; target\\), \u90a3\u4e48\u5269\u4e0b\u7684\u4e09\u4e2a\u6570\u65e0\u8bba\u5982\u4f55\u53d6\u503c, \u56db\u6570\u4e4b\u548c\u4e00\u5b9a\u5c0f\u4e8e target, \u8fdb\u5165\u4e0b\u4e00\u8f6e\u5faa\u73af \\(nums[i+1]\\)\uff1b</li> <li>\u5982\u679c \\(nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] &gt; target\\), \u90a3\u4e48\u5269\u4e0b\u7684\u4e09\u4e2a\u6570\u65e0\u8bba\u5982\u4f55\u53d6\u503c\uff0c\u56db\u6570\u4e4b\u548c\u4e00\u5b9a\u5927\u4e8e target, \u9000\u51fa\u7b2c\u4e00\u91cd\u5faa\u73af.</li> </ul> </li> <li>\u786e\u5b9a\u524d\u4e24\u4e2a\u6570 \\(nums[i]\\) \u548c \\(nums[j]\\) \u4e4b\u540e:<ul> <li>\u5982\u679c \\(nums[i] + nums[j] + nums[-1] + nums[-2] &lt; target\\),  \u90a3\u4e48\u5269\u4e0b\u7684\u4e24\u4e2a\u6570\u65e0\u8bba\u5982\u4f55\u53d6\u503c, \u56db\u6570\u4e4b\u548c\u4e00\u5b9a\u5c0f\u4e8e target, \u8fdb\u5165\u4e0b\u4e00\u8f6e\u5faa\u73af \\(nums[j+1]\\);</li> <li>\u5982\u679c \\(nums[i] + nums[j] + nums[j + 1] + nums[j + 2] &gt; target\\), \u90a3\u4e48\u5269\u4e0b\u7684\u4e24\u4e2a\u6570\u65e0\u8bba\u5982\u4f55\u53d6\u503c, \u56db\u6570\u4e4b\u548c\u4e00\u5b9a\u5927\u4e8e target, \u9000\u51fa\u7b2c\u4e8c\u91cd\u5faa\u73af.</li> </ul> </li> </ul> <pre><code>class Solution:\n    def fourSum(self, nums: List[int], target: int) -&gt; List[List[int]]:\n        # \u6392\u5e8f\n        nums.sort()\n        results = []\n\n        for i in range(len(nums) - 3):\n\n            # \u53bb\u91cd\n            if i &gt; 0 and nums[i] == nums[i - 1]:\n                continue\n            if nums[i] + nums[-1] + nums[-1] + nums[-2] &lt; target:\n                continue\n            if nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] &gt; target:\n                break\n\n            for j in range(i + 1, len(nums) - 2):\n                # \u53bb\u91cd\n                if j &gt; i + 1 and nums[j] == nums[j - 1]: # \u6ce8\u610f j &gt; i + 1 \u8fd9\u4e2a\u6761\u4ef6\n                    continue\n                if nums[i] + nums[j] + nums[-1] + nums[-2] &lt; target:\n                    continue\n                if nums[i] + nums[j] + nums[j + 1] + nums[j + 2] &gt; target:\n                    break\n\n                left, right = j + 1, len(nums) - 1\n                while left &lt; right:\n                    sum_ = nums[i] + nums[j] + nums[left] + nums[right]\n                    if sum_ &lt; target:\n                        left += 1\n                    elif sum_ &gt; target:\n                        right -= 1\n                    else:\n                        results.append([nums[i], nums[j], nums[left], nums[right]])\n                        while left &lt; right and nums[left] == nums[left + 1]:\n                            left += 1\n                        while left &lt; right and nums[right] == nums[right - 1]:\n                            right -= 1\n                        left += 1\n                        right -= 1\n        return results\n</code></pre>"}, {"location": "programming/double_pointers/#31", "title": "31.\u4e0b\u4e00\u4e2a\u6392\u5217", "text": "<p>\u9898\u76ee: \u6574\u6570\u6570\u7ec4\u7684\u4e00\u4e2a \u6392\u5217\u00a0 \u5c31\u662f\u5c06\u5176\u6240\u6709\u6210\u5458\u4ee5\u5e8f\u5217\u6216\u7ebf\u6027\u987a\u5e8f\u6392\u5217\u3002\u6574\u6570\u6570\u7ec4\u7684 \u4e0b\u4e00\u4e2a\u6392\u5217 \u662f\u6307\u5176\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u5b57\u5178\u5e8f\u66f4\u5927\u7684\u6392\u5217\u3002\u66f4\u6b63\u5f0f\u5730\uff0c\u5982\u679c\u6570\u7ec4\u7684\u6240\u6709\u6392\u5217\u6839\u636e\u5176\u5b57\u5178\u987a\u5e8f\u4ece\u5c0f\u5230\u5927\u6392\u5217\u5728\u4e00\u4e2a\u5bb9\u5668\u4e2d\uff0c\u90a3\u4e48\u6570\u7ec4\u7684 \u4e0b\u4e00\u4e2a\u6392\u5217 \u5c31\u662f\u5728\u8fd9\u4e2a\u6709\u5e8f\u5bb9\u5668\u4e2d\u6392\u5728\u5b83\u540e\u9762\u7684\u90a3\u4e2a\u6392\u5217\u3002\u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u5fc5\u987b\u91cd\u6392\u4e3a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\uff0c\u5176\u5143\u7d20\u6309\u5347\u5e8f\u6392\u5217\uff09\u3002\u4f8b\u5982</p> <ul> <li>arr = [1,2,3] \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u662f [1,3,2]\u3002</li> <li>arr = [2,3,1] \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u662f [3,1,2]\u3002</li> <li>arr = [3,2,1] \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u662f [1,2,3]\uff0c\u56e0\u4e3a [3,2,1] \u4e0d\u5b58\u5728\u4e00\u4e2a\u5b57\u5178\u5e8f\u66f4\u5927\u7684\u6392\u5217\u3002</li> </ul> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u51fa nums \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u3002\u5fc5\u987b \u539f\u5730 \u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002</p> <pre><code>class Solution:\n    def nextPermutation(self, nums: List[int]) -&gt; None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        i = len(nums) - 2\n        # Step I: \u4ece\u53f3\u5411\u5de6, \u627e\u5230\u7b2c\u4e00\u4e2a nums[i] &lt; nums[i + 1] \u7684\u5143\u7d20\n        while i &gt; 0 and nums[i] &gt;= nums[i + 1]:\n            i -= 1\n\n        # Corner Case: \u5982\u679c\u6574\u4e2a\u6570\u7ec4\u4e3a\u964d\u5e8f\u6392\u5217, \u90a3\u4e48\u5176\u4e0b\u4e00\u4e2a\u6392\u5217\u5e94\u8be5\u662f\u5347\u5e8f\u6392\u5217\n        if i == 0 and nums[i] &gt; nums[i + 1]:\n            nums.sort()\n            return nums\n\n        # Step II: \u627e\u5230 i~end \u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e nums[i]\u7684\u6570, \u5e76\u4ea4\u6362\n        for k in range(len(nums) - 1, i, -1):\n            if nums[k] &gt; nums[i]:\n                break\n        nums[i], nums[k] = nums[k], nums[i]\n\n        # Step III: nums[i] \u4e4b\u540e\u7684\u6570\u5347\u5e8f\u6392\u5217\n        # nums[i + 1:] = sorted(nums[i + 1:])\n        left, right = i + 1, len(nums) - 1\n        while left &lt; right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        return nums\n</code></pre>"}, {"location": "programming/double_pointers/#42", "title": "42.\u63a5\u96e8\u6c34", "text": "<p>\u9898\u76ee: \u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u5bbd\u5ea6\u4e3a 1 \u7684\u67f1\u5b50\u7684\u9ad8\u5ea6\u56fe\uff0c\u8ba1\u7b97\u6309\u6b64\u6392\u5217\u7684\u67f1\u5b50\uff0c\u4e0b\u96e8\u4e4b\u540e\u80fd\u63a5\u591a\u5c11\u96e8\u6c34\u3002</p>"}, {"location": "programming/double_pointers/#1", "title": "\u65b9\u6cd51: \u52a8\u6001\u89c4\u5212", "text": "<p>\u5bf9\u4e8e\u7d22\u5f15 \\(i\\), \u6c34\u80fd\u8fbe\u5230\u7684\u6700\u5927\u9ad8\u5ea6\u4e3a \\(i\\) \u4e24\u4fa7\u6700\u5927\u9ad8\u5ea6\u7684\u6700\u5c0f\u503c, \u80fd\u63a5\u7684\u96e8\u6c34\u91cf\u4e3a \\(i\\) \u5904\u6c34\u80fd\u8fbe\u5230\u7684\u6700\u5927\u9ad8\u5ea6\u51cf\u53bb \\(height[i]\\)\u3002\u636e\u6b64\u53ef\u91c7\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u8def:  \u521b\u5efa\u4e24\u4e2a\u6570\u7ec4 \\(left\\_max[\\cdot]\\) \u548c \\(right\\_max[\\cdot]\\):</p> <ul> <li>\\(left\\_max[i]\\): \u8868\u793a\u4e0b\u6807 \\(i\\) \u53ca\u5176\u5de6\u4fa7\u7684\u4f4d\u7f6e\u7684\u6700\u5927\u9ad8\u5ea6;</li> <li>\\(right\\_max[i]\\): \u8868\u793a\u4e0b\u6807 \\(i\\) \u53ca\u5176\u53f3\u4fa7\u7684\u6700\u5927\u9ad8\u5ea6.</li> </ul> <p>\u90a3\u4e48\u5728 \\(i\\) \u5904\u80fd\u63a5\u7684\u96e8\u6c34\u91cf\u4e3a \\(min(left\\_max[i], right\\_max[i]) - height[i]\\).</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6: \\(O(n)\\), \u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(n)\\).</p>"}, {"location": "programming/double_pointers/#2", "title": "\u65b9\u6cd52: \u53cc\u6307\u9488", "text": "<p>\u65b9\u6cd52\u662f\u9488\u5bf9\u65b9\u6cd51\u7684\u4f18\u5316. \u7ef4\u62a4\u4e24\u4e2a\u6307\u9488 \\(left\\), \\(right\\) \u4ece\u4e24\u7aef\u5411\u4e2d\u95f4\u9760\u62e2\uff0c\u7ef4\u62a4\u4e24\u4e2a\u53d8\u91cf \\(max_{left}\\) \u548c \\(max_{right}\\) \u5206\u522b\u5b58\u50a8\u4ece\u5de6\u5411\u53f3\u548c\u4ece\u53f3\u5411\u5de6\u7684\u6700\u5927\u503c\u3002</p> <p>\u5f53\u4e24\u4e2a\u6307\u9488\u672a\u76f8\u9047\u65f6,</p> <ul> <li>\u82e5 \\(height[left] &lt; height[right]\\), \u5fc5\u6709 \\(max_{left} &lt; max_{right}\\), \\(left\\) \u5904\u96e8\u6c34\u91cf\u4e3a \\(max_{left} - height[left]\\); </li> <li>\u82e5 \\(height[left] \\geq height[right]\\), \u5fc5\u6709 \\(max_{left} \\geq max_{right}\\), \\(right\\) \u5904\u96e8\u6c34\u91cf\u4e3a \\(max_{right} - height[right]\\).</li> </ul> <p>\u65f6\u95f4\u590d\u6742\u5ea6: \\(O(n)\\), \u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(1)\\).</p>"}, {"location": "programming/double_pointers/#3", "title": "\u65b9\u6cd53: \u5355\u8c03\u6808", "text": "<p>\u5355\u8c03\u6808\u9002\u7528\u573a\u666f: \u6c42\u89e3 \u7b2c\u4e00\u4e2a\u5927\u4e8e xxx \u6216\u8005 \u7b2c\u4e00\u4e2a\u5c0f\u4e8e xxx. \u65b9\u6cd5\u8bba\u90e8\u5206\u53ef\u4ee5\u53c2\u8003 \u5355\u8c03\u6808</p> \u65b9\u6cd51: \u52a8\u6001\u89c4\u5212\u65b9\u6cd52: \u53cc\u6307\u9488\u65b9\u6cd53: \u5355\u8c03\u6808 <pre><code>def trap(self, height: List[int]) -&gt; int:\n    # \u4ece\u5de6\u4fa7\u8ba1\u7b97\u6700\u5927\u9ad8\u5ea6\n    left_max = [0] * len(height)\n    left_max[0] = height[0]\n    for i in range(1, len(height)):\n        left_max[i] = max(height[i], left_max[i - 1])\n\n    # \u4ece\u53f3\u4fa7\u8ba1\u7b97\u6700\u5927\u9ad8\u5ea6\n    right_max = [0] * len(height)\n    right_max[-1] = height[-1]\n    for i in range(len(height) - 2, -1, -1):\n        right_max[i] = max(height[i], right_max[i + 1])\n\n    # \u8ba1\u7b97 i \u5904\u641c\u96c6\u7684\u96e8\u6c34\u5e76\u7d2f\u52a0\u5230\u6700\u7ec8\u7ed3\u679c\n    res = 0\n    for i in range(len(height)):\n        res += min(left_max[i], right_max[i]) - height[i]\n    return res\n</code></pre> <pre><code>def trap(self, height: List[int]) -&gt; int:\n    left, right = 0, len(height) - 1\n    left_max, right_max = 0, 0\n\n    ans = 0\n    while left &lt; right:\n        left_max = max(left_max, height[left])\n        right_max = max(right_max, height[right])\n        if height[left] &lt; height[right]:\n            ans += left_max - height[left]\n            left += 1\n        else:\n            ans += right_max - height[right]\n            right -= 1\n    return ans\n</code></pre> <pre><code>def trap(self, height: List[int]) -&gt; int:\n    stack = [0]  # \u4fdd\u5b58\u7d22\u5f15\n    ans = 0\n    for i in range(1, len(height)):\n        while len(stack) and height[i] &gt; height[stack[-1]]:\n            top = stack.pop()\n            if not stack:\n                break\n            left = stack[-1]\n            # \u8ba1\u7b97\u533a\u57df\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\n            w = i - left - 1\n            h = min(height[left], height[i]) - height[top]\n            ans += w * h\n        stack.append(i)\n    return ans\n</code></pre>"}, {"location": "programming/dynamic_programming/", "title": "\u52a8\u6001\u89c4\u5212", "text": ""}, {"location": "programming/dynamic_programming/#_1", "title": "\u57fa\u672c\u65b9\u6cd5", "text": "<p>\u52a8\u6001\u89c4\u5212\u7684\u7684\u56db\u4e2a\u89e3\u9898\u6b65\u9aa4\u662f\uff1a</p> <ul> <li>\u5b9a\u4e49\u5b50\u95ee\u9898: DP \u6570\u7ec4\u53ca\u4e0b\u6807\u7684\u542b\u4e49</li> <li>DP \u6570\u7ec4\u521d\u59cb\u5316</li> <li>\u5199\u51fa\u5b50\u95ee\u9898\u7684\u9012\u63a8\u5173\u7cfb</li> <li>\u786e\u5b9a DP \u6570\u7ec4\u7684\u8ba1\u7b97\u987a\u5e8f</li> <li>\u7a7a\u95f4\u4f18\u5316\uff08\u53ef\u9009\uff09</li> </ul>"}, {"location": "programming/dynamic_programming/#_2", "title": "\u76f8\u5173\u9898\u76ee", "text": "\u9898\u76ee \u96be\u5ea6 \u6807\u7b7e \u2705 5.\u6700\u957f\u56de\u6587\u5b50\u4e32 M 10.\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d H \u2705 32.\u6700\u957f\u7684\u6709\u6548\u62ec\u53f7 H stack 72 \u2705 53.\u6700\u5927\u5b50\u6570\u7ec4\u548c M \u2705 62.\u4e0d\u540c\u8def\u5f84 M \u2705 63.\u4e0d\u540c\u8def\u5f84 II M \u2705 64.\u6700\u5c0f\u8def\u5f84\u548c M \u270570.\u722c\u697c\u68af E 72.\u7f16\u8f91\u8ddd\u79bb H \u270585.\u6700\u5927\u77e9\u5f62 H 96.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 M \u2705 121.\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a E 139.\u5355\u8bcd\u62c6\u5206 M \u2705 152.\u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4 M \u2705 198.\u6253\u5bb6\u52ab\u820d M \u2705 221.\u6700\u5927\u6b63\u65b9\u5f62 M \u2705 279.\u5b8c\u5168\u5e73\u65b9\u6570 M \u2705 300.\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 M \u2705 309.\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f M 312.\u6233\u6c14\u7403 H \u2705 322.\u96f6\u94b1\u5151\u6362 M BFS 337.\u6253\u5bb6\u52ab\u820dIII M DFS, binary-tree 338.\u6bd4\u7279\u4f4d\u8ba1\u6570 E \u2705 416.\u5206\u5272\u7b49\u548c\u5b50\u96c6 M knapsack \u2705 494.\u76ee\u6807\u548c M knapsack, backtracking 647.\u56de\u6587\u5b50\u4e32 M 96 1143.\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 M"}, {"location": "programming/dynamic_programming/#_3", "title": "\u80cc\u5305\u95ee\u9898", "text": "<p>\u80cc\u5305\u95ee\u9898 (knapsack problem) \u662f\u4e00\u79cd*\u7ec4\u5408\u4f18\u5316*\u7684 *NP \u5b8c\u5168*\u95ee\u9898\u3002</p>"}, {"location": "programming/dynamic_programming/#_4", "title": "\u5efa\u6a21", "text": "<p>\u5047\u5b9a\u6211\u4eec\u6709 \\(N\\) \u79cd\u7269\u54c1, \u6bcf\u79cd\u7269\u54c1\u7684\u91cd\u91cf\u4e3a \\(w_i\\), \u4ef7\u683c\u4e3a \\(p_i\\), \u80cc\u5305\u6240\u80fd\u88c5\u8f7d\u7684\u6700\u5927\u91cd\u91cf\u4e3a \\(W\\), \\(x_i\\) \u662f\u88c5\u5165\u80cc\u5305\u7684\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u7684\u4e2a\u6570, \u516c\u5f0f\u5316\u8868\u8ff0</p> <ul> <li>0-1 \u80cc\u5305\u95ee\u9898: \u6bcf\u79cd\u7269\u54c1\u53ea\u80fd\u9009\u62e9 0 \u4e2a\u6216\u8005 1 \u4e2a</li> </ul> \\[ \\max{\\sum_{i=1}^N} x_i  p_i \\quad s.t. \\; \\sum_{i=1}^N x_i  w_i \\leq W, \\; x_i \\in \\{0, 1\\} \\] <ul> <li>\u6709\u754c\u80cc\u5305\u95ee\u9898: \u53c8\u79f0\u591a\u91cd\u80cc\u5305\u95ee\u9898, \u6bcf\u79cd\u7269\u54c1\u6700\u591a\u53ea\u80fd\u9009\u62e9 \\(b_j\\) \u4e2a</li> </ul> \\[ \\max{\\sum_{i=1}^N} x_i  p_i \\quad s.t. \\; \\sum_{i=1}^N x_i  w_i \\leq W, \\; x_i \\in \\{0, 1, \\cdots , b_j\\} \\] <ul> <li>\u65e0\u754c\u80cc\u5305\u95ee\u9898: \u53c8\u79f0\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff0c\u4e0d\u9650\u5b9a\u6bcf\u79cd\u7269\u54c1\u7684\u6570\u91cf</li> </ul> \\[ \\max{\\sum_{i=1}^N} x_i  p_i \\quad s.t. \\; \\sum_{i=1}^N x_i  w_i \\leq W, \\; x_i \\in \\{0, 1, \\cdots , \\infty \\} \\]"}, {"location": "programming/dynamic_programming/#0-1", "title": "0-1 \u80cc\u5305", "text": "<p>\u5b9a\u4e49\u5b50\u95ee\u9898</p> <p>\\(dp[i][v]\\): \u8868\u793a\u4ece\u7d22\u5f15\u4e3a \\(0 \\sim i\\) \u7684\u7269\u54c1\u4e2d\u4efb\u610f\u53d6\u7269\u54c1, \u653e\u8fdb\u5bb9\u91cf\u4e3a \\(v\\) \u7684\u80cc\u5305\u4ef7\u503c\u603b\u548c\u7684\u6700\u5927\u503c.</p> <p>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b</p> <p>\u5bf9\u4e8e\u7b2c \\(i\\) \u4e2a\u7269\u54c1\uff0c\u6709\u53d6\u548c\u4e0d\u53d6\u4e24\u79cd\u72b6\u6001, \u4ee5\u4e0b\u5206\u522b\u8ba8\u8bba\uff1a</p> \\[ dp[i][v]=\\left\\{     \\begin{aligned}         &amp;dp[i-1][v - w_i] + p_i, &amp;\u53d6 \\\\         &amp;dp[i-1][v]            , &amp;\u4e0d\u53d6     \\end{aligned}     \\right. \\] <p>\u7efc\u4e0a\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a</p> \\[dp[i][v] = \\max(dp[i-1][v], dp[i-1][v-w_i] + p_i)\\] <p>\u7a7a\u95f4\u4f18\u5316</p> <p>\u7a7a\u95f4\u4f18\u5316\u662f\u5c06\u4e8c\u7ef4 DP \u6570\u7ec4\u964d\u4e3a\u4e00\u7ef4\u3002\u5b9a\u4e49 \\(dp[v]\\) \u8868\u793a\u5bb9\u91cf\u4e3a \\(v\\) \u7684\u80cc\u5305\u6240\u88c5\u7269\u54c1\u4ef7\u503c\u603b\u548c\uff0c\u5219\u5bf9\u5e94\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a</p> \\[dp[v] = \\max(dp[v], dp[v-w_i] + p_i)\\] <p>\u867d\u7136\u4e0a\u5f0f\u7684 \u201c=\u201d \u5de6\u53f3\u4e24\u8fb9\u90fd\u6709 \\(dp[v]\\), \u4f46\u542b\u4e49\u5e76\u4e0d\u76f8\u540c\uff0c\u7b49\u53f7\u5de6\u4fa7\u7684 \\(dp[v]\\) \u6307\u7684\u662f\u5f53\u524d\u8f6e\uff0c\u7b49\u53f7\u53f3\u4fa7\u7684 \\(dp[v]\\) \u5176\u5b9e\u662f\u4e0a\u4e00\u8f6e\u7684\u7ed3\u679c\u3002\u6240\u4ee5\u66f4\u51c6\u786e\u7684\u63cf\u8ff0\u5e94\u8be5\u662f</p> \\[dp[v]^{(i)} = \\max(dp[v]^{(i-1)}, dp[v-w_i]^{(i-1)} + p_i)\\] <p>\u5982\u679c\u662f\u987a\u5e8f\u904d\u5386, \u5219\u7b49\u53f7\u53f3\u4fa7\u7684 \\(dp[v]\\) \u5c31\u53d8\u6210\u4e86\u5f53\u524d\u8f6e\u7684\u503c, \u4e0d\u7b26\u5408\u3002\u800c\u91c7\u7528 \u5012\u5e8f\u904d\u5386 \u5219\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002</p> \u4e8c\u7ef4 DP\u4e00\u7ef4 DP <pre><code>def zero_one_knapsack_2d(weights, prices, W):\n    \"\"\"\n    Args:\n        weights (list): weights of goods\n        prices (list): prices of goods\n        W (int): the maximum capacity of knapsack\n\n    Returns:\n        int : the maximum value of things in knapsack\n    \"\"\"\n    m = len(weights)\n    dp = np.zeros((m + 1, W + 1))  # \u7b2c1\u884c, \u7b2c1\u5217\u90fd\u521d\u59cb\u5316\u4e3a 0 \u65b9\u4fbf\u8ba1\u7b97\n    for i in range(m):             # \u7269\u54c1\n        for v in range(W + 1):     # \u80cc\u5305\u5bb9\u91cf\n            if weights[i] &gt; v:\n                dp[i + 1][v] = dp[i][v]\n            else:\n                dp[i + 1][v] = max(dp[i][v], dp[i][v - weights[i]] + prices[i])\n    return dp[-1, -1]\n</code></pre> <pre><code>def zero_one_knapsack_1d(weights, prices, W):\n    \"\"\"\n    Args:\n        weights (list): weights of goods\n        prices (list): prices of goods\n        W (int): the maximum capacity of knapsack\n\n    Returns:\n        int : the maximum value of things in knapsack\n    \"\"\"\n    m = len(weights)\n    dp = np.zeros(W + 1)\n    for i in range(m):  # \u7269\u54c1\n        for v in range(W, weights[i] - 1, -1):  # \u80cc\u5305\u5bb9\u91cf, \u5012\u5e8f\u904d\u5386\n            dp[v] = max(dp[v], dp[v - weights[i]] + prices[i])\n    return dp[-1]\n</code></pre>"}, {"location": "programming/dynamic_programming/#416", "title": "416.\u5206\u5272\u7b49\u548c\u5b50\u96c6", "text": "<p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a \u53ea\u5305\u542b\u6b63\u6574\u6570\u7684 \u975e\u7a7a \u6570\u7ec4nums\uff0c\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u4e24\u4e2a\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u5143\u7d20\u548c\u76f8\u7b49\u3002</p> <p>\u9898\u76ee\u8f6c\u5316\u4e3a: \u4ece nums \u4e2d\u62bd\u53d6\u4e00\u4e9b\u5143\u7d20\uff0c\u4f7f\u5176\u548c\u4e3a \\(\\frac{1}{2}\\sum_i(nums[i])\\).</p> <p>\u6539\u9898\u76ee\u6709\u4e24\u79cd\u5904\u7406\u65b9\u6cd5, \u5176\u5dee\u5f02\u5728\u4e8e\u5b9a\u4e49\u52a8\u6001\u89c4\u5212\u6570\u7ec4\u72b6\u6001\u7684\u542b\u4e49\u4e0d\u540c\u3002</p>"}, {"location": "programming/dynamic_programming/#1", "title": "\u65b9\u6cd5 1", "text": "<p>\\(dp[i][j]\\): \u4ece\u7d22\u5f15\u4e3a \\(0 \\sim i\\) \u4e2d\u7684\u62bd\u53d6\u7684\u5143\u7d20\u548c, \u8fd9\u6837\u8f6c\u5316\u4e3a\u6807\u51c6\u7684\u80cc\u5305\u95ee\u9898\u3002</p> <pre><code>bool canPartition_v0(vector&lt;int&gt;&amp; nums) {\n  int sum = 0;\n  for (int num:nums) sum += num;\n\n  bool flag = false;\n  if (sum % 2) {\n    return flag;\n  }\n\n  int target = sum / 2;\n  vector&lt;int&gt; dp(target + 1, 0);\n  for (int i = 0; i &lt; nums.size(); i++) {\n    for (int j = target; j &gt;= nums[i]; --j) {\n      dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);\n    }\n  }\n  if (dp[target] == target) {\n    flag = true;\n  }\n  return flag;\n}\n</code></pre>"}, {"location": "programming/dynamic_programming/#2", "title": "\u65b9\u6cd52", "text": "<p>\\(dp[i][j]\\): \u4ece\u7d22\u5f15\u4e3a \\(0 \\sim i\\) \u4e2d\u7684\u62bd\u53d6\u7684\u5143\u7d20\u4e4b\u548c\u6070\u597d\u7b49\u4e8e \\(j\\) \u7684\u72b6\u6001\u3002</p> \\[ dp[i][j] = \\left\\{     \\begin{aligned}     true, &amp;\\sum_k nums[k] = j \\\\     false, &amp;\\sum_k nums[k] \\neq j     \\end{aligned}     \\right. \\] \u4e8c\u7ef4DP\u4e00\u7ef4DP <pre><code>bool canPartition(vector&lt;int&gt; nums) {\n  // \u95ee\u9898\u8f6c\u5316\n  int sum = 0;\n  for (int num:nums) sum += num;\n  if (sum % 2) return false;\n  int target = sum / 2;\n  // dp \u6570\u7ec4\u521d\u59cb\u5316\n  vector&lt;vector&lt;bool&gt;&gt; dp(nums.size(), vector&lt;bool&gt;(target + 1, false));\n  for (int i = 0; i &lt; nums.size(); i++) {\n      dp[i][0] = true;\n  }\n  dp[0][nums[0]] = true;\n  // \u72b6\u6001\u8f6c\u79fb\n  for (int i = 1; i &lt; nums.size(); i++) {\n      for(int j = 1; j &lt;= target; j++) {\n          if (j &lt; nums[i]) {\n              dp[i][j] = dp[i - 1][j];\n          } else {\n              dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i]];\n          }\n      }\n  }\n  return dp[nums.size() - 1][target];\n}\n</code></pre> <pre><code>bool canPartition(vector&lt;int&gt; nums) {\n  int sum = 0;\n  for (int num:nums) sum += num;\n  if (sum % 2) return false;\n  int target = sum / 2;\n\n  // dp \u6570\u7ec4\u521d\u59cb\u5316\n  vector&lt;bool&gt; dp(target + 1, false);\n  dp[0] = true;\n  if (nums[0] &lt;= target) {\n    dp[nums[0]] = true;\n  }\n  // \u72b6\u6001\u66f4\u65b0\n  for (int i = 1; i &lt; nums.size(); i++) {\n    for (int j = target; j &gt;= nums[i]; j--) {\n      dp[j] = dp[j] | dp[j - nums[i]];\n    }\n  }\n}\n</code></pre>"}, {"location": "programming/dynamic_programming/#494", "title": "494.\u76ee\u6807\u548c", "text": "<p>\u9898\u76ee: \u5411\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u524d\u6dfb\u52a0 '+' \u6216 '-' \uff0c\u7136\u540e\u4e32\u8054\u8d77\u6240\u6709\u6574\u6570\uff0c\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u8868\u8fbe\u5f0f. \u8fd4\u56de\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u65b9\u6cd5\u6784\u9020\u7684\u3001\u8fd0\u7b97\u7ed3\u679c\u7b49\u4e8e target \u7684\u4e0d\u540c \u8868\u8fbe\u5f0f \u7684\u6570\u76ee\u3002</p> <p>\u9898\u76ee\u8f6c\u5316\u4e3a: \u4ece nums \u4e2d\u62bd\u53d6\u4e00\u4e9b\u5143\u7d20\uff0c\u4f7f\u5176\u548c\u4e3a \\(\\frac{1}{2}\\left(\\sum_i(nums[i]) - target\\right)\\).</p> <p>\u72b6\u6001\u5b9a\u4e49\u4e0e\u8f6c\u79fb\u65b9\u7a0b:</p> <p>\u4e8c\u7ef4</p> <ul> <li>\\(dp(i, j)\\): \u4ece 0~i \u4e2d\u62bd\u53d6\u5143\u7d20\u548c\u4e3a j \u7684\u65b9\u6848\u6570</li> <li>\\(dp(i, j) = dp(i - 1, j) + dp(i-1, j - nums[i])\\)</li> </ul> <p>\u4e00\u7ef4</p> <ul> <li>\\(dp(j)\\): \u4ece 0~i \u4e2d\u62bd\u53d6\u5143\u7d20\u548c\u4e3a j \u7684\u65b9\u6848\u6570</li> <li>\\(dp(j) = dp(j) + dp(j - nums[i])\\)</li> </ul> \u4e8c\u7ef4 DP\u4e00\u7ef4 DP <pre><code>int findTargetSumWays(vector&lt;int&gt;&amp; nums, int target) {\n  /* dp[i][j]: \u4ece 0~i \u4e2d\u62bd\u53d6\u5143\u7d20\u548c\u4e3a j \u7684\u65b9\u6848\u6570 */\n  int sum = 0;\n  for (int num : nums) sum += num;\n  if ((sum - target) % 2 || sum &lt; target) return 0;\n  target = (sum - target) / 2;\n\n  vector&lt;vector&lt;int&gt;&gt; dp(nums.size() + 1, vector&lt;int&gt;(target + 1, 0));\n  dp[0][0] = 1;\n\n  for (int i = 0; i &lt; nums.size(); i++) {\n    for (int j = 0; j &lt;= target; j++) {\n      if (nums[i] &gt; j) {\n        dp[i + 1][j] = dp[i][j];\n      } else {\n        dp[i + 1][j] = dp[i][j] + dp[i][j - nums[i]];\n      }\n    }\n  }\n  // get nums of method\n  return dp[nums.size()][target];\n}\n</code></pre> <pre><code>int findTargetSumWays(vector&lt;int&gt;&amp; nums, int target) {\n  /* dp[j]: \u4ece 0~i \u4e2d\u62bd\u53d6\u5143\u7d20\u548c\u4e3a j \u7684\u65b9\u6848\u6570 */\n  int sum = 0;\n  for (int num : nums) sum += num;\n  if ((sum - target) % 2 || sum &lt; target) return 0;\n  target = (sum - target) / 2;\n\n  vector&lt;int&gt; dp(target + 1, 0);\n  dp[0] = 1;\n  for (int num : nums) {\n    for (int j = target; j &gt;= num; j--) {\n      dp[j] = dp[j] + dp[j - num];\n    }\n  }\n  return dp[target];\n}\n</code></pre>"}, {"location": "programming/dynamic_programming/#474", "title": "474.\u4e00\u548c\u96f6", "text": ""}, {"location": "programming/dynamic_programming/#1049ii", "title": "1049.\u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u91cd\u91cfII", "text": ""}, {"location": "programming/dynamic_programming/#_5", "title": "\u5b8c\u5168\u80cc\u5305", "text": ""}, {"location": "programming/dynamic_programming/#_6", "title": "\u6734\u7d20\u89e3\u6cd5", "text": "<p>\u7531\u4e8e 0-1 \u80cc\u5305\u5bf9\u4e8e 1 \u4e2a\u7269\u54c1\u6709\u53d6\u548c\u4e0d\u53d6\u4e24\u79cd\u72b6\u6001\uff0c\u800c\u5b8c\u5168\u80cc\u5305\u6709\u53d6 \\(0, 1, ..., \\frac{v}{w[i]}\\) \u591a\u79cd\u53d6\u6cd5, \u5219\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539 0-1 \u80cc\u5305\u72b6\u6001\u65b9\u7a0b\u4e3a</p> <pre><code>def unbounded_knapsack_naive(weights, prices, W):\n    \"\"\"\n    Args:\n        weights (list): weights of goods\n        prices (list): prices of goods\n        W (int): the maximum capacity of knapsack\n\n    Returns:\n        int : the maximum value of things in knapsack\n    \"\"\"\n    m = len(weights)\n    dp = np.zeros(W + 1)\n    for i in range(m):  # \u7269\u54c1\n        for v in range(W, weights[i] - 1, -1):  # \u80cc\u5305\u5bb9\u91cf, \u5012\u5e8f\u904d\u5386\n            for k in range(v // weights[i] + 1):  # \u53d6 {0, 1, ..., v / w[i]} \u4e2a\u7269\u54c1\n                dp[v] = max(dp[v], dp[v - k * weights[i]] + k * prices[i])\n    return dp[-1]\n</code></pre> <p>\u7136\u800c, \u4e0a\u8ff0\u65b9\u6cd5\u9700\u8981\u4e09\u91cd\u5faa\u73af\uff0c\u6548\u7387\u6bd4\u8f83\u4f4e\u3002\u7531\u4e8e\u5b8c\u5168\u80cc\u5305\u7684\u540c\u4e00\u4e2a\u7269\u54c1\u53ef\u4ee5\u62ff\u53d6\u591a\u4e2a\uff0c\u5bf9\u6bd4 0-1 \u80cc\u5305\u548c\u5b8c\u5168\u80cc\u5305 2D \u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b</p> \\[ \\begin{aligned} 0-1\u80cc\u5305: &amp;dp[i][v] = \\max(dp[i-1][v], dp[i-1][v-w_i] + p_i) \\\\ \u5b8c\u5168\u80cc\u5305: &amp;dp[i][v] = \\max(dp[i-1][v], dp[i][v-w_i] + p_i) \\end{aligned} \\] <p>\u5b8c\u5168\u80cc\u5305\u7684\u4e8c\u7ef4\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u53ef\u4ee5\u538b\u7f29\u6210\u4e00\u7ef4, \u5176\u5f62\u5f0f\u8ddf 0-1 \u80cc\u5305\u5b8c\u5168\u76f8\u540c, \u4f46\u542b\u4e49\u6709\u5dee\u522b\u3002\u5177\u4f53\u4f53\u73b0\u5728\u904d\u5386\u987a\u5e8f\u662f \u987a\u5e8f\u904d\u5386.</p> <pre><code>def unbounded_knapsack(weights, prices, W):\n    \"\"\"\n    Args:\n        weights (list): weights of goods\n        prices (list): prices of goods\n        W (int): the maximum capacity of knapsack\n\n    Returns:\n        int : the maximum value of things in knapsack\n    \"\"\"\n    m = len(weights)\n    dp = np.zeros(W + 1)\n    for i in range(m):  # \u7269\u54c1\n        for v in range(weights[i], W + 1):  # \u80cc\u5305\u5bb9\u91cf, \u987a\u5e8f\u904d\u5386\n            dp[v] = max(dp[v], dp[v - weights[i]] + prices[i])\n    return dp[-1]\n</code></pre>"}, {"location": "programming/dynamic_programming/#279", "title": "279.\u5b8c\u5168\u5e73\u65b9\u6570", "text": "<p>\u5b9a\u4e49 DP \u6570\u7ec4: \\(dp(i, j)\\) \u6216\u8005 \\(dp(j)\\) \u8868\u793a\u4ece\u7d22\u5f15\u4e3a 0~i \u4e2d\u62bd\u53d6\u5143\u7d20\u7684\u5e73\u65b9\u548c\u4e3a j \u7684\u6700\u5c11\u6570\u91cf.</p> \u4e8c\u7ef4DP\u4e00\u7ef4DP <pre><code>int numSquares(int n) {\n  // dp[i][j]: \u4ece\u7d22\u5f15\u4e3a 0~i \u4e2d\u62bd\u53d6\u5143\u7d20\u7684\u5e73\u65b9\u548c\u4e3a j \u7684\u6700\u5c11\u6570\u91cf\n  // \u95ee\u9898\u8f6c\u5316\u4e3a\u4ece nums \u4e2d\u62bd\u53d6\u5143\u7d20 (\u5b8c\u5168\u5e73\u65b9\u6570) \n\n  int target = sqrt(n);\n  vector&lt;int&gt; nums;\n  for (int t = 1; t &lt;= target; t++) {\n    nums.push_back(t * t);\n  }\n\n  // \u521d\u59cb\u5316: \u5143\u7d20 1 \u5bf9\u5e94\u7684\u884c\u521d\u59cb\u5316\u4e3a 0~n\n  vector&lt;vector&lt;int&gt;&gt; dp(nums.size(), vector&lt;int&gt;(n + 1));\n  for (int k = 0; k &lt;= n; k++) dp[0][k] = k;\n\n  // \u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\n  for (int i = 1; i &lt; nums.size(); i++) {\n    for (int j = 0; j &lt;= n; j++) {\n      if (j &gt;= nums[i]) {\n        dp[i][j] = min(dp[i - 1][j], dp[i][j - nums[i]] + 1);\n      } else {\n        dp[i][j] = dp[i - 1][j];\n      }\n    }\n  }\n  return dp[nums.size() - 1][n];\n}\n</code></pre> <pre><code>int numSquares(int n) {\n  int target = sqrt(n);\n  vector&lt;int&gt; nums;\n  for (int t = 1; t &lt;= target; t++) {\n    nums.push_back(t * t);\n  }\n\n  // \u521d\u59cb\u5316\n  vector&lt;int&gt; dp(n + 1);\n  for (int i = 0; i &lt; dp.size(); i++) dp[i] = i;\n\n  // \u66f4\u65b0\u72b6\u6001\n  for (int num : nums) {\n    for (int j = num; j &lt;= n; j++) {\n      dp[j] = min(dp[j], dp[j - num] + 1);\n    }\n  }\n  return dp[n];\n}\n</code></pre>"}, {"location": "programming/dynamic_programming/#322", "title": "322.\u96f6\u94b1\u5151\u6362", "text": "<ul> <li>dp[j]: \u4ece\u524d i \u79cd\u786c\u5e01\u4e2d\u7ec4\u6210\u91d1\u989d j \u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\uff1b</li> <li>\u72b6\u6001\u8f6c\u79fb: dp[j] = min(dp[j], dp[j - coins[i]] + 1); </li> </ul> <pre><code>int coinChange(vector&lt;int&gt;&amp; coins, int amount) {\n  vector&lt;long long&gt; dp(amount + 1, INT_MAX);\n  dp[0] = 0;\n  for (int coin : coins) {\n    for (int i = coin; i &lt;= amount; i++) {\n      dp[i] = min(dp[i], dp[i - coin] + 1);\n    }\n  }\n  return dp[amount] &gt; amount ? -1 : dp[amount];\n}\n</code></pre>"}, {"location": "programming/dynamic_programming/#377iv", "title": "377.\u7ec4\u5408\u603b\u548c\u2163", "text": ""}, {"location": "programming/dynamic_programming/#_7", "title": "\u591a\u91cd\u80cc\u5305", "text": "<p>\u6838\u5fc3: \u4e8c\u8fdb\u5236\u4f18\u5316</p>"}, {"location": "programming/dynamic_programming/#_8", "title": "\u80a1\u7968\u95ee\u9898", "text": "<p>Leetcode \u4e0a\u80a1\u7968\u4e70\u5356\u76f8\u5173\u7684\u95ee\u9898\u6709:</p> <ul> <li>121.\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a</li> <li>122.\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II</li> <li>123.\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III</li> <li>188.\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a IV</li> <li>309.\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f</li> <li>714.\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39</li> </ul> <p>\u8be6\u7ec6\u7684\u89e3\u6cd5\u53c2\u8003\u4e86 \u4e00\u4e2a\u65b9\u6cd5\u56e2\u706d LEETCODE \u80a1\u7968\u4e70\u5356\u95ee\u9898.</p> <p>\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a IV \u662f\u8be5\u7cfb\u5217\u9898\u76ee\u7684\u4e00\u822c\u5f62\u5f0f\uff0c\u5176\u4ed6\u9898\u76ee\u53ef\u4ee5\u6539\u6210\u662f\u8be5\u9898\u7684\u7279\u6b8a\u5f62\u5f0f\u3002\u4ee5\u4e0b\u7684\u8ba8\u8bba\u90fd\u57fa\u4e8e\u8be5\u9898\u76ee\u3002</p> <p>\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0prices \uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u00a0prices[i] \u662f\u4e00\u652f\u7ed9\u5b9a\u7684\u80a1\u7968\u5728\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210 k \u7b14\u4ea4\u6613\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</p> <p>\u7ea6\u675f\u6761\u4ef6</p> <ul> <li>\u53ea\u6709 \\(0\\sim N\\) \u5929\u7684\u80a1\u7968\u4ef7\u683c\uff1b</li> <li>\u8d2d\u4e70\u524d\u5fc5\u987b\u4e0d\u6301\u6709\u80a1\u7968\uff0c\u5356\u51fa\u524d\u5fc5\u987b\u6301\u6709\u80a1\u7968\uff1b</li> <li>\u6700\u591a\u5b8c\u6210 \\(K\\) \u7b14\u8f83\u6613.</li> </ul> <p>\u72b6\u6001\u5b9a\u4e49</p> <p>\\(dp[i][k][j]\\) \u8868\u793a\u7b2c \\(i\\) \u5929\u6536\u5e02\u540e\u5b8c\u6210\u6700\u591a\u8fdb\u884c \\(k\\) \u6b21\u4ea4\u6613\u83b7\u5f97\u7684\u6700\u5927\u6536\u76ca\u3002 \u5176\u4e2d \\(j \\in \\{0, 1\\}\\), \\(j=0\\) \u8868\u793a\u4e0d\u6301\u6709\u80a1\u7968\uff0c\\(j=1\\) \u8868\u793a\u6301\u6709\u80a1\u7968\u3002</p> <p>\u56e0\u6b64, \\(dp[n][k][0]\\) \u4e3a\u6700\u540e\u4e00\u5929\u6700\u591a\u4ea4\u6613 \\(K\\) \u6b21\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\u3002</p> <p>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b</p> <p>\u4e3a\u4e86\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\uff0c\u67d0\u5929\u7684\u6301\u6709\u72b6\u6001\u8f6c\u79fb\u56fe\u5982\u4e0b</p> <p></p> \\[ \\begin{aligned} dp[i][k][0] &amp;= \\max(dp[i - 1][k][0], dp[i - 1][k][1] + prices[i]) \\\\ dp[i][k][1] &amp;= \\max(dp[i - 1][k][1], dp[i - 1][k-1][0] - prices[i]) \\end{aligned} \\] <p>\u521d\u59cb\u5316</p> <ul> <li>\\(dp[0][...][0] = 0\\)</li> <li>\\(dp[...][0][0] = 0\\)</li> <li>\\(dp[0][...][1] = -inf\\)</li> <li>\\(dp[...][0][1] = -inf\\)</li> </ul> <pre><code>def maxProfit(self, k: int, prices: List[int]) -&gt; int:\n    import numpy as np\n\n    MAX_VALUE = 0xFFFFFFFFFFFFFFFF\n    n = len(prices)\n\n    # initialize\n    dp = np.zeros((n + 1, k + 1, 2), dtype=int)\n    dp[0, :, 0] = 0\n    dp[:, 0, 0] = 0\n    dp[0, :, 1] = -MAX_VALUE\n    dp[:, 0, 1] = -MAX_VALUE\n\n    # update status\n    for i in range(1, n + 1):\n        price = prices[i - 1]\n        for k in range(1, k + 1):\n            dp[i, k, 0] = max(dp[i - 1, k, 0], dp[i - 1, k, 1] + price)\n            dp[i, k, 1] = max(dp[i - 1, k, 1], dp[i - 1, k - 1, 0] - price)\n    return int(dp[n][k][0])\n</code></pre> <p>\u7531\u4e0a\u53ef\u4ee5\u770b\u5230\uff0c\u53ea\u8981\u72b6\u6001\u5b9a\u4e49\u6e05\u695a\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u548c\u4ee3\u7801\u53d8\u5f97\u76f8\u5f53\u4f18\u96c5.</p>"}, {"location": "programming/dynamic_programming/#122", "title": "122.\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II", "text": "<p>\u9898\u76ee: </p> <p>\u6839\u636e\u4e0a\u8ff0\u6a21\u677f, \u4ea4\u6613\u6b21\u6570 \\(k \\rightarrow \\inf\\), \u5219\u6709 \\(k \\approx k-1\\), \u4ece\u800c\u53ef\u4ee5\u6d88\u6389 k \u8fd9\u4e00\u7ef4\u3002</p> <pre><code>def maxProfit(self, prices: List[int]) -&gt; int:\n    import numpy as np\n\n    MAX_VALUE = 0xFFFFFFFFFFFFFFF\n    n = len(prices)\n\n    # initialize\n    dp = np.zeros((n + 1, 2), dtype=int)\n    dp[0, 0] = 0\n    dp[:, 0] = 0\n    dp[0, 1] = -MAX_VALUE\n    dp[:, 1] = -MAX_VALUE\n\n    # update status\n    for i in range(1, n + 1):\n        price = prices[i - 1]\n        dp[i, 0] = max(dp[i - 1, 0], dp[i - 1, 1] + price)\n        dp[i, 1] = max(dp[i - 1, 1], dp[i - 1, 0] - price)\n    return int(dp[n, 0])\n</code></pre>"}, {"location": "programming/dynamic_programming/#309", "title": "309.\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f", "text": "<p>\u672c\u9898\u5728 122.\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II \u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u51bb\u7ed3\u671f 1 \u5929, \u4ee3\u7801\u552f\u4e00\u7684\u5dee\u522b\u5982\u9ad8\u4eae\u884c\u6240\u793a\u3002</p> <pre><code>def maxProfit(self, prices: List[int]) -&gt; int:\n    import numpy as np\n\n    MAX_VALUE = 0xFFFFFFFFFFFFFFF\n    n = len(prices)\n\n    # initialize\n    dp = np.zeros((n + 1, 2), dtype=int)\n    dp[0, 0] = 0\n    dp[:, 0] = 0\n    dp[0, 1] = -MAX_VALUE\n    dp[:, 1] = -MAX_VALUE\n\n    # update status\n    for i in range(1, n + 1):\n        price = prices[i - 1]\n        dp[i, 0] = max(dp[i - 1, 0], dp[i - 1, 1] + price)\n        dp[i, 1] = max(dp[i - 1, 1], (0 if i &lt; 2 else dp[i - 2, 0]) - price)\n    return int(dp[n, 0])\n</code></pre>"}, {"location": "programming/dynamic_programming/#714", "title": "714.\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39", "text": "<p>\u672c\u9898\u5728 122.\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II \u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u624b\u7eed\u8d39\u3002</p> <p>\u6ce8\u610f: \u4e00\u6b21\u5b8c\u6574\u7684\u4ea4\u6613\u7684\u624b\u7eed\u8d39\u6307(\u4e70,\u5356), \u56e0\u6b64\u8981\u4e48\u4e70\u5165\u51cf\u53bb\u624b\u7eed\u8d39, \u8981\u4e48\u5356\u51fa\u51cf\u53bb\u624b\u7eed\u8d39\u3002</p> <p>\u4ee3\u7801\u552f\u4e00\u7684\u5dee\u522b\u5982\u9ad8\u4eae\u884c\u6240\u793a\u3002</p> <pre><code>def maxProfit(self, prices: List[int], fee: int) -&gt; int:\n    import numpy as np\n\n    MAX_VALUE = 0xFFFFFFFFFFFFFFF\n    n = len(prices)\n\n    # initialize\n    dp = np.zeros((n + 1, 2), dtype=int)\n    dp[0, 0] = 0\n    dp[:, 0] = 0\n    dp[0, 1] = -MAX_VALUE\n    dp[:, 1] = -MAX_VALUE\n\n    # update status\n    for i in range(1, n + 1):\n        price = prices[i - 1]\n        dp[i, 0] = max(dp[i - 1, 0], dp[i - 1, 1] + price)\n        dp[i, 1] = max(dp[i - 1, 1], dp[i - 1, 0] - price - fee)\n    return int(dp[n, 0])\n</code></pre>"}, {"location": "programming/dynamic_programming/#_9", "title": "\u6253\u5bb6\u52ab\u820d", "text": ""}, {"location": "programming/dynamic_programming/#_10", "title": "\u5b50\u5e8f\u5217\u95ee\u9898", "text": ""}, {"location": "programming/dynamic_programming/#53", "title": "53.\u6700\u5927\u5b50\u6570\u7ec4\u548c", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u8bf7\u4f60\u627e\u51fa\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002 \u6ce8: \u5b50\u6570\u7ec4\u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u8fde\u7eed\u90e8\u5206\u3002</p> <p>\u793a\u4f8b: <pre><code>\u8f93\u5165\uff1anums = [-2,1,-3,4,-1,2,1,-5,4]\n\u8f93\u51fa\uff1a6\n\u89e3\u91ca\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4 [4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a 6\u3002\n</code></pre></p> <p>\u89e3\u6790</p> <ul> <li>\u5b9a\u4e49\u5b50\u95ee\u9898: dp[i]: \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e \u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u6700\u5927\u548c</li> <li>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b: \u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba,</li> </ul> \\[ \\begin{equation*} dp[i]=\\left\\{ \\begin{aligned}  dp[i - 1] + nums[i]&amp;, &amp; dp[i - 1] \\geq 0, \\\\ nums[i] &amp;, &amp; dp[i - 1] &lt; 0. \\end{aligned} \\right. \\end{equation*} \\] <p>\u4e0a\u5f0f\u53ef\u4ee5\u5408\u5e76\u4e3a\u4e00\u4e2a\u516c\u5f0f \\(dp[i]=\\max(dp[i-1] + nums[i], nums[i])\\)</p> <ul> <li> <p>\u521d\u59cb\u503c: dp[0] = nums[0]</p> </li> <li> <p>\u4f18\u5316\u7a7a\u95f4: \u5168\u90e8\u4fdd\u5b58 DP \u6570\u7ec4\u6ca1\u6709\u5fc5\u8981, \u53ea\u7528\u5b58\u50a8 dp[i-1] \u548c dp[i] \u5c31\u53ef\u4ee5\u3002</p> </li> </ul> <p>\u4f9d\u636e\u5982\u4e0a\u5206\u6790\u53ef\u4ee5\u5199\u51fa\u6700\u539f\u59cb\u7684 DP \u4ee3\u7801</p> \u7a7a\u95f4\u4f18\u5316\u524d\u7a7a\u95f4\u4f18\u5316\u540e <pre><code>def maxSubArray(self, nums: List[int]) -&gt; int:\n    \"\"\"\n    1. DP \u5b9a\u4e49: dp[i] \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\n    2. \u9012\u63a8\u516c\u5f0f: dp[i] = max(dp[i - 1] + nums[i], nums[i])\n    3. DP \u521d\u59cb\u5316: dp[0] = nums[0]\n    \"\"\"\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    max_val = dp[0]\n    for i in range(1, len(nums)):\n        dp[i] = max(dp[i - 1] + nums[i], nums[i])\n        if max_val &lt; dp[i]:\n            max_val = dp[i]\n    return max_val\n</code></pre> <pre><code>def maxSubArray(self, nums: List[int]) -&gt; int:\n    \"\"\"\n    \u5b9a\u4e49 prev, curr = dp[i - 1], dp[i]\n    \"\"\"\n    prev = nums[0]\n    max_subsum = prev\n    for num in nums[1:]:\n        curr = max(prev + num, num)\n        prev = curr\n        if max_subsum &lt; curr:\n            max_subsum = curr\n    return max_val\n</code></pre>"}, {"location": "programming/dynamic_programming/#152", "title": "152.\u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u8bf7\u4f60\u627e\u51fa\u6570\u7ec4\u4e2d\u4e58\u79ef\u6700\u5927\u7684\u975e\u7a7a\u8fde\u7eed\u5b50\u6570\u7ec4(\u8be5\u5b50\u6570\u7ec4\u4e2d\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\u5b57)\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u6570\u7ec4\u6240\u5bf9\u5e94\u7684\u4e58\u79ef\u3002</p> <p>\u793a\u4f8b: <pre><code>\u8f93\u5165: nums = [2,3,-2,4]\n\u8f93\u51fa: 6\n\u89e3\u91ca: \u5b50\u6570\u7ec4 [2,3] \u6709\u6700\u5927\u4e58\u79ef 6\u3002\n</code></pre></p> <p>\u89e3\u6790:</p> <p>\u57fa\u672c\u7684\u89e3\u9898\u601d\u8def\u540c 53_\u6700\u5927\u5b50\u6570\u7ec4\u548c, \u4f46\u9700\u8981\u8003\u8651 nums[i] \u4e2d\u5206\u522b\u4e3a\u6b63\u6570\u548c\u8d1f\u6570\u7684\u60c5\u5f62\u3002 1. \u82e5 nums[i] &lt; 0, \u4e14\u5176\u524d\u67d0\u6bb5\u8fde\u7eed\u5b50\u6570\u7ec4\u4e4b\u79ef\u4e5f\u4e3a\u8d1f\u6570\uff0c\u5219\u8d1f\u7684\u7edd\u5bf9\u503c\u8d8a\u5927\uff0c\u5219\u5176\u79ef\u8d8a\u5927; 2. \u82e5 nums[i] &gt; 0, \u5219\u671f\u671b\u5176\u524d\u67d0\u6bb5\u8fde\u7eed\u5b50\u6570\u7ec4\u4e4b\u79ef\u4e5f\u4e3a\u6b63\u6570\uff0c\u6b63\u5f97\u8d8a\u5927\uff0c\u5176\u79ef\u8d8a\u5927\u3002</p> <p>\u56e0\u6b64, \u9700\u8981\u5b9a\u4e49\u4e24\u4e2a DP, \u5373</p> <ul> <li>\\(DP_{max}\\): \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u79ef\u7684\u6700\u5927\u503c\uff1b</li> <li>\\(DP_{min}\\): \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u79ef\u7684\u6700\u5c0f\u503c.</li> </ul> <p>\u4ee3\u7801\u5982\u4e0b:</p> <pre><code>def maxProduct(self, nums: List[int]) -&gt; int:\n    prev_max = nums[0]\n    prev_min = nums[0]\n    res = nums[0]\n    for num in nums[1:]:\n        curr_max = max(prev_max * num, prev_min * num, num)\n        curr_min = min(prev_max * num, prev_min * num, num)\n        res = max(curr_max, res)\n        prev_max = curr_max\n        prev_min = curr_min\n    return res\n</code></pre>"}, {"location": "programming/dynamic_programming/#300", "title": "300.\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u8bf4\u660e: \u5b50\u5e8f\u5217\u662f\u7531\u6570\u7ec4\u6d3e\u751f\u800c\u6765\u7684\u5e8f\u5217\uff0c\u5220\u9664\uff08\u6216\u4e0d\u5220\u9664\uff09\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u800c\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c[3,6,2,7] \u662f\u6570\u7ec4 [0,3,1,6,2,2,7] \u7684\u5b50\u5e8f\u5217\u3002 \u793a\u4f8b: <pre><code>\u8f93\u5165\uff1anums = [10,9,2,5,3,7,101,18]\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u662f [2,3,7,101]\uff0c\u56e0\u6b64\u957f\u5ea6\u4e3a 4 \u3002\n</code></pre></p>"}, {"location": "programming/dynamic_programming/#_11", "title": "\u57fa\u7840\u89e3\u6cd5\uff1a\u52a8\u6001\u89c4\u5212", "text": "<ul> <li>\u72b6\u6001\u5b9a\u4e49: dp[i] \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6;</li> <li>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b: \u5f53 \\(nums[i] &gt; nums[j]\\) \u65f6, \\(dp[i] = \\max(dp[j] + 1, dp[i]), j \\in [0, i)\\), \u5176\u4e2d \\(j&lt;i\\); \u4e5f\u5373\u662f\u8bf4, \u9700 \\(nums[i] &gt; nums[j]\\) \u65f6, \u624d\u80fd\u5c06 \\(nums[i]\\) \u653e\u5230 \\(nums[0...j]\\) \u540e\u9762\u5f62\u6210\u4e0a\u5347\u5b50\u5e8f\u5217;</li> <li>\u521d\u59cb\u72b6\u6001: dp[i] \u6240\u6709\u5143\u7d20\u7f6e 11\uff0c\u542b\u4e49\u662f\u6bcf\u4e2a\u5143\u7d20\u90fd\u81f3\u5c11\u53ef\u4ee5\u5355\u72ec\u6210\u4e3a\u5b50\u5e8f\u5217\uff0c\u6b64\u65f6\u957f\u5ea6\u90fd\u4e3a 1.</li> </ul> <pre><code>def lengthOfLIS(self, nums: List[int]) -&gt; int:\n    \"\"\"\n    dp[i]: \u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    \"\"\"\n    result = 0\n    dp = [1] * len(nums)\n    for i, num in enumerate(nums):\n        # \u5bf9\u4e8e\u6bcf\u4e2a nums[i], \u9700\u4ece\u5934\u5f00\u59cb\u904d\u5386\n        for j in range(i): \n            if nums[i] &gt; nums[j]:\n                dp[i] = max(dp[j] + 1, dp[i])\n        result = max(dp[i], result)\n    return result\n</code></pre>"}, {"location": "programming/dynamic_programming/#_12", "title": "\u664b\u7ea7\u89e3\u6cd5: \u52a8\u6001\u89c4\u5212 + \u4e8c\u5206\u67e5\u627e", "text": "<p>\u6838\u5fc3\u601d\u60f3: \u4e3a\u4e86\u627e\u5230 \\(nums[i]\\) \u4e4b\u524d\u7684\u4e0a\u5347\u5b50\u5e8f\u5217, \u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a \u5347\u5e8f \u6570\u7ec4 ascend_arr \u5b58\u653e\u4e0a\u5347\u5b50\u5e8f\u5217, \u8d8a\u5c0f\u7684\u6570\u5b57\u8d8a\u5f80\u524d\u653e\uff0c\u8fd9\u6837\u540e\u9762\u5c31\u4f1a\u6709\u66f4\u591a\u7684\u6570\u5b57\u53ef\u4ee5\u52a0\u5165\u8be5\u6570\u7ec4\u4e2d\u3002 \u5177\u4f53\u64cd\u4f5c\u662f: \u5982\u679c nums[i] \u6bd4 ascend_arr[-1] \u5927, \u5219\u8ffd\u52a0\u81f3 ascend_arr \u672b\u5c3e; \u8d1f\u8d23\u8986\u76d6\u7b2c\u4e00\u4e2a\u521a\u597d\u4e0d\u5c0f\u4e8e nums[i] \u7684\u6570\u5b57\u3002\u57fa\u672c\u7684</p> <pre><code>def lengthOfLIS(self, nums: List[int]) -&gt; int:\n    res = 1\n    ascend_arr = [nums[0]]         # \u6709\u5e8f\u4e0a\u5347\u6570\u7ec4\n    for num in nums[1:]:\n        if num &gt; ascend_arr[-1]:   # \u8ffd\u52a0\n            ascend_arr.append(num)\n        else:                      # \u8986\u76d6\u7b2c\u4e00\u4e2a\u521a\u597d\u4e0d\u5c0f\u4e8e num \u7684\u6570\u5b57\n            for idx in range(len(ascend_arr))[::-1]:\n                if ascend_arr[idx] &lt; num:\n                    break\n            if idx == 0 and ascend_arr[0] &gt;= num:\n                idx -= 1\n            ascend_arr[idx + 1] = num\n    return len(ascend_arr) \n</code></pre> <p>\u5982 nums = [100, 90, 1, 20, 30, 40, 80, 2, 3, 4, 5, 6], \u6bcf\u4e00\u6b65\u64cd\u4f5c\u540e\u7684 ascend_arr \u7684\u60c5\u5f62\u5982\u4e0b <pre><code>[100]\n[90]                 (90 &lt; 100, \u66ff\u6362)\n[1]                  (1 &lt; 90, \u66ff\u6362)\n[1, 20]              (20 &gt; 1, \u8ffd\u52a0)\n[1, 20, 30]          (30 &gt; 20, \u8ffd\u52a0)\n[1, 20, 30, 40]      (40 &gt; 30, \u8ffd\u52a0)\n[1, 20, 30, 40, 80]  (80 &gt; 40, \u8ffd\u52a0)\n[1, 2, 30, 40, 80]   ( 1 &lt; 2 &lt; 20, \u66ff\u6362 20)\n[1, 2, 3, 40, 80]    ( 2 &lt; 3 &lt; 30, \u66ff\u6362 30)\n[1, 2, 3, 4, 80]     ( 3 &lt; 4 &lt; 40, \u66ff\u6362 40 )\n[1, 2, 3, 4, 5]      ( 4 &lt; 5 &lt; 80, \u66ff\u6362 80 )\n[1, 2, 3, 4, 5, 6]   (6 &gt; 5, \u8ffd\u52a0)\n</code></pre></p> <p>\u66f4\u8fdb\u4e00\u6b65, \u7531\u4e8e ascend_arr \u662f\u6709\u5e8f\u4e0a\u5347\u6570\u7ec4, \u5219\u53ef\u4ee5\u5c06\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u8986\u76d6\u7684\u64cd\u4f5c\u4f18\u5316\u4e3a\u4e8c\u5206\u67e5\u627e\u3002</p> <pre><code>def lengthOfLIS(self, nums: List[int]) -&gt; int:\n    # \u5b9a\u4e49\u6709\u5e8f\u4e0a\u5347\u6570\u7ec4\n    ascend_arr = [nums[0]]\n\n    for num in nums[1:]:\n        if num &gt; ascend_arr[-1]:   \n            # \u8ffd\u52a0\n            ascend_arr.append(num)\n        else:                      \n            # \u8986\u76d6\u7b2c\u4e00\u4e2a\u521a\u597d\u4e0d\u5c0f\u4e8e num \u7684\u6570\u5b57\n            l, r = 0, len(ascend_arr) - 1\n            while l &lt; r:\n                mid = (l + r) // 2\n                if ascend_arr[mid] &lt; num:\n                    l = mid + 1\n                else:\n                    r = mid\n            ascend_arr[l] = num\n    return len(ascend_arr) \n</code></pre>"}, {"location": "programming/dynamic_programming/#_13", "title": "\u5b50\u4e32\u95ee\u9898", "text": ""}, {"location": "programming/dynamic_programming/#32", "title": "32.\u6700\u957f\u7684\u6709\u6548\u62ec\u53f7", "text": "<p>[\u9898\u76ee]: \u7ed9\u4f60\u4e00\u4e2a\u53ea\u5305\u542b '('\u00a0\u548c ')'\u00a0\u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u6709\u6548\uff08\u683c\u5f0f\u6b63\u786e\u4e14\u8fde\u7eed\uff09\u62ec\u53f7\u5b50\u4e32\u7684\u957f\u5ea6\u3002</p> <p>\u793a\u4f8b1</p> <ul> <li>\u8f93\u5165\uff1as = \")()())\"</li> <li>\u8f93\u51fa\uff1a4</li> <li>\u89e3\u91ca\uff1a\u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u662f \"()()\"</li> </ul> <p>\u793a\u4f8b2</p> <ul> <li>\u8f93\u5165: \")()())()()(\"</li> <li>\u8f93\u51fa: 4</li> <li>\u89e3\u91ca: \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u662f \"()()\" </li> </ul> <p>\u89e3\u6cd5 1: \u6808</p> <p>\u62ec\u53f7\u5339\u914d\u95ee\u9898\u901a\u5e38\u60f3\u5230\u7684\u89e3\u6cd5\u662f\u4f7f\u7528\u6808\uff0c\u672c\u9898\u4e2d\u9700\u8981\u6ce8\u610f\u7684\u51e0\u70b9:</p> <ul> <li>\u6808\u4fdd\u5b58\u7684\u662f\u62ec\u53f7\u5bf9\u5e94\u7684\u7d22\u5f15, \u800c\u4e0d\u662f\u62ec\u53f7\u672c\u8eab;</li> <li>\u6808\u9700\u9884\u7f6e -1 \u4f5c\u4e3a\u53c2\u7167\uff1b</li> <li>\u7d22\u5f15\u51fa\u6808\u540e\u9700\u8981\u5206\u60c5\u51b5\u8ba8\u8bba:</li> <li>\u6808\u4e3a\u7a7a: \u5219\u5c06\u5f53\u524d\u7d22\u5f15\u5165\u6808;</li> <li>\u6808\u975e\u7a7a: \u5219 i \u51cf\u53bb \u6808\u9876 \u4f5c\u4e3a\u5f53\u524d\u6709\u6548\u62ec\u53f7\u957f\u5ea6, \u5e76\u66f4\u65b0\u6700\u957f\u6709\u6548\u62ec\u53f7\u957f\u5ea6\u3002</li> </ul> <pre><code>def longestValidParentheses(self, s: str) -&gt; int:\n    stack = [-1]                               # \u9884\u7f6e -1 \u4f5c\u4e3a\u53c2\u7167\n    res = 0\n    for i, c in enumerate(s):\n        if c == '(':\n            stack.append(i)\n        elif c == ')':\n            stack.pop()\n            if len(stack):\n                res = max(res, i - stack[-1])  # i - stack.top()\n            else:\n                stack.append(i)                # \u6808\u7a7a, \u5219\u5165\u6808\u4f5c\u4e3a\u53c2\u7167\n    return res\n</code></pre> <p>\u89e3\u6cd5 2: \u52a8\u6001\u89c4\u5212</p> <p>\u72b6\u6001\u5b9a\u4e49: \\(dp[i]\\) \u8868\u793a\u4ee5\u4e0b\u6807\u4e3a i \u7684\u5b57\u7b26\u7ed3\u5c3e\u7684\u6700\u957f\u6709\u6548\u62ec\u53f7\u7684\u957f\u5ea6;</p> <p>\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u9700\u8981\u5206\u56db\u79cd\u60c5\u5f62\u8ba8\u8bba:</p> <p></p> <pre><code>int longestValidParentheses(string s) {\n  vector&lt;int&gt; dp(s.length(), 0);\n\n  int max_len = 0;\n  for (int i = 1; i &lt; s.length(); i++) {\n    if (s[i] == '(') {\n      continue;\n    };\n\n    if (s[i - 1] == '(') {\n      dp[i] = (i &gt;= 2 ? dp[i - 2] : 0) + 2;\n    } else if (s[i - 1] == ')') {\n      if (i - dp[i - 1] - 1 &gt;= 0 &amp;&amp; s[i - dp[i - 1] - 1] == '(') {\n        dp[i] = dp[i - 1] + (i - dp[i - 1] - 2 &gt;= 0 ? dp[i - dp[i - 1] - 2] : 0) + 2;\n      }\n    }\n\n    max_len = max(max_len, dp[i]);\n  }\n  cout &lt;&lt; max_len &lt;&lt; endl;\n  return max_len;\n}\n</code></pre>"}, {"location": "programming/greedy/", "title": "\u8d2a\u5fc3\u6cd5", "text": ""}, {"location": "programming/greedy/#_1", "title": "\u9898\u76ee\u5217\u8868", "text": "Title Difficulty Marks 55_\u8df3\u8dc3\u6e38\u620f M 406_\u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 M tree, sorting 581_\u6700\u77ed\u65e0\u5e8f\u8fde\u7eed\u5b50\u6570\u7ec4 M two-pointers 621_\u4efb\u52a1\u8c03\u5ea6\u5668 M hash-table, sorting"}, {"location": "programming/greedy/#_2", "title": "\u533a\u95f4\u95ee\u9898", "text": "<p>\u4e00\u822c\u601d\u8def: \u5148\u6392\u5e8f\uff0c\u540e\u8d2a\u5fc3\u3002</p>"}, {"location": "programming/greedy/#_3", "title": "\u533a\u95f4\u5408\u5e76", "text": ""}, {"location": "programming/greedy/#_4", "title": "\u9898\u610f", "text": "<p>\u7ed9\u5b9a\u4e00\u7ec4\u533a\u95f4\u7684\u96c6\u5408, \\([a_i, b_i]\\) \u8868\u793a\u7b2c \\(i\\) \u533a\u95f4, \u8981\u6c42\u5408\u5e76\u6240\u6709\u6709\u91cd\u53e0\u7684\u533a\u95f4 (\u65ad\u70b9\u5904\u76f8\u4ea4\u4e5f\u7b97\u4ea4\u96c6), \u8fd4\u56de\u4e00\u4e2a\u4e0d\u91cd\u53e0\u7684\u533a\u95f4\u6570\u7ec4\u3002\u8be5\u6570\u7ec4\u9700\u6070\u597d\u8986\u76d6\u8f93\u5165\u4e2d\u7684\u6240\u6709\u533a\u95f4.</p> <p></p>"}, {"location": "programming/greedy/#_5", "title": "\u601d\u8def", "text": "<ol> <li>\u6392\u5e8f: \u6309\u7167\u533a\u95f4\u5de6\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f;</li> <li>\u8d2a\u5fc3\u6c42\u89e3: \u7ef4\u62a4\u4e00\u4e2a\u5408\u5e76\u540e\u533a\u95f4\u7684\u5c3e\u7aef\u70b9 \\(tail\\), \u5f53\u904d\u5386\u5230\u7b2c \\(i\\) \u533a\u95f4 \\([a_i, b_i]\\), <ul> <li>\u5982\u679c \\(a_i &lt;= tail\\), \u8bf4\u660e\u533a\u95f4 \\([a_i, b_i]\\) \u4e0e\u524d\u9762\u7684\u533a\u95f4\u6709\u4ea4\u96c6, \u65e0\u9700\u589e\u52a0\u533a\u95f4\u4e2a\u6570, \u4e14 \\(tail = \\max(tail, b_i)\\);</li> <li>\u5982\u679c \\(a_i &gt; tail\\), \u8bf4\u660e\u533a\u95f4 \\([a_i, b_i]\\) \u4e0e\u524d\u9762\u7684\u533a\u95f4\u65e0\u4ea4\u96c6, \u9700\u589e\u52a0\u533a\u95f4\u4e2a\u6570, \u4e14 \\(tail=b_i\\).</li> </ul> </li> </ol> <p>\u76f8\u5173\u9898\u76ee: Leetcode 56. \u5408\u5e76\u533a\u95f4</p>"}, {"location": "programming/greedy/#_6", "title": "\u65e0\u91cd\u53e0\u533a\u95f4", "text": ""}, {"location": "programming/greedy/#_7", "title": "\u9898\u610f", "text": "<p>\u7ed9\u5b9a\u4e00\u7ec4\u533a\u95f4\u7684\u96c6\u5408, \u8981\u6c42\u9009\u62e9\u5c3d\u91cf\u591a\u7684\u533a\u95f4\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u533a\u95f4\u4e92\u4e0d\u76f8\u4ea4\uff0c\u6c42\u53ef\u9009\u53d6\u7684\u533a\u95f4\u7684\u6700\u5927\u6570\u91cf, \u5176\u4e2d\u7aef\u70b9\u76f8\u540c\u4e5f\u7b97\u6709\u91cd\u590d\u3002</p> <p></p>"}, {"location": "programming/greedy/#_8", "title": "\u601d\u8def", "text": "<ol> <li>\u6392\u5e8f: \u6309\u7167\u533a\u95f4 \u53f3\u7aef\u70b9 \u4ece\u5c0f\u5230\u5927\u6392\u5e8f;</li> <li>\u8d2a\u5fc3\u6c42\u89e3: \u7ef4\u62a4\u4e00\u4e2a\u524d\u5e8f\u533a\u95f4\u7684\u5c3e\u7aef\u70b9 \\(tail\\), \u4ece\u524d\u5f80\u540e\u4f9d\u6b21\u904d\u5386\u6bcf\u4e2a\u533a\u95f4, \u5bf9\u4e8e\u7b2c \\(i\\) \u4e2a\u533a\u95f4 \\([a_i, b_i]\\), <ul> <li>\u5982\u679c \\(a_i &lt;= tail\\), \u8bf4\u660e \u533a\u95f4 \\([a_i, b_i]\\) \u4e0e\u524d\u9762\u7684\u533a\u95f4\u6709\u4ea4\u96c6, \u76f4\u63a5\u8df3\u8fc7\uff1b</li> <li>\u5982\u679c \\(a_i &gt; tail\\), \u8bf4\u660e\u533a\u95f4 \\([a_i, b_i]\\), \u9009\u4e2d\u5f53\u524d\u533a\u95f4, \u5e76\u8bbe\u7f6e \\(tail = b_i\\).</li> </ul> </li> </ol> <p>\u76f8\u5173\u9898\u76ee: LeetCode 435. \u65e0\u91cd\u53e0\u533a\u95f4</p>"}, {"location": "programming/greedy/#_9", "title": "\u533a\u95f4\u9009\u70b9\u95ee\u9898", "text": ""}, {"location": "programming/greedy/#_10", "title": "\u9898\u610f", "text": "<p>\u7ed9\u5b9a\u4e00\u7ec4\u533a\u95f4\u7684\u96c6\u5408, \u53d6 \u5c3d\u91cf\u5c11 \u7684\u70b9, \u4f7f\u5f97\u6bcf\u4e2a\u533a\u95f4\u5185 \u81f3\u5c11\u6709\u4e00\u4e2a\u70b9 (\u4e0d\u540c\u533a\u95f4\u5185\u53ef\u4ee5\u5305\u542b\u76f8\u540c\u7684\u70b9\uff0c\u533a\u95f4\u65ad\u70b9\u5904\u7684\u70b9\u4e5f\u7b97\u4f5c\u533a\u95f4\u5185).</p> <p></p>"}, {"location": "programming/greedy/#_11", "title": "\u601d\u8def", "text": "<p>\u65b9\u6cd5\u4e00: \u53ef\u8f6c\u5316\u4e3a \u65e0\u91cd\u53e0\u533a\u95f4\u95ee\u9898, \u8bb2\u70b9\u7684\u4f4d\u7f6e\u9009\u5728\u91cd\u5408\u5904\u5373\u53ef\u3002</p> <p>\u65b9\u6cd5\u4e8c: </p> <ol> <li>\u6392\u5e8f: \u6309\u7167\u533a\u95f4 \u53f3\u7aef\u70b9 \u4ece\u5c0f\u5230\u5927\u6392\u5e8f;</li> <li>\u8d2a\u5fc3\u6c42\u89e3: \u7ef4\u62a4\u4e00\u4e2a\u524d\u5e8f\u533a\u95f4\u7684\u5c3e\u7aef\u70b9 \\(tail\\), \u4ece\u524d\u5f80\u540e\u4f9d\u6b21\u904d\u5386\u6bcf\u4e2a\u533a\u95f4, \u5bf9\u4e8e\u7b2c \\(i\\) \u4e2a\u533a\u95f4 \\([a_i, b_i]\\), <ul> <li>\u5982\u679c \\(a_i &lt;= tail\\), \u8bf4\u660e \u533a\u95f4 \\([a_i, b_i]\\) \u4e0e\u524d\u9762\u7684\u533a\u95f4\u6709\u4ea4\u96c6, \u524d\u9762\u5df2\u7ecf\u9009\u70b9, \u76f4\u63a5\u8df3\u8fc7\uff1b</li> <li>\u5982\u679c \\(a_i &gt; tail\\), \u8bf4\u660e\u533a\u95f4 \\([a_i, b_i]\\), \u9009\u4e2d\u5f53\u524d\u533a\u95f4\u4e2d\u7684\u70b9, \u5e76\u8bbe\u7f6e \\(tail = b_i\\).</li> </ul> </li> </ol> <p>\u76f8\u5173\u9898\u76ee: LeetCode 452. \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403</p>"}, {"location": "programming/greedy/#_12", "title": "\u533a\u95f4\u8986\u76d6", "text": ""}, {"location": "programming/greedy/#_13", "title": "\u9898\u76ee", "text": "<p>\u7ed9\u5b9a\u4e00\u7ec4\u533a\u95f4\u7684\u96c6\u5408\u548c\u4e00\u4e2a\u76ee\u6807\u533a\u95f4, \u9009\u62e9\u53ef\u8986\u76d6\u76ee\u6807\u533a\u95f4\u7684\u6700\u5c11\u533a\u95f4\u6570\u91cf\u3002</p> <p></p>"}, {"location": "programming/greedy/#_14", "title": "\u601d\u8def", "text": "<ol> <li>\u6392\u5e8f: \u6309\u7167\u533a\u95f4 \u5de6\u7aef\u70b9 \u4ece\u5c0f\u5230\u5927\u6392\u5e8f;</li> <li>\u8d2a\u5fc3\u6c42\u89e3: \u4ece\u524d\u5f80\u540e\u4f9d\u6b21\u904d\u5386\u6bcf\u4e2a\u533a\u95f4, <ul> <li>\u9009\u62e9\u6240\u6709\u80fd\u8986\u76d6\u5f53\u524d\u76ee\u6807\u533a\u95f4\u8d77\u59cb\u4f4d\u7f6e \\(start\\) \u7684\u533a\u95f4\u7684\u96c6\u5408 \\(S=\\left\\{[a_i, b_i], [a_{i+1}, b_{i+1}], \\cdots, [a_{j}, b_{j}]\\right\\}\\); </li> <li>\u9009\u62e9 \\(S\\) \u4e2d\u53f3\u7aef\u70b9\u6700\u5927\u7684\u533a\u95f4. \u82e5\u53f3\u7aef\u70b9\u6700\u5927\u7684\u533a\u95f4\u4e3a\u7b2c \\(k\\) \u4e2a\u533a\u95f4, \u5176\u53f3\u7aef\u70b9\u4e3a \\(b_k\\), \u66f4\u65b0 \\(start=b_k\\).</li> </ul> </li> </ol> <p>\u76f8\u5173\u9898\u76ee: LeetCode 1024. \u89c6\u9891\u62fc\u63a5</p>"}, {"location": "programming/greedy/#_15", "title": "\u533a\u95f4\u5206\u7ec4", "text": ""}, {"location": "programming/greedy/#_16", "title": "\u9898\u610f", "text": "<p>\u7ed9\u5b9a\u4e00\u7ec4\u533a\u95f4\u7684\u96c6\u5408, \u95ee\u6700\u5c11\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u533a\u95f4\u5206\u6210\u591a\u5c11\u7ec4, \u4f7f\u5f97\u6bcf\u4e2a\u7ec4\u5185\u7684\u533a\u95f4\u4e92\u4e0d\u76f8\u4ea4\u3002</p> <p></p>"}, {"location": "programming/greedy/#_17", "title": "\u601d\u8def", "text": "<ol> <li>\u6392\u5e8f: \u6309\u7167\u533a\u95f4 \u5de6\u7aef\u70b9 \u4ece\u5c0f\u5230\u5927\u6392\u5e8f;</li> <li>\u8d2a\u5fc3\u6c42\u89e3: \u5047\u5b9a\u73b0\u5728\u5df2\u7ecf\u5206\u6210 \\(m\\) \u7ec4, \u7b2c \\(k\\) \u7ec4\u7684\u6700\u53f3\u7aef\u70b9\u662f \\(r_k\\), \u5f53\u524d\u533a\u95f4\u7684\u8303\u56f4\u4e3a \\([a_i, b_i]\\), \u4ece\u524d\u5f80\u540e\u4f9d\u6b21\u904d\u5386\u6bcf\u4e2a\u533a\u95f4\u3002<ul> <li>\u5982\u679c \\(a_i \\leq r_k\\), \u7b2c \\(i\\) \u4e2a\u533a\u95f4\u4e0d\u80fd\u52a0\u5165\u7b2c \\(k\\) \u7ec4;</li> <li>\u5982\u679c \\(a_i &gt; r_k\\), \u7b2c \\(i\\) \u4e2a\u533a\u95f4\u53ef\u4ee5\u52a0\u5165\u7b2c \\(k\\) \u7ec4; </li> <li>\u82e5 \\(m\\) \u7ec4\u4e2d\u6ca1\u6709\u7ec4\u53ef\u63a5\u53d7\u5f53\u524d\u533a\u95f4, \u5219\u65b0\u5f00\u4e00\u4e2a\u7ec4, \u52a0\u5165\u533a\u95f4 \\(i\\);</li> <li>\u5982\u5b58\u5728\u53ef\u63a5\u53d7\u5f53\u524d\u533a\u95f4\u7684\u7ec4 \\(k\\), \u52a0\u5165\u5f53\u524d\u533a\u95f4\u540e\u66f4\u65b0 \\(r_k=b_i\\).</li> </ul> </li> </ol> <p>\u5b9e\u73b0: \u4e3a\u4e86\u5feb\u901f\u627e\u5230\u63a5\u53d7\u5f53\u524d\u533a\u95f4\u7684\u7ec4, \u53ef\u4ee5\u4f7f\u7528 \u4f18\u5148\u961f\u5217 (\u5c0f\u9876\u5806), \u4f18\u5148\u961f\u5217\u8bb0\u5f55\u6bcf\u4e2a\u7ec4\u53f3\u7aef\u70b9\u7684\u503c\uff0c\u6bcf\u6b21\u5728 \\(O(1)\\) \u65f6\u95f4\u62ff\u5230\u53f3\u7aef\u70b9\u6700\u5c0f\u503c\u3002</p> <p>\u76f8\u5173\u9898\u76ee: NC147 \u4e3b\u6301\u4eba\u8c03\u5ea6\uff08\u4e8c\uff09</p>"}, {"location": "programming/greedy/#_18", "title": "\u5178\u578b\u9898\u76ee", "text": ""}, {"location": "programming/greedy/#56", "title": "56.\u5408\u5e76\u533a\u95f4", "text": "<p>\u9898\u76ee: \u4ee5\u6570\u7ec4 intervals \u8868\u793a\u82e5\u5e72\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u5355\u4e2a\u533a\u95f4\u4e3a intervals[i] = [starti, endi] \u3002\u8bf7\u4f60\u5408\u5e76\u6240\u6709\u91cd\u53e0\u7684\u533a\u95f4\uff0c\u5e76\u8fd4\u56de\u00a0\u4e00\u4e2a\u4e0d\u91cd\u53e0\u7684\u533a\u95f4\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u9700\u6070\u597d\u8986\u76d6\u8f93\u5165\u4e2d\u7684\u6240\u6709\u533a\u95f4\u3002</p> <pre><code>class Solution:\n    def merge(self, intervals: List[List[int]]) -&gt; List[List[int]]:\n        # \u6309\u5de6\u7aef\u70b9\u6392\u5e8f\n        intervals.sort()\n\n        results = [intervals[0]]\n        tail = intervals[0][1]\n        for a, b in intervals[1:]:\n            if a &lt;= tail:\n                # \u6709\u4ea4\u96c6, \u5408\u5e76\n                tail = max(tail, b)\n                results[-1][1] = tail\n            else:\n                # \u65e0\u4ea4\u96c6, \u65b0\u589e\n                tail = b\n                results.append([a, b])\n        return results \n</code></pre>"}, {"location": "programming/greedy/#57", "title": "57.\u63d2\u5165\u533a\u95f4", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a \u65e0\u91cd\u53e0\u7684\uff0c\u6309\u7167\u533a\u95f4\u8d77\u59cb\u7aef\u70b9\u6392\u5e8f\u7684\u533a\u95f4\u5217\u8868\u3002 \u5728\u5217\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u533a\u95f4\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5217\u8868\u4e2d\u7684\u533a\u95f4\u4ecd\u7136\u6709\u5e8f\u4e14\u4e0d\u91cd\u53e0\uff08\u5982\u679c\u6709\u5fc5\u8981\u7684\u8bdd\uff0c\u53ef\u4ee5\u5408\u5e76\u533a\u95f4\uff09\u3002</p>"}, {"location": "programming/greedy/#_19", "title": "\u65b9\u6cd5\u4e00: \u4e24\u6b65\u8d70\u601d\u8def", "text": "<p>\u8be5\u601d\u8def\u6bd4\u8f83\u76f4\u63a5, \u6ca1\u90a3\u4e48\u591a\u5f2f\u5f2f\u7ed5\u7ed5\u3002</p> <ol> <li>\u5c06 newInterval \u6309\u5e8f\u63d2\u5165 intervals;</li> <li>\u5408\u5e76\u91cd\u53e0\u533a\u95f4, \u5982 \u5408\u5e76\u533a\u95f4.</li> </ol>"}, {"location": "programming/greedy/#_20", "title": "\u65b9\u6cd5\u4e8c: \u533a\u95f4\u5206\u6790\u6cd5", "text": "<p>\u4e24\u4e2a\u533a\u95f4 \\(S=[s_l, s_r]\\) \u548c \\(T=[t_l, t_r]\\) \u7684\u5173\u7cfb:</p> <ul> <li>\u65e0\u4ea4\u96c6: <ul> <li>\\(S\\) \u5728 \\(T\\) \u5de6\u4fa7, \\(s_r &lt; t_l\\);</li> <li>\\(S\\) \u5728 \\(T\\) \u53f3\u4fa7, \\(t_r &lt; s_l\\).</li> </ul> </li> <li>\u6709\u91cd\u53e0: \u4e0d\u6ee1\u8db3\u65e0\u4ea4\u96c6\u7684\u60c5\u51b5\u5219\u5fc5\u5b9a\u6709\u4ea4\u96c6, \u6709<ul> <li>\u4ea4\u96c6: \\([\\max(s_l, t_l), \\min(s_r, t_r)]\\);</li> <li>\u4ea4\u96c6: \\([\\min(s_l, t_l), \\max(s_r, t_r)]\\).</li> </ul> </li> </ul> <p>\u57fa\u4e8e\u4ee5\u4e0a\u5206\u6790, \u5bf9\u4e8e intervals \u4e2d\u65e0\u4ea4\u96c6\u7684\u533a\u95f4\u53ef\u76f4\u63a5\u52a0\u5165\u7ed3\u679c\u5217\u8868\u4e2d, \u5176\u5173\u952e\u662f\u5982\u4f55\u5904\u7406\u6709\u4ea4\u96c6\u7684\u533a\u95f4\u3002\u5b9a\u4e49 intervals \u7b2c i \u4e2a\u533a\u95f4\u4e3a \\([l_i, r_i]\\), newInterval \u8868\u793a\u7684\u533a\u95f4\u4e3a \\([left, right]\\), \u5219</p> <ul> <li>\u65e0\u4ea4\u96c6: \u5982\u679c \\(r_i &lt; left\\) \u6216\u8005 \\(l_i &gt; right\\), \u76f4\u63a5\u5c06 \\([l_i, r_i]\\) \u52a0\u5165\u7b54\u6848\uff1b</li> <li>\u6709\u4ea4\u96c6: \u9700\u5408\u5e76\u533a\u95f4, \u65e0\u9700\u5c06 \\([l_i, r_i]\\) \u52a0\u5165\u7b54\u6848\u3002</li> </ul> \u65b9\u6cd5\u4e00\u65b9\u6cd5\u4e8c <pre><code>class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -&gt; List[List[int]]:\n        if not intervals:\n            return [newInterval]\n\n        # \u7b2c1\u6b65: \u5c06 newInterval \u63d2\u5165 intervals \u4e2d, TODO: \u4e8c\u5206\u67e5\u627e\u6cd5\u4f18\u5316\n        inserted = False\n        for i, interval in enumerate(intervals):\n            if newInterval[0] &lt; interval[0]:\n            intervals.insert(i, newInterval)\n            inserted = True\n            break\n        if not inserted:                   # \u672a\u63d2\u5165\u5219 append\n            intervals.append(newInterval)\n\n        # \u7b2c2\u6b65: \u5408\u5e76\u6709\u5e8f\u533a\u95f4\n        results = [intervals[0]]\n        for interval in intervals[1:]:\n            if interval[0] &lt;= results[-1][1]:\n            # \u6709\u4ea4\u96c6, \u5408\u5e76\n            results[-1][1] = max(results[-1][1], interval[1])\n            else:\n            # \u65e0\u4ea4\u96c6, \u65b0\u589e\n            results.append(interval)\n        return results\n</code></pre> <pre><code>class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -&gt; List[List[int]]:\n        left, right = newInterval\n        placed = False\n        ans = list()\n            if li &gt; right:\n                # \u5728\u63d2\u5165\u533a\u95f4\u7684\u53f3\u4fa7\u4e14\u65e0\u4ea4\u96c6\n                if not placed:\n                    ans.append([left, right])\n                    placed = True\n                ans.append([li, ri])\n            elif ri &lt; left:\n                # \u5728\u63d2\u5165\u533a\u95f4\u7684\u5de6\u4fa7\u4e14\u65e0\u4ea4\u96c6\n                ans.append([li, ri])\n            else:\n                # \u4e0e\u63d2\u5165\u533a\u95f4\u6709\u4ea4\u96c6\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u5e76\u96c6\n                left = min(left, li)\n                right = max(right, ri)\n\n        if not placed:\n            ans.append([left, right])\n        return ans\n</code></pre>"}, {"location": "programming/greedy/#1024", "title": "1024.\u89c6\u9891\u62fc\u63a5", "text": ""}, {"location": "programming/greedy/#435", "title": "435.\u65e0\u91cd\u53e0\u533a\u95f4", "text": ""}, {"location": "programming/greedy/#452", "title": "452.\u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403", "text": ""}, {"location": "programming/greedy/#nc147", "title": "NC147 \u4e3b\u6301\u4eba\u8c03\u5ea6\uff08\u4e8c\uff09", "text": "<p>\u3010\u63cf\u8ff0\u3011</p> <p>\u6709 n \u4e2a\u6d3b\u52a8\u5373\u5c06\u4e3e\u529e\uff0c\u6bcf\u4e2a\u6d3b\u52a8\u90fd\u6709\u5f00\u59cb\u65f6\u95f4\u4e0e\u6d3b\u52a8\u7684\u7ed3\u675f\u65f6\u95f4\uff0c\u7b2c i \u4e2a\u6d3b\u52a8\u7684\u5f00\u59cb\u65f6\u95f4\u662f \\(start_i\\) ,\u7b2c i \u4e2a\u6d3b\u52a8\u7684\u7ed3\u675f\u65f6\u95f4\u662f \\(end_i\\), \u4e3e\u529e\u67d0\u4e2a\u6d3b\u52a8\u5c31\u9700\u8981\u4e3a\u8be5\u6d3b\u52a8\u51c6\u5907\u4e00\u4e2a\u6d3b\u52a8\u4e3b\u6301\u4eba\u3002</p> <p>\u4e00\u4f4d\u6d3b\u52a8\u4e3b\u6301\u4eba\u5728\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u53c2\u4e0e\u4e00\u4e2a\u6d3b\u52a8\u3002\u5e76\u4e14\u6d3b\u52a8\u4e3b\u6301\u4eba\u9700\u8981\u5168\u7a0b\u53c2\u4e0e\u6d3b\u52a8\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u4e3b\u6301\u4eba\u53c2\u4e0e\u4e86\u7b2c i \u4e2a\u6d3b\u52a8\uff0c\u90a3\u4e48\u8be5\u4e3b\u6301\u4eba\u5728 \\((start_i,end_i)\\) \u8fd9\u4e2a\u65f6\u95f4\u6bb5\u4e0d\u80fd\u53c2\u4e0e\u5176\u4ed6\u4efb\u4f55\u6d3b\u52a8\u3002\u6c42\u4e3a\u4e86\u6210\u529f\u4e3e\u529e\u8fd9 n \u4e2a\u6d3b\u52a8\uff0c\u6700\u5c11\u9700\u8981\u591a\u5c11\u540d\u4e3b\u6301\u4eba\u3002</p> <p>\u590d\u6742\u5ea6\u8981\u6c42\uff1a\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n\\log n)\\)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(n)\\).</p> <p>\u3010\u793a\u4f8b\u3011 <pre><code>\u8f93\u5165: 2,[[1,2],[2,3]]\n\u8fd4\u56de\u503c: 1\n\u8bf4\u660e: \u53ea\u9700\u8981\u4e00\u4e2a\u4e3b\u6301\u4eba\u5c31\u80fd\u6210\u529f\u4e3e\u529e\u8fd9\u4e24\u4e2a\u6d3b\u52a8\n</code></pre></p> <pre><code>\u8f93\u5165\uff1a2,[[1,3],[2,4]]\n\u8fd4\u56de\u503c\uff1a2\n\u8bf4\u660e\uff1a\u9700\u8981\u4e24\u4e2a\u4e3b\u6301\u4eba\u624d\u80fd\u6210\u529f\u4e3e\u529e\u8fd9\u4e24\u4e2a\u6d3b\u52a8\n</code></pre>"}, {"location": "programming/hash_table/", "title": "\u54c8\u5e0c\u8868", "text": ""}, {"location": "programming/hash_table/#_1", "title": "\u54c8\u5e0c\u8868", "text": "Title Difficulty Marks 1.\u4e24\u6570\u4e4b\u548c E 49.\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4 M 136.\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 E 169.\u591a\u6570\u5143\u7d20 E 448.\u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57 E 560.\u548c\u4e3aK\u7684\u5b50\u6570\u7ec4 M"}, {"location": "programming/linked_list/", "title": "\u94fe\u8868", "text": ""}, {"location": "programming/linked_list/#_1", "title": "\u9898\u76ee\u5217\u8868", "text": "Title Difficulty Marks \u9891\u6b21 \u2705 2_\u4e24\u6570\u76f8\u52a0 M \u2705 19_\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u7ed3\u70b9 M \u2705 21_\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 E \u2705 23_\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868 H divide-and-conquer, heap \u2705 141_\u73af\u5f62\u94fe\u8868 E two-pointers \u2705 142_\u73af\u5f62\u94fe\u8868II M two-pointers 148_\u6392\u5e8f\u94fe\u8868 M \u2705 160_\u76f8\u4ea4\u94fe\u8868 E \u2705 206_\u53cd\u8f6c\u94fe\u8868 E \u2705 234_\u56de\u6587\u94fe\u8868 E two-pointers"}, {"location": "programming/linked_list/#_2", "title": "\u4ee3\u7406\u8282\u70b9\u6cd5", "text": ""}, {"location": "programming/linked_list/#2", "title": "2.\u4e24\u6570\u76f8\u52a0", "text": "<p>\u9898\u76ee: \u7ed9\u5b9a\u4e24\u4e2a**\u975e\u7a7a**\u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167**\u9006\u5e8f**\u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8\u4e00\u4f4d\u6570\u5b57\u3002 \u8bf7\u4f60\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u4ee5\u76f8\u540c\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u548c\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0\u00a0\u5f00\u5934\u3002</p> <p>\u601d\u8def: \"\u5080\u5121\u8282\u70b9\u6cd5\", \u5b9a\u4e49\u5080\u5121\u8282\u70b9\u4f7f\u4ee3\u7801\u66f4\u7b80\u6d01\u3002</p> <pre><code>ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n    int carry = 0;\n    // \u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684\u5934\u8282\u70b9                         \n    ListNode *dummy = new ListNode(0);\n    ListNode *p = dummy;\n    while (l1 || l2 || carry) {\n        // \u83b7\u53d6 l1, l2 \u4e2d\u7684\u503c, \u82e5\u6307\u9488\u4e3a nullptr \u5219\u8d4b\u503c 0 \u5360\u4f4d\n        int num1 = l1 ? l1-&gt;val : 0;\n        int num2 = l2 ? l2-&gt; val : 0;\n\n        // \u751f\u6210\u65b0\u8282\u70b9\u8d4b\u503c\uff0c\u5e76\u8ba1\u7b97\u8fdb\u4f4d\n        int val = num1 + num2 + carry;\n        carry = val / 10;\n        p-&gt;next = new ListNode(val % 10);\n\n        // \u66f4\u65b0 l1, l2, p \u4e09\u4e2a\u6307\u9488\n        l1 = l1 ? l1-&gt;next : nullptr;\n        l2 = l2 ? l2-&gt;next : nullptr;\n        p = p-&gt;next;\n    }\n    // \u8fd4\u56de\u865a\u62df\u5934\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\n    return dummy-&gt;next;\n};\n</code></pre>"}, {"location": "programming/linked_list/#19", "title": "19.\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u7ed3\u70b9", "text": "<p>\u9898\u76ee: Given the head of a linked list, remove the n^th node from the end of the list and return its head.</p> <p>\u601d\u8def: \u5feb\u6162\u6307\u9488\u6cd5\uff0c\u8bbe\u7f6e\u5feb\u6307\u9488 fast \u548c\u6162\u6307\u9488 slow, \u5177\u4f53\u6b65\u9aa4\u4e3a:</p> <ol> <li>\u5148\u79fb\u52a8\u5feb\u6307\u9488 \\(n\\) \u6b65, \u4f7f slow \u4e0e fast \u95f4\u8ddd\u4e3a n \u4e2a\u7ed3\u70b9\uff1b</li> <li>\u76f8\u540c\u901f\u7387\u540c\u6b65\u79fb\u52a8 slow \u548c fast, \u5f53\u5feb\u6307\u9488 fast \u79fb\u52a8\u5230\u5c3e\u7ed3\u70b9\u65f6\uff0c\u5219\u6162\u6307\u9488\u7684\u540e\u4e00\u4e2a\u7ed3\u70b9\u5373\u4e3a\u9700\u8981\u5220\u9664\u7684\u7ed3\u70b9.</li> </ol> <p>\u6ce8\u610f\u4e8b\u9879\u4e0e\u6280\u5de7</p> <ul> <li>\u8bbe\u7f6e\u4e00\u4e2a\u7a7a\u5934\u7ed3\u70b9 dummy_head, \u907f\u514d\u5220\u9664\u7684\u7ed3\u70b9\u4e3a\u5934\u7ed3\u70b9 head \u65f6\u5bfc\u81f4\u8fd4\u56de\u51fa\u9519\uff1b</li> <li>\u5f53 n \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\u65f6\uff0c \u8fd4\u56de NULL.</li> </ul> <pre><code>ListNode *removeNthFromEnd(ListNode *head, int n) {\n  if (head == nullptr) return head;\n\n  // construct dummy head\n  auto *dummy_head = new ListNode;\n  dummy_head-&gt;next = head;\n  ListNode *slow = dummy_head;\n  ListNode *fast = dummy_head;\n\n  // Spacing slow and fast with n nodes\n  for (int i = 0; i &lt; n; i++) {\n    if (fast == nullptr) return nullptr;\n    fast = fast-&gt;next;\n  }\n\n  // move fast point to the end, slow with the same speed with fast\n  while (fast-&gt;next != nullptr) {\n    slow = slow-&gt;next;\n    fast = fast-&gt;next;\n  }\n\n  // delete the node\n  ListNode *tmp = slow-&gt;next;\n  slow-&gt;next = slow-&gt;next-&gt;next;\n  delete tmp;\n  return dummy_head-&gt;next;\n}\n</code></pre>"}, {"location": "programming/linked_list/#21", "title": "21.\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868", "text": "<p>\u9898\u76ee\u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 \u5347\u5e8f \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002</p> <pre><code>ListNode *mergeTwoLists(ListNode *list1, ListNode *list2) {\n  ListNode* dummy_head = new ListNode(-1);\n  ListNode* p = dummy_head;\n\n  while (list1 &amp;&amp; list2) {\n    if (list1-&gt;val &lt; list2-&gt;val) {\n      p-&gt;next = list1;\n      list1 = list1-&gt;next;\n    } else {\n      p-&gt;next = list2;\n      list2 = list2-&gt;next;\n    }\n    p = p-&gt;next;\n  }\n  p-&gt;next = list1 ? list1:list2;\n  return dummy_head-&gt;next;\n}\n</code></pre>"}, {"location": "programming/linked_list/#23", "title": "23.\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868", "text": "<p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u6570\u7ec4\uff0c\u6bcf\u4e2a\u94fe\u8868\u90fd\u5df2\u7ecf\u6309\u5347\u5e8f\u6392\u5217\u3002\u8bf7\u4f60\u5c06\u6240\u6709\u94fe\u8868\u5408\u5e76\u5230\u4e00\u4e2a\u5347\u5e8f\u94fe\u8868\u4e2d\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u94fe\u8868\u3002</p> <ul> <li> <p>\u65b9\u6cd5\u4e00\uff1a\u987a\u5e8f\u9010\u4e00\u5408\u5e76 <pre><code>ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n  ListNode* ans = nullptr;  // \u6ce8\u610f\u8981\u521d\u59cb\u5316\u4e3a nullptr\n  for (int i = 0; i &lt; lists.size(); i++) {\n    ans = mergeTwoLists(ans, lists[i]);\n  }\n  return ans;\n}\n</code></pre></p> </li> <li> <p>\u65b9\u6cd5\u4e8c\uff1a\u5206\u6cbb\u4e24\u4e24\u5408\u5e76 <pre><code>ListNode* merge(vector&lt;ListNode*&gt;&amp; lists, int l, int r) {\n  if (l == r) return lists[l];\n  if (l &gt; r) return nullptr;\n  int mid = (l + r) / 2;\n  return mergeTwoLists(merge(lists, l, mid),\n                       merge(lists, mid + 1, r)); \n}\n\nListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n  return merge(lists, 0, lists.size() - 1);\n}\n</code></pre></p> </li> </ul>"}, {"location": "programming/linked_list/#_3", "title": "\u53cc\u6307\u9488\u6cd5", "text": ""}, {"location": "programming/linked_list/#141", "title": "141.\u73af\u5f62\u94fe\u8868", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 head \uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002\u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a next \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002\u6ce8\u610f\uff1apos \u4e0d\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\u00a0\u3002\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6807\u8bc6\u94fe\u8868\u7684\u5b9e\u9645\u60c5\u51b5\u3002\u5982\u679c\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u00a0\uff0c\u5219\u8fd4\u56de true \u3002 \u5426\u5219\uff0c\u8fd4\u56de false\u3002</p> <ul> <li>\u6ce8\u610f: while \u5faa\u73af\u7684\u505c\u6b62\u51c6\u5219\u3002</li> <li>\u5feb\u6307\u9488\u4e0e\u6162\u6307\u9488\u7684**\u76f8\u5bf9\u901f\u5ea6**\u4e3a 1, \u56e0\u6b64\u5feb\u6307\u9488\u4e0d\u4f1a\u5728\u73af\u4e2d\u8df3\u8fc7\u6162\u6307\u9488\u3002</li> </ul> <pre><code>bool hasCycle(ListNode *head) {\n    if (head == nullptr || head-&gt;next == nullptr) {\n        return false;\n    }\n\n    ListNode* slow = head;\n    ListNode* fast = head;\n    while (fast &amp;&amp; fast-&gt;next) {\n        slow = slow-&gt;next;\n        fast = fast-&gt;next-&gt;next;\n        if (fast == slow) {\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre>"}, {"location": "programming/linked_list/#142", "title": "142.\u73af\u5f62\u94fe\u8868II", "text": "<p>\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 \u00a0head\u00a0\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002\u00a0\u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de\u00a0null\u3002\u4e0d\u5141\u8bb8\u4fee\u6539 \u94fe\u8868\u3002</p> <p>\u89e3\u6790:</p> <p></p> <p>\u76ee\u6807: \u6c42\u56fe\u4e2d \\(a\\) \u7684\u957f\u5ea6\u3002</p> <p>\u5982\u56fe\u6240\u793a\uff0c\u8bb0\u73af\u5916\u7684\u957f\u5ea6\u4e3a a, \u7b2c\u4e00\u8f6e\u76f8\u9047\u7684\u8282\u70b9\u4e3a\u7d2b\u8272\u5904\u3002</p> <ul> <li>\u6162\u6307\u9488\u8d70\u7684\u8282\u70b9\u6570\uff1a \\(slow = a + b\\)</li> <li>\u5feb\u6307\u9488\u8d70\u7684\u8282\u70b9\u6570\uff1a \\(fast = a + b + n*(b + c), n \\geq 1\\)</li> </ul> <p>\u7531\u4e8e\u5feb\u6307\u9488\u901f\u5ea6\u662f\u6162\u6307\u9488\u7684\u4e24\u500d\uff0c\u5219\u6ee1\u8db3 \\(2*slow = fast\\), \u5373</p> \\[ \\begin{align}      2*(a+b) &amp;= a + b + n*(b + c) \\\\     \\Rightarrow a &amp;= n * (b + c) - b \\\\     \\Rightarrow a &amp;= (n - 1) * (b + c) + c \\end{align} \\] <p>\u5f53 \\(n=1\\) \u65f6, \u6ee1\u8db3 \\(a=c\\). \u4e5f\u5373\u662f\u8bf4\u7b2c\u4e00\u8f6e\u76f8\u9047\u540e, \u4ece\u5934\u7ed3\u70b9\u548c\u5f53\u524d\u8282\u70b9\u5230\u73af\u7684\u5165\u53e3\u8282\u70b9\u7684\u957f\u5ea6\u76f8\u7b49\u3002</p> <pre><code>ListNode *detectCycle(ListNode *head) {\n    if (head == nullptr || head-&gt;next == nullptr) return nullptr;\n\n    ListNode* slow = head;\n    ListNode* fast = head;\n    // \u7b2c\u4e00\u6b21\u76f8\u9047\n    while (fast &amp;&amp; fast-&gt;next) {\n        if (fast-&gt;next == nullptr) return nullptr;\n        slow = slow-&gt;next;\n        fast = fast-&gt;next-&gt;next;\n        // \u7b2c\u4e8c\u6b21\u76f8\u9047, \u5355\u6b65\u79fb\u52a8\n        if (slow == fast) {\n            ListNode* p = head;\n            while (p != slow) {\n                p = p-&gt;next;\n                slow = slow-&gt;next;\n            }\n            return p;\n        }\n    }\n    return nullptr;\n}\n</code></pre>"}, {"location": "programming/linked_list/#160", "title": "160.\u76f8\u4ea4\u94fe\u8868", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e24\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 headA \u548c headB \uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u4e0d\u5b58\u5728\u76f8\u4ea4\u8282\u70b9\uff0c\u8fd4\u56de null\u3002</p> <p></p> <p>\u8bb0 headA \u5230\u516c\u5171\u8282\u70b9\u957f\u5ea6\u4e3a a, headB \u5230\u516c\u5171\u8282\u70b9\u957f\u5ea6\u4e3a b, \u516c\u5171\u8282\u70b9\u957f\u5ea6\u4e3a c, \u5219\u6ee1\u8db3</p> <ul> <li>\u94fe\u8868 A \u7684\u957f\u5ea6 lenA = a + c;</li> <li>\u94fe\u8868 B \u7684\u957f\u5ea6 lenB = b + c;</li> </ul> <p>\u8fdb\u4e00\u6b65\u5730\uff0c\u6709 lenA + b = lenB + a, \u5206\u522b\u5bf9\u5e94\u7c89\u8272\u8def\u5f84\u548c\u84dd\u8272\u8def\u5f84\u3002</p> <pre><code>ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n  ListNode *p = headA;\n  ListNode *q = headB;\n  while (p != q) {\n    p = p ? p-&gt;next : headB;  // \u6ce8\u610f\u662f headB, \u4e0d\u662f q \n    q = q ? q-&gt;next : headA;  // \u6ce8\u610f\u662f headA, \u4e0d\u662f p\n  }\n  return p;\n}\n</code></pre>"}, {"location": "programming/linked_list/#206", "title": "206.\u53cd\u8f6c\u94fe\u8868", "text": "<p>\u9898\u76ee:\u7ed9\u4f60\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 head \uff0c\u8bf7\u4f60\u53cd\u8f6c\u94fe\u8868\uff0c\u5e76\u8fd4\u56de\u53cd\u8f6c\u540e\u7684\u94fe\u8868\u3002</p> <p>Hints: \u9700\u8981\u8bbe\u5b9a\u4e24\u4e2a\u6307\u9488, \u4e00\u4e2a prev \u6307\u9488, \u4e00\u4e2acurr \u6307\u9488\u3002 \u8fd4\u56de\u7684\u7684\u662f prev\u3002 </p> <pre><code>ListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    ListNode* curr = head;\n    while (curr) {\n        ListNode* tmp = curr-&gt;next;\n        curr-&gt;next = prev;\n        prev = curr;\n        curr = tmp;\n    }\n    return prev;\n}\n</code></pre>"}, {"location": "programming/linked_list/#234", "title": "234.\u56de\u6587\u94fe\u8868", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 head \uff0c\u8bf7\u4f60\u5224\u65ad\u8be5\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002\u5982\u679c\u662f\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false\u3002</p> <ul> <li>\u601d\u8def: \u627e\u5230\u94fe\u8868\u4e2d\u95f4\u4f4d\u7f6e\u7684\u8282\u70b9 \u2192 \u53cd\u8f6c\u94fe\u8868\u540e\u534a\u6bb5 \u2192 \u9010\u8282\u70b9\u5bf9\u6bd4\u94fe\u8868\u524d\u534a\u6bb5\u548c\u540e\u534a\u6bb5\u7684\u53cd\u8f6c\u94fe\u8868.</li> </ul> <pre><code>ListNode* get_half_head(ListNode* head) {\n    ListNode* fast = head;\n    ListNode* slow = head;\n    while (fast &amp;&amp; fast-&gt;next) {\n        fast = fast-&gt;next-&gt;next;\n        slow = slow-&gt;next;\n    }\n    return slow;\n}\n\nListNode* reverse_list(ListNode* head) {\n    ListNode* prev = nullptr;\n    ListNode* curr = head;\n    while (curr) {\n        ListNode* tmp = curr-&gt;next;\n        curr-&gt;next = prev;\n        prev = curr;\n        curr = tmp;\n    }\n    return prev;\n}\n\nbool isPalindrome(ListNode* head) {\n    ListNode* half_head = get_half_head(head);\n    ListNode* reverse_half = reverse_list(half_head);\n    //std::cout &lt;&lt; head-&gt;next-&gt;val &lt;&lt; std::endl;\n    while (reverse_half) {\n        if (head-&gt;val != reverse_half-&gt;val) {\n            return false;\n        }\n        head = head-&gt;next;\n        reverse_half = reverse_half-&gt;next;\n    }\n    return true;\n}\n</code></pre>"}, {"location": "programming/others/", "title": "\u5176\u4ed6", "text": ""}, {"location": "programming/others/#_1", "title": "\u5176\u4ed6", "text": "Title Difficulty Marks 48_\u65cb\u8f6c\u56fe\u50cf M array 207_\u8bfe\u7a0b\u8868 M 238_\u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef M"}, {"location": "programming/sliding_window/", "title": "\u6ed1\u52a8\u7a97\u53e3", "text": ""}, {"location": "programming/sliding_window/#_1", "title": "\u9898\u76ee\u5217\u8868", "text": "\u9898\u76ee \u96be\u5ea6 \u6807\u7b7e \u9891\u5ea6 3.\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 M sliding-window, hash-table 537 75.\u989c\u8272\u5206\u7c7b H sort 28 76.\u6700\u5c0f\u8986\u76d6\u5b50\u4e32 H sliding-window, hash-table 78 209.\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 M sliding-window, 44 239.\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c H sliding-window,  heap 93 283.\u79fb\u52a8\u96f6 E 47 438.\u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd M sliding-window, hash-table 7 480.\u6ed1\u52a8\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570 H sliding-window,  hash-table 5"}, {"location": "programming/sliding_window/#_2", "title": "\u53cc\u6307\u9488\u6ed1\u7a97\u6cd5", "text": ""}, {"location": "programming/sliding_window/#_3", "title": "\u6846\u67b6", "text": ""}, {"location": "programming/sliding_window/#_4", "title": "\u5b9a\u957f\u4e0e\u53d8\u957f\u6a21\u677f", "text": "<pre><code>def SlidingWindowFramework(self, s: str) -&gt; int:\n    # \u3010Step 1\u3011: \u5b9a\u4e49\u9700\u8981\u7ef4\u62a4\u7684\u53d8\u91cf (\u53d8\u91cf\u901a\u5e38\u662f\u6700\u5c0f\u957f\u5ea6\uff0c\u6700\u5927\u957f\u5ea6\uff0c\u6216\u8005\u54c8\u5e0c\u8868)\n    x, y = ..., ...\n\n    # \u3010Step 2\u3011: \u5b9a\u4e49\u7a97\u53e3\u7684\u9996\u5c3e\u7aef (start, end), \u5f00\u59cb\u6ed1\u52a8\u7a97\u53e3\n    start = 0\n    for end in range(len(s)):\n        # \u3010Step 3\u3011: \u66f4\u65b0\u9700\u8981\u7ef4\u62a4\u7684\u53d8\u91cf, \u6709\u7684\u53d8\u91cf\u9700\u8981\u4e00\u4e2a if \u8bed\u53e5\u6765\u7ef4\u62a4 (\u6bd4\u5982\u6700\u5927\u6700\u5c0f\u957f\u5ea6)\n        x = new_x\n        if condition:\n            y = new_y\n\n        #\u3010Step 4\u3011: \u5206\u4e24\u79cd\u60c5\u51b5, \u8bf7\u6839\u636e\u9898\u610f 2 \u9009 1\n        # \u60c5\u51b51: \u53d8\u957f\u7a97\u53e3\n        # \u9700\u8981\u5224\u5b9a\u7a97\u53e3\u662f\u5426\u5408\u6cd5\u7684\u95ee\u9898\n        # \u5982\u679c\u5f53\u524d\u7a97\u53e3\u4e0d\u5408\u6cd5\u65f6, \u7528\u4e00\u4e2a while \u53bb\u4e0d\u65ad\u79fb\u52a8\u7a97\u53e3\u5de6\u6307\u9488, \u5254\u9664\u975e\u6cd5\u5143\u7d20\u76f4\u5230\u7a97\u53e3\u5408\u6cd5\n        # \u5728\u5de6\u6307\u9488\u79fb\u52a8\u4e4b\u524d\u66f4\u65b0 Step 1 \u5b9a\u4e49\u7684(\u90e8\u5206\u6216\u6240\u6709)\u7ef4\u62a4\u53d8\u91cf\n        while \u4e0d\u5408\u6cd5:\n            # \u66f4\u65b0 (\u90e8\u5206\u6216\u6240\u6709) \u7ef4\u62a4\u53d8\u91cf \n            # \u4e0d\u65ad\u79fb\u52a8\u7a97\u53e3\u5de6\u6307\u9488\u76f4\u5230\u7a97\u53e3\u518d\u6b21\u5408\u6cd5\n\n        # \u60c5\u51b52: \u5b9a\u957f\u7a97\u53e3\n        # \u5224\u65ad\u5f53\u524d\u7a97\u53e3\u957f\u5ea6\u662f\u5426\u8fbe\u5230\u4e86\u9650\u5b9a\u957f\u5ea6 \n        # \u5982\u679c\u8fbe\u5230\u4e86\uff0c\u7a97\u53e3\u5de6\u6307\u9488\u524d\u79fb1\u4e2a\u5355\u4f4d\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e0b\u4e00\u6b21\u53f3\u6307\u9488\u53f3\u79fb\u65f6\uff0c\u7a97\u53e3\u957f\u5ea6\u4fdd\u6301\u4e0d\u53d8\n        # \u5de6\u6307\u9488\u79fb\u52a8\u4e4b\u524d, \u5148\u66f4\u65b0 Step 1 \u5b9a\u4e49\u7684(\u90e8\u5206\u6216\u6240\u6709)\u7ef4\u62a4\u53d8\u91cf \n        if \u7a97\u53e3\u8fbe\u5230\u4e86\u9650\u5b9a\u957f\u5ea6:\n            # \u66f4\u65b0 (\u90e8\u5206\u6216\u6240\u6709) \u7ef4\u62a4\u53d8\u91cf \n            # \u7a97\u53e3\u5de6\u6307\u9488\u524d\u79fb\u4e00\u4e2a\u5355\u4f4d\u4fdd\u8bc1\u4e0b\u4e00\u6b21\u53f3\u6307\u9488\u53f3\u79fb\u65f6\u7a97\u53e3\u957f\u5ea6\u4fdd\u6301\u4e0d\u53d8\n\n    # \u3010Step 5\u3011: \u8fd4\u56de\u7b54\u6848\n    return ...\n</code></pre>"}, {"location": "programming/sliding_window/#_5", "title": "\"\u6700\u957f\"\u6a21\u677f", "text": "<pre><code>\u521d\u59cb\u5316 left, right, currResult, bestResult\nfor right &lt; len(nums):\n    \u7a97\u53e3\u6269\u5927, \u52a0\u5165 nums[right], \u66f4\u65b0 currResult\n    while currResult \u4e0d\u6ee1\u8db3\u8981\u6c42:   # \u5b9a\u957f\u7a97\u53e3: if \u7a97\u53e3\u8fbe\u5230\u9650\u5b9a\u957f\u5ea6\n        \u7a97\u53e3\u7f29\u5c0f, \u79fb\u9664 left \u5bf9\u5e94\u5143\u7d20\n        left += 1\n    \u66f4\u65b0 bestResult\n\u8fd4\u56de bestResult\n</code></pre>"}, {"location": "programming/sliding_window/#_6", "title": "\"\u6700\u77ed\"\u6a21\u677f", "text": "<pre><code>\u521d\u59cb\u5316 left, right, result, bestResult\nfor right &lt; len(nums):\n    \u7a97\u53e3\u6269\u5927, \u52a0\u5165 nums[right], \u66f4\u65b0 currResult\n    while currResult \u6ee1\u8db3\u8981\u6c42:     # \u5b9a\u957f\u7a97\u53e3\u4f7f\u7528 if\n        \u66f4\u65b0 bestResult\n        \u7a97\u53e3\u7f29\u5c0f, \u79fb\u9664left\u5bf9\u5e94\u5143\u7d20\n        left += 1\n\u8fd4\u56de bestResult\n</code></pre>"}, {"location": "programming/sliding_window/#_7", "title": "\u53d8\u957f\u7a97\u53e3", "text": ""}, {"location": "programming/sliding_window/#3", "title": "3.\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32", "text": "<p>\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002</p> <pre><code>def lengthOfLongestSubstring(self, s: str) -&gt; int:\n    \"\"\"\u5feb\u6162\u6307\u9488\n    1. \u4f7f\u7528\u96c6\u5408\u8bb0\u5f55\u7a97\u7684\u5927\u5c0f;\n    2. \u5f53\u904d\u5386\u7684\u5b57\u7b26\u5728\u7a97\u4e2d\u672a\u51fa\u73b0\u8fc7\uff0c\u5219\u5feb\u6307\u9488 +1;\n    3. \u5f53\u904d\u5386\u7684\u5b57\u7b26\u5728\u7a97\u4e2d\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u6162\u6307\u9488 +1.\n    \"\"\"\n    max_len = 0\n    i = 0\n    buffer = set()\n    for j, char in enumerate(s):\n        # \u79fb\u52a8\u5de6\u6307\u9488\n        while char in buffer:\n            buffer.remove(s[i])\n            i += 1\n        # \u79fb\u52a8\u53f3\u6307\u9488\n        buffer.add(char)\n        # \u66f4\u65b0\u6700\u5927\u503c\n        max_len = max(max_len, len(buffer))\n    return max_len\n</code></pre> <p>Tips: \u8be5\u9898\u7684\u5347\u7ea7\u7248\u672c\u4e3a 159.\u81f3\u591a\u5305\u542b\u4e24\u4e2a\u4e0d\u540c\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32, \u53ef\u4ee5\u4f7f\u7528\u6846\u67b6\u6765\u89e3\u7b54\u3002</p> <pre><code>def lengthOfLongestSubstring(self, s: str) -&gt; int:\n    max_len = 0\n    i = 0\n    hashmap = dict()\n    for j in enumerate(len(s)):\n        # update (hashmap, max_len)\n        hashmap[s[j]] = hashmap.get(s[j], 0) + 1\n        if len(hashmap) &lt;= 2:\n            curr_len = j - i + 1\n            max_len = max(max_len, curr_len)\n\n        # \u66f4\u65b0\u5de6\u6307\u9488\n        while len(hashmap) &gt; 2:\n            hashmap[s[i]] -= 1\n            if hashmap[s[i]] == 0:\n                del hashmap[s[i]]\n            i += 1\n    return max_len\n</code></pre>"}, {"location": "programming/sliding_window/#76", "title": "76.\u6700\u5c0f\u8986\u76d6\u5b50\u4e32", "text": "<p>\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u3001\u4e00\u4e2a\u5b57\u7b26\u4e32 t \u3002\u8fd4\u56de s \u4e2d\u6db5\u76d6 t \u6240\u6709\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\u3002\u5982\u679c s \u4e2d\u4e0d\u5b58\u5728\u6db5\u76d6 t \u6240\u6709\u5b57\u7b26\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002</p> <p>\u672c\u9898\u9002\u5408 \u6700\u77ed+\u53d8\u957f \u6a21\u5f0f\u6846\u67b6\u3002</p> <pre><code>def isin(cnt_t, cnt_w):\n    \"\"\"\u9a8c\u8bc1 cnt_t \u662f\u5426\u6bcf\u4e2a\u5143\u7d20\u7684\u4e2a\u6570\u90fd\u4e0d\u5927\u4e8e cnt_w \"\"\"\n    for k, v in cnt_t.items():\n        if v &gt; cnt_w[k]:\n            return False\n    return True\n\ndef minWindow(self, src: str, target: str) -&gt; str:\n    # \u5bf9 t \u4e2d\u7684\u5b57\u6bcd\u8ba1\u6570\n    counter_t = dict()\n    for x in target:\n        counter_t[x] = counter_t.get(x, 0) + 1\n\n    ans = src \n    flag = False\n    i = 0\n    counter_w = dict(zip(list(counter_target.keys()), [0] * len(counter_target)))\n\n    # \u4e3b\u5904\u7406\u903b\u8f91\n    for j in range(len(src)):\n        if src[j] in counter_w:\n            counter_w[src[j]] += 1\n\n        # \u6761\u4ef6\u6ee1\u8db3, \u5219\u5de6\u6307\u9488\u53f3\u79fb\n        while isin(counter_t, counter_w):\n            if len(src[i:j + 1]) &lt; len(ans):\n                ans = src[i:j + 1]\n            if src[i] in counter_w:\n                counter_w[src[i]] -= 1\n            flag = True\n            i += 1\n    return ans if flag else \"\"\n</code></pre>"}, {"location": "programming/sliding_window/#209", "title": "209.\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4", "text": "<p>Tips: \u5c5e\u4e8e\u6846\u67b6\u4e2d\u7a97\u53e3\u957f\u5ea6\u53d8\u957f\u60c5\u5f62\u3002</p> <pre><code>def minSubArrayLen(self, target: int, nums: List[int]) -&gt; int:\n    min_len = len(nums) + 1\n    i = 0\n    sum = 0\n    for j in range(len(nums)):\n        sum += nums[j]\n\n        while sum &gt;= target:\n            min_len = min(min_len, j - i + 1)\n            sum -= nums[i]\n            i += 1\n    return 0 if min_len &gt; len(nums) else min_len\n</code></pre>"}, {"location": "programming/sliding_window/#10041iii", "title": "1004.\u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570III", "text": "<p>\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u5982\u679c\u53ef\u4ee5\u7ffb\u8f6c\u6700\u591a k \u4e2a 0 \uff0c\u5219\u8fd4\u56de \u6570\u7ec4\u4e2d\u8fde\u7eed 1 \u7684\u6700\u5927\u4e2a\u6570\u3002</p> <p>\u9898\u610f\u8f6c\u6362: \"\u6700\u591a\u53ef\u4ee5\u7ffb\u8f6c k \u4e2a 0\" \u7b49\u4ef7\u4e8e \"\u6ed1\u7a97\u4e2d\u6700\u591a\u6709 k \u4e2a 0\"</p> <pre><code>def longestOnes(self, nums: List[int], k: int) -&gt; int:\n    counter_win = {1: 0, 0: 0}\n    max_len = 0\n    i = 0\n    for j, num in enumerate(nums):\n        counter_win[num] = counter_win.get(num, 0) + 1\n        if counter_win[0] &lt;= k:\n            max_len = max(max_len, j - i + 1)\n\n        while counter_win[0] &gt; k:\n            counter_win[nums[i]] -= 1\n            i += 1\n    return max_len\n</code></pre>"}, {"location": "programming/sliding_window/#_8", "title": "\u5b9a\u957f\u7a97\u53e3", "text": ""}, {"location": "programming/sliding_window/#438", "title": "438.\u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd", "text": "<p>Tips: \u5c5e\u4e8e\u6846\u67b6\u4e2d\u7a97\u53e3\u957f\u5ea6\u56fa\u5b9a\u60c5\u5f62\u3002</p> <pre><code>def findAnagrams(self, s: str, p: str) -&gt; List[int]:\n    counter_p = dict()\n    for c in p:\n        counter_p[c] = counter_p.get(c, 0) + 1\n    counter_win = dict()\n\n    ans = []\n    i = 0\n    for j in range(len(s)):\n        counter_win[s[j]] = counter_win.get(s[j], 0) + 1\n        if counter_p == counter_win:\n            ans.append(i)\n\n        if j - i + 1 &gt;= len(p):  # \u6ce8\u610f\u8fd9\u91cc\u53d6\u7b49\u53f7\n            counter_win[s[i]] -= 1\n            if counter_win[s[i]] == 0:\n                del counter_win[s[i]]\n            i += 1\n    return ans\n</code></pre> <p>\u7c7b\u4f3c\u7684\u9898\u76ee\u8fd8\u6709 567.\u5b57\u7b26\u4e32\u7684\u6392\u5217, \u53ea\u9700\u4f5c\u5c11\u91cf\u4ee3\u7801\u8c03\u6574\u3002</p>"}, {"location": "programming/sliding_window/#1423", "title": "1423.\u53ef\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570", "text": "<p>\u9898\u76ee: \u51e0\u5f20\u5361\u724c \u6392\u6210\u4e00\u884c\uff0c\u6bcf\u5f20\u5361\u724c\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u70b9\u6570\u3002\u70b9\u6570\u7531\u6574\u6570\u6570\u7ec4 cardPoints \u7ed9\u51fa\u3002 \u6bcf\u6b21\u884c\u52a8\uff0c\u4f60\u53ef\u4ee5\u4ece\u884c\u7684\u5f00\u5934\u6216\u8005\u672b\u5c3e\u62ff\u4e00\u5f20\u5361\u724c\uff0c\u6700\u7ec8\u4f60\u5fc5\u987b\u6b63\u597d\u62ff k \u5f20\u5361\u724c\u3002 \u4f60\u7684\u70b9\u6570\u5c31\u662f\u4f60\u62ff\u5230\u624b\u4e2d\u7684\u6240\u6709\u5361\u724c\u7684\u70b9\u6570\u4e4b\u548c\u3002\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 cardPoints \u548c\u6574\u6570 k\uff0c\u8bf7\u4f60\u8fd4\u56de\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570\u3002</p> <p>\u9898\u610f\u8f6c\u6362: \u7b49\u4ef7\u4e8e\u8fde\u7eed n - k \u5f20\u724c\u7684\u6700\u5c0f\u503c</p> <pre><code>def maxScore(self, cardPoints: List[int], k: int) -&gt; int:\n    n = len(cardPoints)\n    win_size = n - k\n    min_val = float('inf')\n\n    # \u7279\u4f8b\n    if n == k:\n        return sum(cardPoints)\n\n    i = 0\n    win_sum = 0  # sum of window\n    for j in range(n):\n        win_sum += cardPoints[j]\n\n        if j - i + 1 &gt;= win_size:\n            min_val = min(min_val, win_sum)\n            win_sum -= cardPoints[i]\n            i += 1\n\n    return sum(cardPoints) - min_val\n</code></pre>"}, {"location": "programming/sliding_window/#_9", "title": "\u5355\u8c03\u961f\u5217\u6cd5", "text": ""}, {"location": "programming/sliding_window/#239", "title": "239.\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c", "text": "<p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a\u00a0k\u00a0\u7684\u6ed1\u52a8\u7a97\u53e3\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u4fa7\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u6700\u53f3\u4fa7\u3002\u4f60\u53ea\u53ef\u4ee5\u770b\u5230\u5728\u6ed1\u52a8\u7a97\u53e3\u5185\u7684 k\u00a0\u4e2a\u6570\u5b57\u3002\u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u53ea\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\u3002 \u8fd4\u56de \u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c \u3002</p> <pre><code>def maxSlidingWindow(self, nums: List[int], k: int) -&gt; List[int]:\n    \"\"\"\u5355\u8c03\u961f\u5217\u6cd5\n    \u8bbe\u5b9a\u4e00\u4e2a\u53cc\u5411\u961f\u5217 deque, \u4fdd\u5b58\u5143\u7d20\u7d22\u5f15\uff0c\u7d22\u5f15\u5bf9\u5e94\u7684\u5143\u7d20\u503c\u59cb\u7ec8\u4e3a\u9012\u51cf\u6570\u5217\n    Hints: \u961f\u5217\u4e2d\u6ca1\u5fc5\u8981\u7ef4\u62a4\u9760\u524d\u7684\u5143\u7d20\u503c\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u503c\u7684\u7d22\u5f15\u3002\n    \u5165\u961f\uff1a\n        1. \u5148\u5220\u540e\u63d2\uff1a\u5f53\u961f\u5c3e\u5143\u7d20 deque[-1] &lt;= nums[i], \u5219\u5148 pop, \u518d\u8ffd\u52a0\n        2. \u76f4\u63a5\u63d2\u5165\uff1a\u5f53\u961f\u5c3e\u5143\u7d20 deque[-1] &gt; nums[i], \u5219\u76f4\u63a5\u8ffd\u52a0\n    \u51fa\u961f\uff1a\n        \u5f53 deque[0] \u6ed1\u51fa\u7a97\u5916\n    \"\"\"\n    results = []\n    q = collections.deque()\n\n    for i in range(len(nums)):\n        # \u961f\u5c3e\u5165\u961f\n        while q and nums[i] &gt;= nums[q[-1]]:\n            q.pop()\n        q.append(i)\n\n        # \u961f\u9996\u51fa\u961f: \u961f\u9996\u5143\u7d20\u8d85\u51fa\u7a97\u8303\u56f4\n        if q[0] &lt;= i - k:\n            q.popleft()\n\n        # \u4fdd\u5b58\u5143\u7d20\n        if i &gt;= k - 1:\n            results.append(nums[q[0]])\n    return results\n</code></pre>"}, {"location": "programming/sorting/", "title": "\u6392\u5e8f", "text": ""}, {"location": "programming/sorting/#_1", "title": "\u9898\u76ee\u5217\u8868", "text": "\u9898\u76ee \u96be\u5ea6 \u6807\u7b7e \u9891\u5ea6 215.\u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 M 375 347.\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20 M 20"}, {"location": "programming/sorting/#_2", "title": "\u6392\u5e8f\u7b97\u6cd5", "text": ""}, {"location": "programming/sorting/#_3", "title": "\u5feb\u901f\u6392\u5e8f", "text": "<p>\u6b65\u9aa4:</p> <ul> <li>\u6311\u9009\u57fa\u51c6\u503c pivot;</li> <li>\u4ece\u65b0\u6392\u5e8f\u6570\u5217, \u4f7f\u5c0f\u4e8e pivot \u7684\u5143\u7d20\u653e\u5728\u5176\u524d\u9762, \u5927\u4e8e pivot \u7684\u503c\u653e\u5728\u5176\u540e\uff1b</li> <li>\u9012\u5f52\u6392\u5e8f: \u9012\u5f52\u5730\u5c06\u5c0f\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u5e8f\u5217\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u5e8f\u5217\u6392\u5e8f;</li> </ul> <p>\u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u662f: \u5b50\u5e8f\u5217\u7684\u5927\u5c0f\u4e3a 0 \u6216\u8005 1.</p> <p></p> <p>\u6ce8\u610f: \u82e5\u4ee5\u6700\u53f3\u4fa7\u5143\u7d20\u4f5c\u4e3a pivot, \u5219\u9700\u8981\u6700\u5de6\u4fa7\u7684\u6307\u9488\u5148\u8d70\u3002\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u76f8\u9047\u65f6\u7684\u6570\u662f\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u3002</p> \u5199\u6cd5\u4e00\u5199\u6cd5\u4e8c <pre><code>def partition(arr, left, right):\n    # rightmost element as pivot\n    pivot = arr[right]\n    l, r = left, right \n\n    while l &lt; r:\n        while arr[l] &lt;= pivot and l &lt; r:\n            l += 1\n        while arr[r] &gt;= pivot and l &lt; r:\n            r -= 1\n        arr[l], arr[r] = arr[r], arr[l]\n    arr[l], arr[right] = arr[right], arr[l]\n    return l\n\ndef quick_sort(arr, left, right):\n    if left &lt; right:\n        # find the index of pivot element \n        pi = partition(arr, left, right)\n        quick_sort(arr, left, pi - 1)\n        quick_sort(arr, pi + 1, right)\n\nquick_sort(arr, 0, len(arr) - 1)\n</code></pre> <pre><code>def partition(arr, left, right):\n    # rightmost element as pivot\n    pivot = arr[high]\n\n    # pointer \n    i = left - 1\n\n    for j in range(lelf, right):\n        if arr[j] &lt;= pivot:\n            i = i + 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n\n    # return the position \n    return i + 1\n\ndef quick_sort(arr, left, right):\n    if low &lt; high:\n        # find the index of pivot element \n        pi = partition(arr, lelf, right)\n        quick_sort(arr, left, pi - 1)\n        quick_sort(arr, pi + 1, right)\n\nquick_sort(arr, 0, len(arr) - 1)\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6: \\(O(N\\log(N))\\), \u6700\u574f\u60c5\u51b5\u4e3a \\(O(N^2)\\)</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6: \\(O(\\log(N))\\), \u4e5f\u5373\u662f\u9012\u5f52\u7684\u6df1\u5ea6</li> </ul>"}, {"location": "programming/sorting/#_4", "title": "\u5f52\u5e76\u6392\u5e8f", "text": "<p>\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u5148\u628a\u5de6\u534a\u8fb9\u6570\u7ec4\u6392\u597d\u5e8f\uff0c\u518d\u628a\u53f3\u534a\u8fb9\u6570\u7ec4\u6392\u597d\u5e8f\uff0c\u7136\u540e\u628a\u4e24\u534a\u6570\u7ec4\u5408\u5e76, \u7ed3\u6784\u7c7b\u4f3c\u4e8e\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\u3002</p> <pre><code>def merge(arr1, arr2):\n    # merge sorted array arr1 and arr2\n    i, j = 0, 0\n    result = []\n    while i &lt; len(arr1) and j &lt; len(arr2):\n        if arr1[i] &lt;= arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n    result += arr1[i:]\n    result += arr2[j:]\n    return result\n\n\ndef merge_sort(nums):\n    if len(nums) &lt;= 1:\n        return nums\n    mid = len(nums) // 2\n\n    arr1 = merge_sort(nums[:mid])\n    arr2 = merge_sort(nums[mid:])\n    merged = merge(arr1, arr2)\n    return merged\n</code></pre>"}, {"location": "programming/sorting/#_5", "title": "\u6876\u6392\u5e8f", "text": ""}, {"location": "programming/sorting/#_6", "title": "\u5806\u6392\u5e8f", "text": "<p>\u5806 \u5b9e\u9645\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u7ed3\u6784, \u5b8c\u5168\u4e8c\u53c9\u6811\u6307\u4e00\u4e2a\u6df1\u5ea6\u4e3a h \u4e8c\u53c9\u6811, \u9664\u7b2c h \u5c42\u5916\uff0c\u5176\u5b83\u5404\u5c42 (1\uff5eh-1) \u7684\u7ed3\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u4e2a\u6570\uff0c\u7b2c h \u5c42\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u8fde\u7eed\u96c6\u4e2d\u5728\u6700\u5de6\u8fb9\uff0c\u8fd9\u5c31\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002</p> <p>\u5728\u5806\u4e2d, \u5e8f\u53f7\u4e3a i \u7684\u8282\u70b9\u5177\u6709\u5982\u4e0b\u6027\u8d28:</p> <ul> <li>\u5176\u7236\u8282\u70b9\u7684\u5e8f\u53f7\u4e3a (i - 1) // 2</li> <li>\u5de6\u5b50\u8282\u70b9\u5e8f\u53f7\u4e3a 2i + 1</li> <li>\u53f3\u5b50\u8282\u70b9\u5e8f\u53f7\u4e3a 2i + 2</li> </ul> <pre><code>def heapify(nums, n, i):\n    if i &gt;= n:\n        return\n\n    max_ = i  # initialize max as root\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    # if child exists and is greater than root, exchange\n    if l &lt; n and nums[max_] &lt; nums[l]:\n        max_ = l\n    if r &lt; n and nums[max_] &lt; nums[r]:\n        max_ = r\n\n    # change root if need\n    if max_ != i:\n        nums[i], nums[max_] = nums[max_], nums[i]  # swap\n        # heapify the root\n        heapify(nums, n, max_)\n\n\ndef build_heap(nums, n):\n    # build from the last second layer\n    parent = (n - 1) // 2\n    for i in range(parent, -1, -1):\n        heapify(nums, n, i)\n\n# Main func\ndef heap_sort(nums):\n    n = len(nums)\n\n    # build a max heap\n    build_heap(nums, n)\n\n    # extract elements one by one\n    for i in range(n - 1, -1, -1):\n        nums[i], nums[0] = nums[0], nums[i]  # swap\n        heapify(nums, i, 0)\n</code></pre>"}, {"location": "programming/sorting/#_7", "title": "\u62d3\u6251\u6392\u5e8f", "text": ""}, {"location": "programming/sorting/#_8", "title": "\u5178\u578b\u9898\u76ee", "text": ""}, {"location": "programming/sorting/#215", "title": "215.\u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20", "text": "<p>\u7ed9\u5b9a\u6574\u6570\u6570\u7ec4 nums \u548c\u6574\u6570 k\uff0c\u8bf7\u8fd4\u56de\u6570\u7ec4\u4e2d\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002 \u4f60\u5fc5\u987b\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p>"}, {"location": "programming/sorting/#_9", "title": "\u65b9\u6cd5\u4e00\uff1a\u5feb\u901f\u6392\u5e8f\u6cd5", "text": "<ul> <li>\u6570\u7ec4\u6309\u7167 \u964d\u5e8f\u6392\u5217;</li> <li>\u503c\u5173\u6ce8\u7b2c K \u5927\u7684\u5143\u7d20\u6240\u5728\u533a\u95f4\u3002</li> </ul>"}, {"location": "programming/sorting/#_10", "title": "\u65b9\u6cd5\u4e8c: \u5806\u6392\u5e8f", "text": "\u5feb\u901f\u6392\u5e8f\u6cd5\u5806\u6392\u5e8f\u6cd5 <pre><code>def findKthLargest(self, nums: List[int], k: int) -&gt; int:\n    import random\n\n    def partition(nums, left, right):\n        \"\"\"\u6784\u9020\u964d\u5e8f\u6570\u7ec4\uff0c\u5de6\u5927\u53f3\u5c0f\"\"\"\n        # \u968f\u673a\u9009\u53d6\u4e00\u4e2a\u5143\u7d20\u5e76\u4e8e\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362, \u9632\u6b62\u5feb\u6392\u9000\u5316\u5230 O(n^2)\n        rand_idx = random.randint(left, right)\n        nums[left], nums[rand_idx] = nums[rand_idx], nums[left]\n\n        pivot = nums[left]\n        i, j = left, right\n        while i &lt; j:\n            while nums[j] &lt;= pivot and i &lt; j:\n                j -= 1\n            while nums[i] &gt;= pivot and i &lt; j:\n                i += 1\n            nums[i], nums[j] = nums[j], nums[i]\n        nums[i], nums[left] = pivot, nums[i]\n        return i\n\n    left, right = 0, len(nums) - 1\n    while left &lt; right:\n        index = partition(nums, left, right)\n        if index == k - 1:\n            return nums[index]\n        elif index &lt; k - 1:\n            left = index + 1\n        else:\n            right = index - 1\n    return nums[left]\n</code></pre> <pre><code>def findKthLargest(self, nums: List[int], k: int) -&gt; int:\n    def heapify(nums, n, i):\n        largest = i\n        lchild = i * 2 + 1\n        rchild = i * 2 + 2\n        if lchild &lt; n and nums[lchild] &gt; nums[largest]:\n            largest = lchild\n        if rchild &lt; n and nums[rchild] &gt; nums[largest]:\n            largest = rchild\n        if largest != i:\n            nums[largest], nums[i] = nums[i], nums[largest]\n            heapify(nums, n, largest)\n\n    def build_heap(nums, n):\n        for i in range((n - 1) // 2, -1, -1):\n            heapify(nums, n, i)\n\n    n = len(nums)\n    build_heap(nums, n)\n    for i in range(n - 1, n - k - 1, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n    return nums[n - k]\n</code></pre>"}, {"location": "programming/stack/", "title": "\u6808", "text": ""}, {"location": "programming/stack/#_1", "title": "\u9898\u76ee\u5217\u8868", "text": "Title Difficulty Marks 20.\u6709\u6548\u7684\u62ec\u53f7 E 84.\u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62 H 394.\u5b57\u7b26\u4e32\u89e3\u7801 M 739.\u6bcf\u65e5\u6e29\u5ea6 M"}, {"location": "programming/stack/#mono_stack", "title": "\u5355\u8c03\u6808", "text": ""}, {"location": "programming/stack/#_2", "title": "\u65b9\u6cd5\u8bba", "text": "<p>\u9002\u7528\u573a\u666f: \u6c42\u89e3 \u7b2c\u4e00\u4e2a\u5927\u4e8e xxx \u6216\u8005 \u7b2c\u4e00\u4e2a\u5c0f\u4e8e xxx.</p> <p>\u5e38\u7528\u6280\u5de7: \u54e8\u5175\u6cd5, \u4f8b\u5982\u5728\u539f\u6570\u7ec4\u53f3\u4fa7\u6dfb\u52a0\u4e00\u4e2a\u5c0f\u4e8e\u6570\u7ec4\u6700\u5c0f\u503c\u7684\u9879\u3002</p> <p>\u4f2a\u4ee3\u7801:</p> <pre><code>def monostoneStack(arr: List[int]) -&gt; List[int]:\n    stack = []  # \u4fdd\u5b58\u7d22\u5f15\n    ans = \u5b9a\u4e49\u4e00\u4e2a\u957f\u5ea6\u548c arr \u4e00\u6837\u957f\u7684\u6570\u7ec4\uff0c\u5e76\u521d\u59cb\u5316\u4e3a -1\n    for i in range(len(arr)):\n        while stack and arr[i] &gt; arr[\u6808\u9876\u5143\u7d20]:\n            peek = \u5f39\u51fa\u6808\u9876\u5143\u7d20\n            ans[peek] = i - peek\n        stack.append(i)\n    return ans\n</code></pre>"}, {"location": "programming/stack/#_3", "title": "\u5178\u578b\u9898\u76ee", "text": ""}, {"location": "programming/stack/#84", "title": "84.\u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62", "text": ""}, {"location": "programming/stack/#394", "title": "394.\u5b57\u7b26\u4e32\u89e3\u7801", "text": ""}, {"location": "programming/stack/#496i", "title": "496.\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20I", "text": ""}, {"location": "programming/stack/#503ii", "title": "503.\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20II", "text": ""}, {"location": "programming/stack/#556iii", "title": "556.\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20III", "text": ""}, {"location": "projects/gesture_2d/", "title": "\u624b\u52bf\u8bc6\u522b", "text": "<p>2D-Gesture\u80cc\u666f\u88f8\u624b\u4ea4\u4e92\u662f\u4e00\u79cd\u76f4\u89c2\u7684\u4ea4\u4e92\u65b9\u5f0f\u53d7\u5236\u667a\u80fd\u773c\u955c\u7684\u786c\u4ef6\uff0c\u9700\u7b80\u5355\u7684\u624b\u52bf\u4e0e\u865a\u62df\u754c\u9762\u5b8c\u6210\u4ea4\u4e92\u76ee\u6807W5100 \u5e73\u53f0\u51c6\u786e\u7387 90%+, \u901f\u5ea6 25 FPS\u6311\u6218\u6210\u50cf: \u7ed3\u6784\u5149\u548cTOF\uff0c\u751a\u81f3\u53cc\u76ee\u529f\u8017\u90fd\u504f\u9ad8\uff0c\u5355\u76ee\u662f\u5426\u53ef\u4ee5\u505a\u4ea4\u4e92\uff1f\u7b97\u6cd5: \u8f7b\u91cf\u67b6\u6784\u5982\u4f55\u8bbe\u8ba1\u65b9\u6848\u7cfb\u7edf\u8bbe\u8ba1\u4e8c\u7ea7\u7279\u5f81\u590d\u7528\u6846\u67b6Stage 1: \u591a\u4efb\u52a1\u624b\u638c\u5b9a\u4f4d\u4e0e\u7279\u5f81\u63d0\u53d6\u7f51\u7edcStage 2-1: ROIAlign \u590d\u7528\u4e2d\u95f4\u5c42\u7279\u5f81\uff0c\u5224\u65ad\u624b\u6307\u5173\u952e\u70b9Stage 2-2: \u7279\u5f81\u5e8f\u5217\u52a8\u4f5c\u5224\u522b\u7f51\u7edc\u6570\u636e\u5904\u7406\u5f00\u53d1\u4e86\u52a8\u4f5c\u91c7\u96c6\u4e0e\u6807\u6ce8\u7cfb\u7edf\uff0c\u6784\u5efa\u4e86\u9ad8\u8d28\u91cf\u7684\u6570\u636e\u96c6\u7b97\u6cd5\u4f18\u5316\u5229\u7528\u591a\u4efb\u52a1\u5b66\u4e60\u3001\u91cd\u53c2\u6570\u5316\u6280\u672f\u548c\u7279\u5f81\u590d\u7528\u7b56\u7565\uff0c\u51cf\u5c11\u8ba1\u7b97\u5197\u4f59\uff0c\u63d0\u9ad8\u8fd0\u884c\u6548\u7387\u591a\u4efb\u52a1\u8054\u5408\u8bad\u7ec3\u63d0\u5347\u4e86\u7b97\u6cd5\u7684\u7cbe\u5ea6\uff0c\u964d\u4f4e\u4e86\u8bad\u7ec3\u7684\u590d\u6742\u5ea6\u6210\u679cW5100 \u5e73\u53f0\u5b9e\u73b0\u4e86 25 FPS \u5b9e\u65f6\u8fd0\u884c\uff0c\u51c6\u786e\u738795%+\u663e\u8457\u63d0\u5347\u4e86\u88f8\u624b\u4ea4\u4e92\u6280\u672f\u5728\u4f4e\u7b97\u529b\u8bbe\u5907\u4e2d\u7684\u5e94\u7528\u6f5c\u529b\u590d\u76d8\u53d1\u626c\u6570\u636e\u5148\u884c\uff0c\u5f00\u53d1\u9ad8\u6548\u7684\u6570\u636e\u91c7\u96c6\u548c\u6807\u6ce8\u7cfb\u7edf\u5f88\u6709\u5fc5\u8981\u3010\u6162\u5c31\u662f\u5feb\u3011\u6539\u8fdb\u624b\u638c\u5feb\u901f\u79fb\u52a8\u8bc6\u522b\u51c6\u786e\u7387\u4e0b\u964d1. \u8fdb\u4e00\u6b65\u4f18\u5316\u7b97\u6cd5\uff0c\u63d0\u9ad8\u5e27\u7387; 2. \u786c\u4ef6\u4e0a\u53ef\u4ee5\u91c7\u7528\u5168\u5c40\u5feb\u95e8\u76f8\u673a\u6570\u636e\u591a\u6837\u6027\u6269\u5c55\u91c7\u96c6\u573a\u666f\u548c\u624b\u90e8\u59ff\u6001\u53d8\u5316\u52a8\u4f5c\u5224\u522b\u540e\u5904\u7406\u4e0d\u591f\u4f18\u96c5\uff0c\u53ef\u4ee5\u7f16\u7801\u5230\u7f51\u7edc\u4e2d</p>"}, {"location": "projects/gesture_2d/#_1", "title": "\u6311\u6218", "text": "<ul> <li>\u5e27\u7387\u4e3a 10 FPS \u65f6\uff0c\u7a0d\u5feb\u52a8\u4f5c\u4e5f\u5c31 2~3 \u5e27\u56fe\u50cf\uff1b \u5224\u65ad\u4e00\u4e2a\u52a8\u4f5c\u81f3\u5c11 3 \u5e27\uff1b  </li> </ul>"}, {"location": "projects/gesture_2d/#_2", "title": "\u7b97\u6cd5\u7ec6\u8282", "text": "\u7b97\u6cd5\u6846\u67b6 ConvDWConv + PWConv1\u00d73\u00d7224\u00d796DWConv + PWConv4\u00d7DWConv + PWConvDWConv + PWConvGlobalPool1\u00d716\u00d756\u00d7246\u00d71\u00d716\u00d71\u00d71GlobalPool1\u00d716\u00d728\u00d7121\u00d716\u00d71\u00d71GlobalPool1\u00d732\u00d714\u00d761\u00d716\u00d71\u00d71GlobalPool1\u00d732\u00d714\u00d761\u00d716\u00d71\u00d71Concat1\u00d7128 \u4e3b\u5e72\u7f51\u7edc"}, {"location": "projects/asr/", "title": "\u6982\u89c8", "text": ""}, {"location": "projects/asr/#_1", "title": "\u4e0d\u540c\u82af\u7247\u5178\u578b\u7b97\u529b", "text": "\u82af\u7247 \u5178\u578b\u8bbe\u5907 \u7b97\u529b(TFLOPS) \u5e26\u5bbd(GB/s) \u5185\u5b58/\u663e\u5b58(GB) \u63a8\u7406\u901f\u5ea6(tokens/sec) A100 80G PCIE \u670d\u52a1\u5668 312 1935 80 277 V100 PCIE \u670d\u52a1\u5668 112 900 16 100 M1 \u82af\u7247 Macbook Pro 5.5 68.25 32 10 \u9ad8\u901a\u9a81\u9f998 Gen3 \u4e09\u661f Galaxy S24 22.5 77 8 20 \u5929\u73919300 Find X7/Vivo X100 16.5 77 12 13 \u9ad8\u901a\u9a81\u9f998 Gen1 \u5c0f\u7c7312 4.5 51.2 8 2 \u9ad8\u901a\u9a81\u9f99765G Google Pixel5 2.75 17 8 1 \u9e92\u9e9f9010\u82af\u7247 \u534e\u4e3a Pura 70 4.5 50 12 2 A18 Pro Iphone16 Pro 17.5 60 8 13 Broadcom BCM2711 Raspberry Pi 4 0.0135 4 4 0.1 W5100 QIDI VIDA 0.009 2.4 2 0.1"}, {"location": "segmentation/", "title": "\u6982\u89c8", "text": ""}, {"location": "segmentation/#transformer-based", "title": "Transformer-based \u5206\u5272", "text": "<p>\u76f8\u5173\u5185\u5bb9\u4e3b\u8981\u5bf9 Transformer-based visual segmentation: A survey<sup>1</sup> \u6458\u8981\u3001\u603b\u7ed3\u548c\u63d0\u70bc\u3002</p> Meta Architecture <p>Meta Architecture \u5305\u542b\u7684\u90e8\u4ef6\u6709:</p> <ul> <li>Backbone</li> <li>Neck</li> <li>Object Query</li> <li>Decoder</li> <li>Mask Prediction Representation</li> <li>Bipartite Matching</li> <li>Loss Function</li> </ul>"}, {"location": "segmentation/#_1", "title": "\u8fdb\u5316\u7b56\u7565", "text": ""}, {"location": "segmentation/#_2", "title": "\u66f4\u5f3a\u7684\u7279\u5f81\u8868\u793a", "text": "<ol> <li> <p>Xiangtai Li, Henghui Ding, Haobo Yuan, Wenwei Zhang, Jiangmiao Pang, Guangliang Cheng, Kai Chen, Ziwei Liu, and Chen Change Loy. Transformer-based visual segmentation: a survey. IEEE Transactions on Pattern Analysis and Machine Intelligence, 2024.\u00a0\u21a9</p> </li> </ol>"}, {"location": "segmentation/losses/", "title": "\u635f\u5931\u51fd\u6570", "text": "<p>\u8bed\u4e49\u5206\u5272\u4e2d\u7684\u635f\u5931\u51fd\u6570\u4e3b\u8981\u5206\u4e3a\u56db\u5927\u7c7b: \u57fa\u4e8e\u5206\u5e03\u7684\u635f\u5931\u51fd\u6570\u3001\u57fa\u4e8e\u533a\u57df\u7684\u635f\u5931\u51fd\u6570\u548c\u76f8\u5173\u6280\u672f\u7684\u7ed3\u5408\u3002\u5982\u4e0b\u56fe</p> <p>\u76f8\u5173\u6280\u672f\u4e3b\u8981\u53c2\u8003 2021 Loss odyssey in medical image segmentation.</p> <p></p>"}, {"location": "segmentation/losses/#distribution-based-loss", "title": "Distribution-based Loss", "text": "<p>\u8981\u70b9: \u5ea6\u91cf\u4e24\u4e2a\u5206\u5e03\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002</p> \\[ \\begin{aligned} D_{KL}(P|Q) &amp;= \\sum_i p_i \\log \\frac{p_i}{q_i} \\\\        &amp;= -\\sum_i p_i \\log q_i + \\sum_i p_i \\log p_i \\\\ \\Longrightarrow \\underbrace{D_{KL}(p||q)}_{KL \u6563\u5ea6} &amp;= \\underbrace{H(p, q)}_{\u4ea4\u53c9\u71b5} - \\underbrace{H(p)}_{\u71b5} \\end{aligned} \\] <p>\u7531\u4e0a\u516c\u5f0f\u53ef\u4ee5\u770b\u5230, \u6700\u5c0f\u5316\u4ea4\u53c9\u71b5\u635f\u5931\u7b49\u4ef7\u4e8e\u6700\u5c0f\u5316 KL \u6563\u5ea6\u3002</p> <ul> <li>TopK Loss: \u5f3a\u5236\u7f51\u7edc\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5173\u6ce8\u96be\u6837\u672c;</li> <li>Focal Loss: \u5bf9\u5bb9\u6613\u6837\u672c\u964d\u6743, \u6539\u5584\u524d\u666f/\u80cc\u666f\u7c7b\u522b\u6781\u7aef\u4e0d\u5e73\u8861\u7684\u95ee\u9898;</li> <li>Distance penalized CE Loss: \u4ece GT Mask \u63a8\u5bfc\u8ddd\u79bb\u56fe\uff0c\u65e8\u5728\u5f15\u5bfc\u7f51\u7edc\u5173\u6ce8\u96be\u5206\u5272\u7684\u8fb9\u7f18\u533a\u57df\u3002</li> </ul>"}, {"location": "segmentation/losses/#region-based-loss", "title": "Region-based Loss", "text": "<p>\u8981\u70b9: \u5bf9 GT \u548c\u5206\u5272\u9884\u6d4b\uff0c\u6700\u5c0f\u5316\u8bef\u5339\u914d\u6216\u8005\u6700\u5927\u5316\u4ea4\u53e0\u533a\u57df\u3002</p> \\[ Dice = \\frac{2|A \\cap B|}{A \\cup B|} \\] <ul> <li>Sensitivity-Specifity Loss (SS):  sensitivity \u548c specificity \u7684\u5747\u65b9\u5dee\u7684\u52a0\u6743\u548c\u3002\u4e3a\u4e86\u6539\u5584\u4e0d\u5e73\u8861\u95ee\u9898\uff0cspecificity \u5177\u6709\u66f4\u9ad8\u7684\u6743\u91cd;</li> <li>Dice Loss: \\(L_{Dice}=1-Dice\\), \u76f4\u63a5\u4f18\u5316\u7528\u4e8e\u8bc4\u4f30\u5206\u5272\u6548\u679c\u7684 Dice \u7cfb\u6570;</li> <li>IoU Loss: \u7c7b\u4f3c Dice Loss, \u4e5f\u662f\u76f4\u63a5\u4f18\u5316\u7528\u4e8e\u8bc4\u4f30\u5206\u5272\u6548\u679c\u7684 IoU \u6307\u6807;</li> <li>Tversky Loss: \u4e0e Dice Loss \u4e0d\u540c, \u5bf9 FP \u548c FN \u8bbe\u7f6e\u4e0d\u540c\u7684\u6743\u91cd;</li> <li>GIoU Loss: \u662f Dice Loss \u7684\u591a\u5206\u7c7b\u6269\u5c55, \u6bcf\u4e2a\u7c7b\u522b\u7684\u6743\u91cd\u4e0e\u6807\u7b7e\u51fa\u73b0\u7684\u9891\u7387\u6210\u53cd\u6bd4;</li> <li>Focal Tversky Loss: \u805a\u7126\u5230\u4f4e\u7f6e\u4fe1\u5ea6\u7684\u96be\u6837\u672c;</li> <li>Penalty Loss: \u5728 GIoU \u7684\u57fa\u7840\u4e0a, \u5bf9 FN \u548c FP \u65bd\u52a0\u60e9\u7f5a\u3002</li> </ul>"}, {"location": "segmentation/losses/#boundary-based-loss", "title": "Boundary-based Loss", "text": "<p>\u8981\u70b9: \u6700\u5c0f\u5316 GT \u548c\u9884\u6d4b\u95f4\u7684\u8ddd\u79bb, \u5e38\u4e0e Region-based Loss \u8054\u7528\u4ee5\u63d0\u9ad8\u6a21\u578b\u8bad\u7ec3\u7a33\u5b9a\u6027\u3002</p>"}, {"location": "segmentation/losses/#boundary-loss", "title": "Boundary Loss", "text": ""}, {"location": "segmentation/losses/#_1", "title": "\u52a8\u673a", "text": "<p>CE Loss \u548c Dice Loss \u5bf9\u7c7b\u522b\u4e0d\u5e73\u8861\u654f\u611f, \u7f51\u7edc\u5bb9\u6613\u503e\u5411\u4e8e\u80cc\u666f\u3002</p> <ul> <li>CE Loss \u4e2d\u80cc\u666f\u7684 Loss \u5bb9\u6613\u5360\u4e3b\u5bfc;</li> <li>\u5bf9\u6240\u6709\u7684\u80cc\u666f\u50cf\u7d20\u4e00\u89c6\u540c\u4ec1, \u5ffd\u7565\u4e86\u7a7a\u95f4\u4fe1\u606f\u3002</li> <li>\u7406\u8bba\u4e0a, \u8ddd\u79bb GT \u8d8a\u8fdc\u7684\u8bef\u5206\u5272, \u5e94\u8be5\u7ed9\u4e0e\u7684\u60e9\u7f5a\u6743\u91cd\u8d8a\u5927\u3002</li> </ul>"}, {"location": "segmentation/losses/#_2", "title": "\u65b9\u6cd5", "text": "<p>\u76ee\u7684: \u6700\u5c0f\u5316\u5206\u5272\u8fb9\u754c\u4e0e GT \u8fb9\u754c\u95f4\u7684\u8ddd\u79bb\u3002 </p> <p>\u53d7\u79bb\u6563\u4f18\u5316\u4e2d\u66f2\u7ebf\u6f14\u8fdb\u65b9\u6cd5\u7684\u542f\u53d1, \u4e24\u4e2a\u66f2\u7ebf\u8fb9\u754c\u7684\u8ddd\u79bb\u53ef\u4ee5\u8868\u793a\u4e3a</p> \\[ Dist(\\partial G, \\partial S) \\approx \\int_{\\partial G} \\|y_{\\partial S}  (p) - p\\|^2 dp \\] <p>\u8f6c\u5316\u4e3a\u5bf9 \\(\\Delta S\\) \u7684\u79ef\u5206</p> \\[ Dist(\\partial G, \\partial S) \\approx 2 \\int_{\\Delta S} D_G(q) dq \\] <p>\u5176\u4e2d \\(D_G(q)\\) \u662f\u5bf9\u5e94 \\(\\partial G\\) \u7684\u8ddd\u79bb\u56fe\u3002</p>"}, {"location": "segmentation/semantic_seg/", "title": "\u8bed\u4e49\u5206\u5272", "text": ""}, {"location": "segmentation/semantic_seg/#ocrnet", "title": "OCRNet", "text": ""}, {"location": "segmentation/semantic_seg/#_1", "title": "\u7814\u7a76\u52a8\u673a", "text": "<p>\u57fa\u4e8e FCN \u7684\u8bed\u4e49\u5206\u5272\u65b9\u6cd5\u9762\u4e343\u4e2a\u6311\u6218:</p> <ul> <li>\u5206\u8fa8\u7387\u4f4e: \u968f\u7740\u7f51\u7edc\u52a0\u6df1\uff0c\u9010\u6e10\u964d\u4f4e\u5206\u8fa8\u7387\u5bfc\u81f4\u7a7a\u95f4\u4fe1\u606f\u635f\u5931 (\u2192 HRNet)\uff1b</li> <li>\u4e0a\u4e0b\u6587\u4fe1\u606f\u7f3a\u5931: \u50cf\u7d20\u7ea7\u7684\u7279\u5f81\u611f\u53d7\u91ce\u4e0d\u591f\uff0c\u4e14\u7269\u4f53\u5177\u6709\u591a\u5c3a\u5ea6\u7279\u70b9 (\u2192OCRNet)\uff1b</li> <li>\u8fb9\u754c\u9519\u8bef*: \u8fb9\u754c\u533a\u57df\u50cf\u7d20\u7684\u7279\u5f81\u8868\u793a\u7684\u5224\u522b\u6027\u5f31 (\u2192SegFix)\u3002</li> </ul>"}, {"location": "segmentation/semantic_seg/#_2", "title": "\u76f8\u5173\u7814\u7a76", "text": "<p>\u4e3a\u4e86\u6539\u5584 OCR (Object Contextrual Representation) \u95ee\u9898\uff0c\u76f8\u5173\u7684\u7814\u7a76\u6709</p> <ul> <li>ParseNet (ICLR2016) \u4f7f\u7528 Global Pooling \u8ba1\u7b97\u4e00\u4e2a\u5168\u5c40\u7279\u5f81\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u53bb\u589e\u5f3a\u6bcf\u4e2a\u50cf\u7d20\u7684\u7279\u5f81\u8868\u8fbe\uff1b</li> <li>PSPNet (CVPR2017) \u4f7f\u7528 Pyramid Pooling \u62bd\u53d6\u591a\u5c3a\u5ea6\u7279\u5f81\uff1b</li> <li>DeepLabv2/v3: \u4f7f\u7528\u4e86\u7a7a\u6d1e\u5377\u79ef (Atrous Convolution) \u62bd\u53d6\u591a\u5c3a\u5ea6\u7279\u5f81\u3002</li> </ul>"}, {"location": "segmentation/semantic_seg/#_3", "title": "\u6838\u5fc3\u601d\u60f3", "text": "<p>\u663e\u5f0f\u5730\u5c06 \u50cf\u7d20\u5206\u7c7b \u95ee\u9898\u8f6c\u5316\u4e3a \u533a\u57df\u5206\u7c7b\u95ee\u9898\u3002</p> <p>\u6211\u7684\u7406\u89e3\u5c31\u662f\u7528\u6bcf\u4e2a\"\u50cf\u7d20\"\u7684\u7279\u5f81\u8868\u8fbe\u4e0e\u6bcf\u4e2a\u7c7b\u522b\u7684\u7279\u5f81\u8868\u8fbe\u8ba1\u7b97\u76f8\u4f3c\u5ea6\u3002\u8fd9\u91cc\u7684\"\u50cf\u7d20\"\u6307\u7684\u662f\u7279\u5f81\u56fe\u4e0a\u7684\u67d0\u4e2a\u70b9\uff0c\u5bf9\u5e94\u5230\u539f\u56fe\u5176\u5b9e\u5c31\u662f\u533a\u57df\u3002</p>"}, {"location": "segmentation/semantic_seg/#_4", "title": "\u5177\u4f53\u5b9e\u73b0", "text": "<p>OCRNet \u7684\u5177\u4f53\u5b9e\u73b0\u5305\u542b\u4e09\u4e2a\u9636\u6bb5\uff1a</p> <ul> <li>\u63d0\u53d6\u533a\u57df\u7c7b\u522b\u7684\u7279\u5f81\uff1a \u6839\u636e \u50cf\u7d20\u8bed\u4e49\u4fe1\u606f (Soft Object Regions) \u548c \u50cf\u7d20\u7279\u5f81 (Pixel Representation) \u5f97\u5230\u6bcf\u4e2a \u7c7b\u522b\u533a\u57df\u7279\u5f81 (Object Region Representations)\uff1b</li> <li>\u8ba1\u7b97\u50cf\u7d20\u533a\u57df\u7684\u76f8\u4f3c\u5ea6: \u8ba1\u7b97 \u50cf\u7d20\u7279\u5f81 \u548c\u7b2c\u4e00\u6b65\u5f97\u5230\u7684 \u7c7b\u522b\u533a\u57df\u7279\u5f81 \u50cf\u7d20\u4e0e\u533a\u57df\u7684\u76f8\u4f3c\u5ea6\uff0c\u5373\u4f9d\u8d56\u5173\u7cfb (Pixel-Region Relation);</li> <li>\u83b7\u5f97\u4e0a\u4e0b\u6587\u8868\u793a: \u7531\u7b2c\u4e8c\u6b65\u8ba1\u7b97\u5f97\u5230\u76f8\u4f3c\u5ea6\u56fe\uff0c\u5176\u4e58\u4ee5 \u7c7b\u522b\u533a\u57df\u7279\u5f81 \u5219\u53ef\u5f97\u5230\u4e0a\u4e0b\u6587\u8868\u793a\u3002\u6700\u540e\u4e0e\u50cf\u7d20\u7279\u5f81\u8fdb\u884c\u62fc\u63a5\uff0c\u518d\u505a\u901a\u9053\u8c03\u6574\u5f97\u5230\u6700\u7ec8\u7684\u4e0a\u4e0b\u6587\u8868\u793a\u3002</li> </ul>"}, {"location": "segmentation/wsis/", "title": "\u5f31\u76d1\u7763\u5b9e\u4f8b\u5206\u5272", "text": "<p>\u5f31\u76d1\u7763\u5206\u5272\u7684\u5173\u952e: \u5982\u4f55\u8bbe\u8ba1\u66f4\u4f18\u7684**\u635f\u5931\u51fd\u6570**, \u5f15\u5bfc\u6a21\u578b\u5145\u5206\u5229\u7528\u5148\u9a8c\u4fe1\u606f\u5206\u5272\u51fa\u66f4\u597d\u7684\u7ed3\u679c\u3002</p>"}, {"location": "segmentation/wsis/#_1", "title": "\u5fc5\u8981\u6027", "text": "<ul> <li>\u4ee5\u524d\u7684\u7b97\u6cd5\u6846\u67b6:  \u5f31\u76d1\u7763\u5b9e\u4f8b\u5206\u5272\u662f\u7b2c\u4e00\u6b21\u5f15\u5165\u5de5\u4e1a AI \u8d28\u68c0\u3002</li> </ul>"}, {"location": "segmentation/wsis/#_2", "title": "\u9879\u76ee\u5c42\u9762", "text": "<p>\u7b97\u6cd5\u4e00\u822c\u4ecb\u5165\u6bd4\u8f83\u665a, \u4e3b\u8981\u5b58\u5728\u6210\u50cf\u8d28\u91cf\u548c\u7f3a\u9677\u5b9a\u4e49\u4e24\u4e2a\u95ee\u9898.</p> <ul> <li>\u6210\u50cf\u8d28\u91cf: \u8ddf\u516c\u53f8\u5185\u90e8\u95e8\u548c\u786c\u4ef6\u5408\u4f5c\u4f19\u4f34\u6c9f\u901a</li> <li>\u7f3a\u9677\u5b9a\u4e49: \u5ba2\u6237\u548c\u7b97\u6cd5\u4e24\u8005\u5bf9\u6570\u636e\u7684\u7406\u89e3\u6709\u504f\u5dee\uff1a(1) \u5ba2\u6237\u6309\u7167\u7269\u7406\u6210\u56e0\u5b9a\u4e49\u7f3a\u9677\uff1b(2) \u7b97\u6cd5\u6309\u7167\u7f3a\u9677\u8868\u5f81\u5b9a\u4e49\u7f3a\u9677. \u6309\u7167\u5ba2\u6237\u7684\u5b9a\u4e49\u5bb9\u6613\u5728\u6210\u50cf\u540e\u9020\u6210\u6b67\u4e49\u3002</li> </ul> <p>\u57fa\u672c\u6d41\u7a0b:</p> <ul> <li>\u8ba9\u5ba2\u6237\u63d0\u4f9b\u4e00\u4e9b\u5178\u578b\u6837\u4f8b, \u6839\u636e\u5ba2\u6237\u7ed9\u5b9a\u7684\u7f3a\u9677\u7c7b\u578b\u5408\u5e76;</li> <li>\u5236\u5b9a\u6807\u6ce8\u89c4\u8303;</li> <li>\u8bd5\u6807\u6ce8\uff0c\u53cd\u9988\u5ba2\u6237\u786e\u8ba4;</li> <li>\u518d\u5f00\u59cb\u5927\u89c4\u6a21\u6807\u6ce8\u3002</li> </ul>"}, {"location": "segmentation/wsis/#_3", "title": "\u7b97\u6cd5\u5c42\u9762", "text": "<p>\u4e3a\u4ec0\u4e48\u8981\u7528\u5f31\u76d1\u7763\u5206\u5272\u6846\u67b6\uff1f</p> <ul> <li>\u68c0\u6d4b\u6846\u67b6\u63d0\u4f9b\u7684\u9762\u79ef\u8ba1\u7b97\u592a\u7cd9\uff1b</li> <li>\u5168\u76d1\u7763\u5b9e\u4f8b\u5206\u5272\u6807\u6ce8\u592a\u8017\u65f6;</li> </ul> <p>\u4e3a\u4ec0\u4e48\u8981\u6539\u8fdb BoxInst\uff1f</p> <ul> <li>BoxInst \u53ea\u4f7f\u7528\u4e86\u4f4e\u5c42\u7279\u5f81(\u989c\u8272\u76f8\u4f3c\u5ea6);</li> <li>BoxInst \u53ea\u4f7f\u7528\u4e86\u5c40\u90e8\u7279\u5f81 (stride=2 \u7684\u516b\u9886\u57df);</li> <li>\u4f53\u73b0\u5728\u5206\u5272\u6548\u679c\u4e0a, \u5c31\u662f\u524d\u666f/\u80cc\u666f\u8fb9\u7f18\u4e0d\u660e\u663e\u65f6\u6613\u8bef\u5206\u5272</li> </ul>"}, {"location": "segmentation/wsis/#_4", "title": "\u521b\u65b0\u70b9", "text": ""}, {"location": "segmentation/wsis/#_5", "title": "\u4f4e\u5c42\u56fe\u50cf\u7279\u5f81\u548c\u9ad8\u5c42\u8bed\u4e49\u7279\u5f81\u878d\u5408", "text": "\\[ \\begin{aligned} k(\\textbf{f}_i, \\textbf{f}_j) &amp;= \\exp \\left(-\\frac{|p_i^l - p_j^l|^2}{2\\theta_l^2}\\right) * \\exp \\left(-\\frac{|p_i^h - p_j^h|^2}{2\\theta_h^2}\\right) \\\\ &amp;= \\exp \\left(-\\frac{|p_i^l - p_j^l|^2}{2\\theta_l^2}-\\frac{|p_i^h - p_j^h|^2}{2\\theta_h^2}\\right)  \\end{aligned} \\] <ul> <li>\\(i, j\\): \u8868\u793a\u50cf\u7d20\u5bf9\u5750\u6807\u4f4d\u7f6e;</li> <li>\\(l, h\\): \u4f4e\u5c42\u3001\u9ad8\u5c42\u7279\u5f81\u6807\u8bc6\u3002</li> </ul>"}, {"location": "segmentation/wsis/#lsh", "title": "\u57fa\u4e8e LSH \u7684\u975e\u5c40\u90e8\u7a00\u758f\u7279\u5f81\u641c\u7d22", "text": ""}, {"location": "segmentation/wsis/#motivation", "title": "\u6539\u8fdb\u7684 Motivation", "text": "<ul> <li>\u76f8\u4f3c\u5ea6\u77e9\u9635\u7a20\u5bc6\u8ba1\u7b97\u590d\u6742\u5ea6\u9ad8: \\(O(N^2)\\) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\u4f8b\u5982 \u5bf9\u4e8e 1K \\(\\times\\) 1K \u56fe\u50cf, \u76f8\u4f3c\u5ea6\u77e9\u9635\u5927\u5c0f\u4e3a 1M \\(\\times\\) 1M, \u6309 1\u4e2a\u6d6e\u70b9\u6570 4 \u5b57\u8282, \u5219\u76f8\u4f3c\u5ea6\u77e9\u9635\u9700\u8981\u5360\u7528\u7684\u663e\u5b58\u8fbe\u5230\u4e3a 4000G, \u663e\u7136\u4e0d\u53ef\u63a5\u53d7;</li> <li>\u76ee\u7684: \u9ad8\u7ef4\u7a7a\u95f4\u5feb\u901f\u5bfb\u627e\u5230\u7279\u5f81\u7684\u6700\u8fd1\u90bb.</li> </ul>"}, {"location": "segmentation/wsis/#_6", "title": "\u5047\u8bbe", "text": "<p>\u5982\u679c\u5411\u91cf\u5728\u73b0\u6709\u7a7a\u95f4\u5185\u76f8\u4f3c\uff0c\u90a3\u4e48\u7ecf\u8fc7\u6295\u5f71\u53d8\u6362\u540e\uff0c\u5b83\u4eec\u5728\u65b0\u7684\u6570\u636e\u7a7a\u95f4\u4e2d\u4ecd\u7136\u76f8\u90bb\u7684\u6982\u7387\u5f88\u5927\uff0c\u800c\u4e0d\u76f8\u90bb\u7684\u6570\u636e\u70b9\u88ab\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u6876\u7684\u6982\u7387\u5f88\u5c0f\u3002\u4f7f\u7528\u4e00\u7cfb\u5217\u7684LSH\u7c07\uff08LSH family\uff09\u5c06\u7279\u5f81\u5411\u91cf\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u53d8\u6362\u540e\uff0c\u539f\u59cb\u7684\u6570\u636e\u4f1a\u843d\u5165\u5230\u4e0d\u540c\u7684\u6876(buckets)\u4e2d\uff0c\u57fa\u4e8e\u539f\u6709\u7684\u5047\u8bbe\u539f\u6765\u7a7a\u95f4\u76f8\u90bb\u7684\u70b9\u66f4\u6709\u53ef\u80fd\u4f1a\u843d\u5165\u5230\u540c\u4e00\u4e2ahash\u6876\u4e2d\uff0c\u4e0d\u76f8\u90bb\u7684\u70b9\u4e0d\u592a\u53ef\u80fd\u843d\u5165\u540c\u4e00\u4e2a\u6876\u4e2d\u3002</p> <p>\u516c\u5f0f\u5316\u4e3a: \u5982\u679c \\(p\\) \u4e0e \\(q\\) \u63a5\u8fd1, \u90a3\u4e48 \\(hash(p) \\sim hash(q)\\)</p> <p>\u7ecf\u8fc7 hash \u51fd\u6570\u7684\u6620\u5c04, \u8ddd\u79bb\u76f8\u8fd1\u7684\u70b9\u4f1a\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u6876\u4e2d\u3002</p>"}, {"location": "segmentation/wsis/#_7", "title": "\u64cd\u4f5c", "text": "<ul> <li>\u751f\u6210\u968f\u673a\u77e9\u9635 \\(R\\), \u5176\u5927\u5c0f\u4e3a \\([d_k, b/2]\\);</li> <li>\u7136\u540e\u5b9a\u4e49\u54c8\u5e0c\u51fd\u6570 \\(h(x)= \\arg\\max[xR;-xR]\\);</li> <li>\u540c\u4e00\u4e2a\u6876\u4e2d, \u4ee5\u5176\u4e2d\u7684\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u57fa\u51c6, \u968f\u673a\u62bd\u53d6\u8be5\u6876\u4e2d\u7684 \\(n\\) \u4e2a\u7279\u5f81\u4f5c\u4e3a\u975e\u5c40\u90e8\u7279\u5f81\u3002</li> </ul>"}, {"location": "segmentation/wsis/#_8", "title": "\u635f\u5931\u51fd\u6570", "text": "\\[ \\begin{aligned} L_{pairwise}(x_p, x_q) &amp;= L_{local} + L_{non-local} \\\\ &amp;= -\\frac{1}{N} \\sum_{e\\in E_{in}} \\mathbb{1}_{S_e &gt; \\tau} \\log P(y_e=1) + \\sum_{(p,q)\\in N_{nl}} k(\\textbf{f}_p, \\textbf{f}_q) |x_p - x_q| \\end{aligned} \\]"}, {"location": "segmentation/wsis/#_9", "title": "\u6548\u679c", "text": ""}, {"location": "segmentation/wsis/#coco", "title": "COCO", "text": "<ul> <li>R50_FPN_3x</li> <li>8 \u5361, batch-size = 16</li> </ul> \u9ad8\u5c42\u7279\u5f81 \u975e\u5c40\u90e8\u7279\u5f81 mask_AP 0.5+ 0.6+ AP AP50 AP75 APs APm APl CondInst 37.8 59.1 40.5 21.0 40.3 48.7 BoxInst 31.8 54.0 32.2 14.5 34.2 47.9 Proposed 32.9 55.1 35.1 15.4 36.3 48.3"}, {"location": "segmentation/wsis/#_10", "title": "\u771f\u5b9e\u6548\u679c", "text": "<ul> <li>\u6539\u5584\u4e86\u76ee\u6807\u8fb9\u7f18\u7684\u5206\u5272\u7cbe\u5ea6</li> </ul>"}]}